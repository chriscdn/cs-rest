/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/apiinfo": {
    /**
     * Get API Info
     * @description Provides the GET, POST, PUT and DELETE methods for the given resource.
     */
    get: operations["GetAPIInfo"];
  };
  "/v1/auth": {
    /**
     * Get Current User Info
     * @description Gets information on the currently authenticated user.
     */
    get: operations["GetCurrentUserInfo"];
    /**
     * Authenticate user
     * @description Authenticates user with the given credentials, returning an OTCS ticket if authorized.
     */
    post: operations["authenticate"];
    /**
     * Delete Current User Session
     * @description Terminates the session of the currently authenticated user.
     */
    delete: operations["DeleteCurrentUserSession"];
  };
  "/v1/bulkactions": {
    /**
     * Bulk node actions
     * @description Gets the list of actions that can be performed on multiple nodes. <ul><b>NOTE: </b>This call only lists the actions and does not perform them. Bulk actions (ie. deleting multiple nodes, copying multiple nodes, reserving multiple nodes) are not yet supported in REST API.</ul>
     */
    get: operations["bulk_actions"];
  };
  "/v1/nodes/{id}/categories": {
    /**
     * List categories on a node
     * @description Get the categories applied to the specified node
     */
    get: operations["getCategories"];
    /**
     * Apply a category to a node
     * @description Applies an existing category to a node. Only one category (and its values) may be applied at a time<br><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Apply the category and use the default values for its attributes:<br><code>{"category_id":9830}</code><br><br>Apply the category and change the value of the Textfield:<br><code>{"category_id":9830,"9830_2":"new value"}</code><br><br>Apply the category and change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"category_id":9830,"9830_3_2_4":["","","new value"]}</code>
     */
    post: operations["addCategory"];
  };
  "/v2/nodes/{id}/categories": {
    /**
     * List categories on a node
     * @description Get the categories applied to the specified node
     */
    get: operations["getCategories2"];
    /**
     * Apply a category to a node
     * @description Applies an existing category to a node. Only one category (and its values) may be applied at a time<br><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Apply the category and use the default values for its attributes:<br><code>{"category_id":9830}</code><br><br>Apply the category and change the value of the Textfield:<br><code>{"category_id":9830,"9830_2":"new value"}</code><br><br>Apply the category and change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"category_id":9830,"9830_3_2_4":["","","new value"]}</code>
     */
    post: operations["addCategory2"];
  };
  "/v2/nodes/{id}/categories/apply": {
    /**
     * Apply categories to sub-nodes of a node
     * @description Apply categories to sub-nodes of a node (i.e. Apply Down).<br><br>The following examples will assume that there are two categories (ID 9830, ID 6740) that have one TextField attribute each.<br><br>Apply category 9830 with default action (add_upgrade) and category 6740 with 'replace' action:<br><code>{"categories": [{ "id": 9830, "action": null },{ "id": 6740, "action": "replace" } ], "add_version" : false, "clear_existing_categories" : false}</code><br><br>Only clear existing categories:<br><code>{"categories": [{ "id": 9830, "action": "none" },{ "id": 6740, "action": "none" } ], "add_version" : false, "clear_existing_categories" : true}</code><br><br>Apply category 9830 with default action (add_upgrade) and category 6740 with 'replace' action, and adding a new version:<br><code>{"categories": [{ "id": 9830, "action": null },{ "id": 6740, "action": "replace" } ], "add_version" : true, "clear_existing_categories" : false}</code>
     */
    post: operations["applyDownCategories"];
  };
  "/v1/nodes/{id}/categories/actions": {
    /**
     * Get category-related actions for a node
     * @description Get the available category-related actions for a node
     */
    get: operations["getCategoriesActions"];
  };
  "/v1/nodes/{id}/categories/{category_id}/actions": {
    /**
     * Get category-related actions for a category on a node
     * @description Get the available category-related actions for a category on a node
     */
    get: operations["getCategoriesActions2"];
  };
  "/v2/nodes/{id}/categories/{category_id}/inheritance": {
    /**
     * Enable category inheritance for the node's children
     * @description Enable inheritance of the given category (which is on the node) by the node's children. When child nodes are added under the node, this category will be inherited.
     */
    post: operations["enableCategoryInheritance"];
    /**
     * Disable category inheritance for the node's children
     * @description Disable inheritance of the given category (which is on the node) by the node's children. When child nodes are added under the node, this category will not be inherited.
     */
    delete: operations["disableCategoryInheritance"];
  };
  "/v1/nodes/{id}/categories/{category_id}/": {
    /**
     * Get category info for a node
     * @description Get details for the given category applied to the specified node
     */
    get: operations["getCategory"];
    /**
     * Update a category on a node
     * @description Updates an existing category on a node. Only one category (and its values) may be updated at a time.<br><br>The <b>optional</b> 'metadata_token' parameter may be specified if there is a need to avoid edit conflicts. There are two ways to retrieve the current metadata_token(s):<ol start="1"><li>Pass in the current metadata_token when updating the category (see the example below). If the update is successful, metadata_token(s) will be generated and returned under state.categories and these will be valid for the next category update call.</li><li>If you want the current metadata_tokens before performing a category update, use the call 'GET /v2/nodes/{id}?state'. The current metadata_token(s) will be displayed under results.state.categories</li></ol><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Change the value of the Textfield:<br><code>{"9830_2":"new value"}</code><br><br>Change the value of the Textfield while using the metadata_token to avoid edit conflicts:<br><code>{"9830_1":{"metadata_token":"9ec9bcab09f9963db044ff6749e5c5c2"},"9830_2":"new value"}</code><br><br>Change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"9830_3_2_4":["","","new value"]}</code><br><br>Remove the Set's second row:<br><code>{"9830_3_2":""}</code>
     */
    put: operations["updateCategory"];
    /**
     * Remove a category from a node
     * @description Removes the given category from the specified node.
     */
    delete: operations["deleteCategory"];
  };
  "/v2/nodes/{id}/categories/{category_id}/": {
    /**
     * Get category info for a node
     * @description Get details for the given category applied to the specified node
     */
    get: operations["getCategory2"];
    /**
     * Update a category on a node
     * @description Updates an existing category on a node. Only one category (and its values) may be updated at a time.<br><br>The <b>optional</b> 'metadata_token' parameter may be specified if there is a need to avoid edit conflicts. There are two ways to retrieve the current metadata_token(s):<ol start="1"><li>Pass in the current metadata_token when updating the category (see the example below). If the update is successful, metadata_token(s) will be generated and returned under results.state.categories and these will be valid for the next category update call.</li><li>If you want the current metadata_tokens before performing a category update, use the call 'GET /v2/nodes/{id}?state'. The current metadata_token(s) will be displayed under results.state.categories</li></ol><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Change the value of the Textfield:<br><code>{"9830_2":"new value"}</code><br><br>Change the value of the Textfield while using the metadata_token to avoid edit conflicts:<br><code>{"9830_1":{"metadata_token":"9ec9bcab09f9963db044ff6749e5c5c2"},"9830_2":"new value"}</code><br><br>Change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"9830_3_2_4":["","","new value"]}</code><br><br>Remove the Set's second row:<br><code>{"9830_3_2":""}</code>
     */
    put: operations["updateCategory2"];
    /**
     * Remove a category from a node
     * @description Removes the given category from the specified node.
     */
    delete: operations["deleteCategory2"];
  };
  "/v2/nodes/{id}/categories/upgrade": {
    /**
     * Upgrade categories on a node
     * @description Upgrade categories on a node to the latest category definitions. If the upgrade operation fails (because of insufficient permissions, or a category is already the latest version, etc) then nothing will happen to any of the categories on the node (ie. none of them will be upgraded).<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Upgrade the category 8479 on the node:<br><code>body = { "category_id":[8479] }</code><br><br>Upgrade the categories 8479 and 7534 on the node:<br><code>body = { "category_id":[8479,7534] }</code>
     */
    put: operations["upgradeCategory"];
  };
  "/v2/csapplications/{action}": {
    /**
     * Perform an action against a staged or installed Content Server Application
     * @description Allows for the installation, upgrade, uninstall or deletion of a Content Server Application by name.
     */
    post: operations["CSApplicationAPICommand"];
  };
  "/v2/doctemplates": {
    /**
     * Creates a Instance for Document Template
     * @description Creates a Instance for selected Document Template. The body must contain information about the parent_id and the template_id. You can provide information about the name, name_multilingual, description, description_multilingual, roles.
     */
    post: operations["createDocumentTemplateInstance"];
  };
  "/v1/documentproperties/insertableproperties/{id}": {
    /**
     * Insertable Properties
     * @description Gets list of Insertable Properties and the associated value.
     */
    get: operations["insertableProperties"];
  };
  "/v2/draftprocesses/{draftprocess_id}": {
    /**
     * Initiates a process from a draft process
     * @description Initiates or updates a workflow based on the provided action.<br><br> If action is initiate ,workflow intance will be created based on the draftprocess_id passed in the path with comment as optional filed .<br> if action is formupate , data passed via values body parameters will be set to form data prior initiating the workflow . <br><br>Examples <ul><li>To initiating the workflow with comment as optional.</li><br><code>body:{"action":"Initiate","comment":"start"} </code> <li><br> To prepare the workflow with empty values before initiating the workflow </li> <br> <code> body : {"action":"formUpdate","values":{"WorkflowForm":{}}} </code> <br><br> <li> To update the form of workflow before initiating the workflow </li> <br> <code> body : {"action":"formUpdate","values":{"WorkflowForm_1x4x1x2":"ABC"}} </code>
     */
    put: operations["initiateProcess"];
  };
  "/v2/draftprocesses": {
    /**
     * Creates a draft process.
     * @description Creates a draft process and optional custom data can be set.<br><br>When request has only workflow_id ,it creates temporary workflow based on the workflow_id .<br>If request is having optional form param doc_ids ,api sets the custom data to process created by workflow_id .<br><br>The following examples will assume that there is a workflow_id 6686 and doc_ids 384,9684 <ul><li>Creating the process with workflow_id</li><br><code>{"workflow_id":6686}</code><br><br><li>Creating the process with workflow_id and setting custom data via doc_ids ( Note : Multiple doc ids to be separated with coma) </li><br> <code>{"workflow_id":6686,"doc_ids":"384,9684"}</code><br>
     */
    post: operations["createDraftProcess"];
  };
  "/v2/export/system/settings": {
    /**
     * Export System Settings to a report file
     * @description Export System Settings to a report file
     */
    get: operations["Export"];
  };
  "/v2/facets/{id}": {
    /**
     * List facets on a node
     * @description Gets facet information for the specified node ID.  <br><br>NOTE: If the node is a Virtual Folder the facets used to generate this object will be returned by default.
     */
    get: operations["GetFacets"];
  };
  "/v1/forms/nodes/categories/create": {
    /**
     * Alpaca form for creating a category on a node
     * @description Gets the Alpaca form for creating a category on a node.
     */
    get: operations["categoriescreateform"];
  };
  "/v1/forms/nodes/categories/update": {
    /**
     * Alpaca form for updating a category on a node
     * @description Gets the Alpaca form for updating a single category applied to a node. The metadata state tokens (for edit conflict resolution) will be under data.{category ID}_1.metadata_token
     */
    get: operations["categoriesupdateform"];
  };
  "/v1/forms/nodes/copy": {
    /**
     * Alpaca form for copying a node
     * @description Gets the Alpaca form for copying a node.  If adding categories, the following must be specified:  'parent_id', 'id' (only one id - adding categories during a bulk copy is not supported), 'inheritance', 'category_id' (can be specified multiple times). Example: ?parent_id=2000&id=1234&inheritance=0&category_id=4444&category_id=5555. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation.
     */
    get: operations["copyform"];
  };
  "/v1/forms/nodes/create": {
    /**
     * Alpaca form for creating a node
     * @description Gets the Alpaca form for creating a node.
     */
    get: operations["createform"];
  };
  "/v1/forms/nodes/file": {
    /**
     * Alpaca form for filing a node
     * @description Gets the Alpaca form for filing a node.
     */
    get: operations["GetFormFileNode"];
  };
  "/v1/forms/nodes/move": {
    /**
     * Alpaca form for moving a node
     * @description Gets the Alpaca form for moving a node.  If adding categories, the following must be specified:  'parent_id', 'id' (only one id - adding categories during a bulk move is not supported), 'inheritance', 'category_id' (can be specified multiple times).  Example: ?parent_id=2000&id=1234&inheritance=0&category_id=4444&category_id=5555
     */
    get: operations["moveform"];
  };
  "/v1/forms/nodes/properties/general": {
    /**
     * Alpaca form detailing the general properties of a node
     * @description Gets the Alpaca form detailing the general properties of a node. The metadata state token (for edit conflict resolution) will be under data.metadata_token
     */
    get: operations["generalpropertiesform"];
  };
  "/v1/forms/nodes/rename": {
    /**
     * Alpaca form for renaming node
     * @description Gets the Alpaca form for renaming a node.
     */
    get: operations["renameform"];
  };
  "/v1/forms/nodes/run": {
    /**
     * Alpaca form for running a WebReport
     * @description Returns the Alpaca form for running a WebReport. (*) against a field name denotes that the field supports tag replacement.
     */
    get: operations["runform"];
  };
  "/v1/forms/nodes/properties/specific": {
    /**
     * Alpaca form detailing the specific properties of a node
     * @description Gets the Alpaca form detailing the specific properties of a node.
     */
    get: operations["specificpropertiesform"];
  };
  "/v1/forms/nodes/update": {
    /**
     * Alpaca form(s) for updating a node
     * @description Gets the Alpaca form(s) for updating a node. The metadata state token (for edit conflict resolution) on the node data will be under data.metadata_token. The category-specific metadata state tokens will be on the categories form (role_name: categories) under data.{category ID}.{category ID}_1.metadata_token
     */
    get: operations["updateforminfo"];
  };
  "/v1/forms/nodes/versions/categories": {
    /**
     * Alpaca form for displaying the categories on a version
     * @description Gets the Alpaca form for displaying the categories on a version.
     */
    get: operations["versionscategoriesform"];
  };
  "/v1/forms/nodes/versions/create": {
    /**
     * Alpaca form for creating a version on a node
     * @description Gets the Alpaca form for creating a version on a node.
     */
    get: operations["versionscreateform"];
  };
  "/v1/forms/nodes/versions/update": {
    /**
     * Alpaca form for updating a version on a node
     * @description Gets the Alpaca form for updating a version on a node.
     */
    get: operations["versionsupdateform"];
  };
  "/v1/forms/nodes/versions/properties/general": {
    /**
     * Alpaca form detailing the general properties of a version
     * @description Gets the Alpaca form detailing the general properties of a version.
     */
    get: operations["versiongeneralpropertiesform"];
  };
  "/v1/forms/nodes/versions/properties/specific": {
    /**
     * Alpaca form detailing the specific properties of a version
     * @description Gets the Alpaca form detailing the specific properties of a version.
     */
    get: operations["versionspecificpropertiesform"];
  };
  "/v1/forms/processes/tasks/update": {
    /**
     * Alpaca forms detailing the specific properties of a workflow
     * @description Gets the Alpaca forms for displaying a workflow item.
     */
    get: operations["workflowpropertiesform"];
  };
  "/v1/forms/draftprocesses": {
    /**
     * Alpaca forms detailing the specific properties of a workflow
     * @description Gets the Alpaca forms for displaying a draft workflow item.
     */
    get: operations["workflowpropertiesform2"];
  };
  "/v1/forms/users/{user_id}/view": {
    /**
     * Alpaca form for a user
     * @description Gets the Alpaca form for a user.
     */
    get: operations["getuserform"];
  };
  "/v2/forms/doctemplates/create": {
    /**
     * Alpaca Forms for instance creation from template
     * @description Fetches the meta data for document templates to render the create form while creating an instance to a selected template
     */
    get: operations["GetCreateForm"];
  };
  "/v2/intelligentfiling/{id}": {
    /**
     * Autofile a document
     * @description Files a document from an Intelligent Filing Folder.
     */
    post: operations["AutofileDocument"];
  };
  "/v2/lladmin/adminserver/setup": {
    /**
     * Create/check status of an Admin Server
     * @description Checks on the status of an existing Admin Server or creates it if it doesn't exist
     */
    post: operations["lladmin"];
  };
  "/v1/members": {
    /**
     * Search for user | Search for group
     * @description Search for a user or group
     */
    get: operations["SearchMember"];
    /**
     * Create group | Create user
     * @description Creates a user or group.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Example to create a user:<br><br><code>body : { "type": 0, "name": "new_user", "group_id": 1001 }</code><br><br>Example to create a group:<br><br><code>body : { "type": 1, "name": "new_group" }</code><br><br><b>The parameters for creating a user or group are listed below:</b><hr></hr>
     *
     * Create user
     * - <b>required fields</b>: type, name, group_id
     * - defaults: type = **0**
     *
     * Create group
     * - <b>required fields</b>: type, name
     * - defaults: type = **1**
     */
    post: operations["CreateMember"];
  };
  "/v2/members": {
    /**
     * Search for user | Search for group
     * @description Search for a user or group
     */
    get: operations["SearchMember2"];
    /**
     * Create user | Create group
     * @description Creates a user or group.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Example to create a user:<br><br><code>body : { "type": 0, "name": "new_user", "group_id": 1001 }</code><br><br>Example to create a group:<br><br><code>body : { "type": 1, "name": "new_group" }</code><br><br><b>The parameters for creating a user or group are listed below:</b><hr></hr>
     *
     * Create user
     * - <b>required fields</b>: type, name, group_id
     * - defaults: type = **0**
     *
     * Create group
     * - <b>required fields</b>: type, name
     * - defaults: type = **1**
     */
    post: operations["CreateMember2"];
  };
  "/v1/members/{id}": {
    /**
     * Get user info | Get group info | Get restricted privilege info
     * @description Gets user's information | Gets group's information | Gets restricted privilege's information
     */
    get: operations["GetMemberInfo"];
    /**
     * Update user | Update group
     * @description Updates user's information | Updates group's information
     */
    put: operations["UpdateMemberGroup"];
    /**
     * Delete user | Delete Group
     * @description Delete user or group.
     */
    delete: operations["DeleteMember"];
  };
  "/v1/members/{id}/photo": {
    /**
     * Get profile photo
     * @description Gets the specified member's profile photo. If the user does not have permission to the profile photo no content and a status code of 500 will be returned.
     */
    get: operations["GetMemberInfo2"];
  };
  "/v2/members/{id}": {
    /**
     * Get user info | Get group info | Get restricted privilege info
     * @description Gets a user's information | Gets a group's information | Gets a restricted privilege's information
     */
    get: operations["GetMemberInfo4"];
    /**
     * Update user | Update group
     * @description Updates a user's information | Updates a group's information
     */
    put: operations["UpdateMember"];
    /**
     * Delete user | Delete group
     * @description Delete user or group.
     */
    delete: operations["DeleteMember2"];
  };
  "/v2/members/{id}/members": {
    /**
     * Lists the members of a group | Lists the members of a restricted privilege
     * @description Lists the members of a group or restricted privilege and returns their information.
     */
    get: operations["ListMembers"];
    /**
     * Add members to a group | Add members to a restricted privilege
     * @description Add members to a group. | Add members to a restricted privilege.
     */
    post: operations["AddMember"];
    /**
     * Remove members from a group | Remove members from a restricted privilege
     * @description Remove members from a group. | Remove members from a restricted privilege.
     */
    delete: operations["RemoveMember"];
  };
  "/v2/members/memberof": {
    /**
     * Search for groups where currently logged in user is a member
     * @description Get list of groups where currently logged in user is a member.
     */
    get: operations["SearchGroups"];
  };
  "/v2/members/objecttypes": {
    /**
     * List the Object Types that can be created by the authenticated user
     * @description Get the list of Object Types that can be created by the authenticated user.
     */
    get: operations["ObjectTypes"];
  };
  "/v2/members/accessed": {
    /**
     * Get recently accessed list
     * @description Gets a member's recently accessed list. This call will return a maximum of 25 items.
     */
    get: operations["GetAccessed"];
  };
  "/v2/members/targets": {
    /**
     * Get recent targets
     * @description Get the current user's list of recently targeted containers. This call will return a maximum of 15 items.
     */
    get: operations["GetTargets"];
  };
  "/v2/members/assignments": {
    /**
     * Get assignments
     * @description Gets a user's Assignments.
     */
    get: operations["GetAssignments"];
  };
  "/v2/members/favorites": {
    /**
     * Get Favorites
     * @description Gets a user's Favorites.
     */
    get: operations["GetFavorites"];
  };
  "/v2/members/favorites/tabs": {
    /**
     * Get Favorites Tab
     * @description Gets a user's Favorites Tabs.
     */
    get: operations["GetFavoritesTab"];
    /**
     * Add a Favorites Tab
     * @description Adds a Favorites Tab for the current user.
     */
    post: operations["AddFavoritesTabs"];
  };
  "/v2/members/favorites/tabs/{id}/nodes": {
    /**
     * Get Favorites in a Tab
     * @description Gets a user's Favorites in a Tab.
     */
    get: operations["GetFavoritesInTab"];
  };
  "/v2/members/favorites/tabs/unsorted/nodes": {
    /**
     * Get unsorted Favorites
     * @description Gets a user's Unsorted Favorites.
     */
    get: operations["GetUnsortedFavorites"];
  };
  "/v2/members/favorites/{id}": {
    /**
     * Update a Favorite
     * @description Updates a favorite
     */
    put: operations["UpdateFavorite"];
    /**
     * Add a Favorite
     * @description Adds a Favorite for the current user.
     */
    post: operations["AddFavorite"];
    /**
     * Remove a Favorite
     * @description Removes a Favorite for the current user.
     */
    delete: operations["RemoveFavorite"];
  };
  "/v2/members/favorites/tabs/{id}": {
    /**
     * Update a Favorites Tab
     * @description Updates a favorites tab
     */
    put: operations["UpdateFavoritesTab"];
    /**
     * Remove a Favorites Tab
     * @description Remove a Favorites Tab and the Favorites associated with it for the current user.
     */
    delete: operations["RemoveFavoritesdTab"];
  };
  "/v2/members/reserved": {
    /**
     * Get Reserved Items
     * @description Get the objects reserved by the authenticated user.
     */
    get: operations["GetReservedItems"];
  };
  "/v2/multipart/settings": {
    /**
     * Get Large File Upload settings
     * @description Gets the current settings for Large File Upload.
     */
    get: operations["multipartUploadSettings"];
  };
  "/v2/multipart": {
    /**
     * Start a Large File Upload
     * @description Starts a Large File Upload session.
     */
    post: operations["multipartUploadStart"];
  };
  "/v2/multipart/{upload_key}/{part_number}": {
    /**
     * Upload a Large File part
     * @description Upload a file part to a Large File Upload session.
     */
    post: operations["multipartUploadPart"];
  };
  "/v2/multipart/{upload_key}": {
    /**
     * Complete a Large File Upload
     * @description Complete and close a Large File Upload session.
     */
    post: operations["multipartUploadComplete"];
    /**
     * Cancel a Large File Upload
     * @description Cancel and remove a Large File Upload session.
     */
    delete: operations["multipartUploadRemove"];
  };
  "/v2/members/sessions": {
    /**
     * Get current user's session info
     * @description Get list of session information of the currently logged in user.
     */
    get: operations["GetSessions"];
  };
  "/v2/nicknames/{nickname}/nodes": {
    /**
     * Get a node by nickname
     * @description Gets the data about a node's properties for the node with the specified nickname.
     */
    get: operations["getNodeNickname"];
  };
  "/v2/nodes/{id}/nicknames": {
    /**
     * Update a node's nickname
     * @description Updates a node's nickname.
     */
    put: operations["updateNickname"];
  };
  "/v1/nodes": {
    /**
     * Create node | Copy a node
     * @description Creates a node OR Copies a node.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will assume that there is are two categories available:<br><br>Category1 (ID 9830)<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul>Category2 (ID 6228)<ul><li>TextField (Attribute ID 2)</li></ul><br>Create a Folder:<br><br><code>{"type":0, "parent_id":2000, "name":"New Folder"}</code><br><br>Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br><code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830":{"9830_1":{}}, "6228":{"6228_1":{}}}}}</code><br><br>Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br><code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830":{"9830_3_2_4":["","","aaa"]}, "6228":{"6228_2":"bbb"}}}}</code><br><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br><code>{"original_id":12345, "parent_id":5678}</code><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br><code>{"original_id":12345, "parent_id":5678, "roles":{"categories":{"6228":{"6228_1":{}}}}}</code><br><br><br>Create a node
     * - <b>required fields</b>: type, name, parent_id
     *
     * Copy a node
     * - <b>required fields</b>: original_id, parent_id
     * - NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to
     *
     * <br><b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr>
     *
     * Create category
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **131**
     *
     * Create channel
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **207**
     *
     * Create document
     * - <b>required fields</b>: type, parent_id, name, file
     * - defaults: type = **144**
     *
     * Create compound document
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **136**
     *
     * Create folder
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **0**
     *
     * Create news
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **208**
     *
     * Create project
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **202**
     *
     * Create shortcut
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **1**
     *
     * Create generation
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **2**
     *
     * Create task
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **206**
     *
     * Create task group
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **205**
     *
     * Create task list
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **204**
     *
     * Create task milestone
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **212**
     *
     * Create URL
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **140**
     *
     * Create virtual folder
     * - <b>required fields</b>: type, parent_id, name
     * - defaults: type = **899**
     */
    post: operations["createNode"];
  };
  "/v2/nodes": {
    /**
     * Create node | Copy a node
     * @description Creates a node OR Copies a node.<br><br> <b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br> The following examples will assume that there is are two categories available:<br><br> Category1 (ID 9830) <ul>
     *   <li>TextField (Attribute ID 2)</li>
     *   <li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li>
     * </ul> Category2 (ID 6228) <ul>
     *   <li>TextField (Attribute ID 2)</li>
     * </ul><br> Create a Folder:<br><br> <code>{"type":0, "parent_id":2000, "name":"New Folder"}</code><br><br> Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br> <code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830_1":{}, "6228_1":{}}}}</code><br><br> Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br> <code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830_3_2_4":["","","aaa"], "6228_2":"bbb"}}}</code><br><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br> <code>{"original_id":12345, "parent_id":5678}</code><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br> <code>{"original_id":12345, "parent_id":5678, "roles":{"categories":{"6228_1":{}}}}</code><br><br><br> Create a node<br> <ul>
     *   <li><b>required fields</b>: type, name, parent_id</li>
     * </ul> Copy a node<br> <ul>
     *   <li><b>required fields</b>: original_id, parent_id</li>
     *   <li>NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to<br></li>
     * </ul> <b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr><br> Create category<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>131</b></li>
     * </ul> Create channel<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>207</b></li>
     * </ul> Create document<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name, (file <i>or</i> upload_key)</li>
     *   <li>defaults: type = <b>144</b></li>
     * </ul> Create compound document<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>136</b></li>
     * </ul> Create folder<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>0</b></li>
     * </ul> Create news<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>208</b></li>
     * </ul> Create project<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>202</b></li>
     * </ul> Create shortcut<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>1</b></li>
     * </ul> Create generation<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>2</b></li>
     * </ul> Create task<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>206</b></li>
     * </ul> Create task group<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>205</b></li>
     * </ul> Create task list<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>204</b></li>
     * </ul> Create task milestone<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>212</b></li>
     * </ul> Create URL<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>140</b></li>
     * </ul> Create virtual folder<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name</li>
     *   <li>defaults: type = <b>899</b></li>
     * </ul> Create search query<br> <ul>
     *   <li><b>required fields</b>: type, parent_id, name, search_cache_id</li>
     *   <li>defaults: type = <b>258</b></li>
     * </ul> Create workbench<br> <ul>
     *   <li><b>required fields</b>: type, name</li>
     *   <li>defaults: type = <b>528</b></li>
     * </ul> Create transport package<br> <ul>
     *   <li><b>required fields</b>: type, name, file (not part of the body parameter)</li>
     *   <li>defaults: type = <b>531</b></li>
     * </ul> Create search template<br> <ul>
     *   <li><b>required fields</b>: type, name, search_cache_id</li>
     *   <li>defaults: type = <b>292</b></li>
     * </ul>
     */
    post: operations["createNode2"];
  };
  "/v1/nodes/{id}": {
    /**
     * Get a node
     * @description Gets info on the node.
     */
    get: operations["getNode"];
    /**
     * Update a node | Move a node | Change the Versions Control setting for a Folder
     * @description Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { "name":"New Name", "description":"New Description" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { "name":"New Name", "description":"New Description", "metadata_token":"f0c0701a58c2cb03a955deb1ab2af306" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { "parent_id":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { "versions_control_advanced":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { "versions_control_advanced":true, "apply_to":2 }</code>
     */
    put: operations["updateNode"];
    /**
     * Delete a node
     * @description Deletes the node.
     */
    delete: operations["deleteNode"];
  };
  "/v2/nodes/{id}": {
    /**
     * Get a node | Get a virtual folder
     * @description Gets information about a node.
     */
    get: operations["getNode2"];
    /**
     * Update a node | Move a node | Change the Versions Control setting for a Folder | Reserve/Unreserve a node | Collect/Uncollect a node
     * @description Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder<br>Reserves/Unreserves a node<br>Collects/Uncollects a node<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { "name":"New Name", "description":"New Description" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { "name":"New Name", "description":"New Description", "metadata_token":"f0c0701a58c2cb03a955deb1ab2af306" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { "parent_id":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { "versions_control_advanced":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { "versions_control_advanced":true, "apply_to":2 }</code><br><br>Reserve a document<br><br><code>body : { "reserved_user_id":1000 }</code><br><br>Unreserve a document<br><br><code>body : { "reserved_user_id":"null" }</code><br><br>Collect a node to a Collection with ID 5678<br><br><code>body : { "collection_id":5678 }</code><br><br>Uncollect a node from the Collection with ID 5678<br><br><code>body : { "collection_id":5678, "operation":"remove" }</code>
     */
    put: operations["updateNode2"];
    /**
     * Delete a node
     * @description Deletes the node.
     */
    delete: operations["deleteNode2"];
  };
  "/v1/nodes/{id}/actions": {
    /**
     * Get actions
     * @description Gets available actions on the node.
     */
    get: operations["getActions"];
  };
  "/v1/nodes/{id}/addablenodetypes": {
    /**
     * Get info on addable node types
     * @description Gets info on the types of child nodes which can be added to this node, if the node is a container (ie. a Folder). The info will be returned as a set of (relative) REST API links which can be used to retrieve forms detailing how to create the desired node within the node container.
     */
    get: operations["getAddableTypesInfo"];
  };
  "/v1/nodes/{id}/ancestors": {
    /**
     * Get ancestors
     * @description Gets the ancestors of the node.
     */
    get: operations["getAncestors"];
  };
  "/v1/nodes/{id}/audit": {
    /**
     * Get audit
     * @description Gets node audit info.
     */
    get: operations["getAudit"];
  };
  "/v2/nodes/{id}/audit": {
    /**
     * Get audit
     * @description Gets node audit info.
     */
    get: operations["getAudit2"];
  };
  "/v1/nodes/{id}/columns": {
    /**
     * Get columns
     * @description Gets the columns for the node.
     */
    get: operations["getColumns"];
  };
  "/v2/nodes/{id}/collection": {
    /**
     * Update collection
     * @description Add or Remove items from a collection.
     */
    put: operations["updateCollection"];
  };
  "/v1/nodes/{id}/content": {
    /**
     * Get content
     * @description Downloads the content (latest published version) on the node.
     */
    get: operations["getContent"];
  };
  "/v1/nodes/{id}/content/{filename}": {
    /**
     * Get content with a specified filename
     * @description Downloads the content (latest published version) for the node.
     */
    get: operations["getContent2"];
  };
  "/v2/nodes/{id}/content": {
    /**
     * Get content
     * @description Downloads the content (latest published version) on the node.
     */
    get: operations["getContent3"];
  };
  "/v2/nodes/{id}/content/{filename}": {
    /**
     * Get content with a specified filename
     * @description Downloads the content (latest published version) for the node.
     */
    get: operations["getContent4"];
  };
  "/v2/nodes/{id}/doctemplates": {
    /**
     * List the templates
     * @description Fetches the list of templates to create an item/instance in the specified folder.
     */
    get: operations["getDocTemplates"];
  };
  "/v1/nodes/{id}/facets": {
    /**
     * Get facets
     * @description Gets facets for the node.
     */
    get: operations["getFacetss"];
  };
  "/v1/nodes/{id}/nodes": {
    /**
     * Get subnodes
     * @description Browses the node, returning info on its child nodes.
     */
    get: operations["getSubnodes"];
  };
  "/v2/nodes/{id}/nodes": {
    /**
     * Get subnodes
     * @description Browses the node, returning info on its child nodes.
     */
    get: operations["getSubnodes2"];
  };
  "/v2/nodes/{id}/nodes/all": {
    /**
     * Get all subnodes
     * @description Returns information on all the children of the node*.<br><br> * Only Compound Documents are currently supported
     */
    get: operations["getAllSubnodes"];
  };
  "/v2/nodes/{id}/order": {
    /**
     * Reorganize nodes
     * @description Reorganizes the children of the node*.<br><br> * Only Compound Documents are currently supported
     */
    put: operations["reorganizeNodes"];
  };
  "/v2/nodes/{id}/properties": {
    /**
     * Get node properties
     * @description Gets basic information about the node.
     */
    get: operations["getNodeProperties"];
  };
  "/v2/nodes/{id}/releases": {
    /**
     * List releases and revisions
     * @description List all releases and revisions of the node.
     */
    get: operations["listReleases"];
    /**
     * Create release
     * @description Creates a release for the node.
     */
    post: operations["CreateRelease"];
  };
  "/v2/nodes/{id}/revisions": {
    /**
     * Create revision
     * @description Creates a revision for the node.
     */
    post: operations["CreateRevision"];
  };
  "/v2/nodes/{id}/systemattributes": {
    /**
     * Update System Attributes
     * @description Update System Attributes of a given node
     */
    put: operations["updatesystemattributes"];
  };
  "/v1/nodes/{id}/thumbnails": {
    /**
     * Get thumbnail info
     * @description Gets thumbnails for the node.
     */
    get: operations["thumbnailInfo"];
  };
  "/v1/nodes/{id}/thumbnails/{size}": {
    /**
     * Get thumbnail info according to size
     * @description Gets thumbnails in the specified size for the node.
     */
    get: operations["thumbnailInfoBySize"];
  };
  "/v1/nodes/{id}/thumbnails/{size}/content": {
    /**
     * Get thumbnail content according to size
     * @description Gets thumbnail content for the node.
     */
    get: operations["thumbnailContentBySize"];
  };
  "/v2/nodes/actions": {
    /**
     * Get actions
     * @description Gets the actions for the specified node IDs (up to 100 items) that the current user is able to perform. To get more than 100 items, use the POST api/v2/nodes/actions call below.
     */
    get: operations["getNodeActions"];
    /**
     * Get actions
     * @description Gets the actions for the specified node IDs (unlimited items) that the current user is able to perform. The parameters can be packaged into a single body parameter. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> at the top for details.<br><br>Get the actions for delete and copy for the nodes with IDs 5348 and 5569<br><code>body : { "ids":[5348,5569], "actions":["delete","copy"] }
     */
    post: operations["getNodeActions2"];
  };
  "/v2/nodes/{id}/unpack": {
    /**
     * Unpack transport package
     * @description Unpacks a transport package.
     */
    post: operations["UnpackTransportPackage"];
  };
  "/v2/nodes/{id}/deploy": {
    /**
     * Deploy workbench
     * @description Deploys a workbench.  If there are missing dependencies, the workbench cannot be deployed.
     */
    post: operations["DeployWorkbench"];
  };
  "/v2/nodes/{id}/view/html": {
    /**
     * View the content of a node as HTML.
     * @description View the HTML rendering of a node.
     */
    get: operations["viewHtmlNodes"];
  };
  "/v2/notifications/interests/nodes/{id}": {
    /**
     * Get the notification interests on a node
     * @description Get the notification interest settings for a particular node.
     */
    get: operations["notification_interests_node"];
    /**
     * Set the notification interests on a node
     * @description Set the notification interest settings for a particular node. Any interests not specified will have their report value set to 0.
     */
    put: operations["set_notification_interests_node"];
  };
  "/v2/nodes/{id}/permissions": {
    /**
     * Get all node permissions
     * @description Gets all of the permissions on the node (Default Access and any Assigned Access). The results can be paginated if the request specifies parameters 'page' and 'limit' (e.g. ?page=2&limit=5).
     */
    get: operations["getNodePermissions"];
  };
  "/v2/nodes/{id}/permissions/owner": {
    /**
     * Get owner permissions
     * @description Get owner permissions
     */
    get: operations["getNodePermissionOwner"];
    /**
     * Update or Restore the owner permissions
     * @description Update or Restore the owner permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Restore permissions for the user 15234, with 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"],"right_id":15234}</code><br><br>Change the owner to the user 15234 and set their permissions to none (NOTE: this is not the same as removing owner permissions):<br><code>body = {"permissions":[],"right_id":15234}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
     */
    put: operations["updateNodePermissionOwner"];
  };
  "/v2/nodes/{id}/permissions/group": {
    /**
     * Get owner group permissions
     * @description Get owner group permissions
     */
    get: operations["getNodePermissionGroup"];
    /**
     * Update or Restore the owner group permissions
     * @description Update or Restore the owner group permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Restore permissions for the owner group 12111, with 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"],"right_id":12111}</code><br><br>Change the owner group to 12111 and set its permissions to none (NOTE: this is not the same as removing owner group permissions):<br><code>body = {"permissions":[],"right_id":12111}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
     */
    put: operations["updateNodePermissionGroup"];
  };
  "/v2/nodes/{id}/permissions/public": {
    /**
     * Get public access permissions
     * @description Get public access permissions
     */
    get: operations["getNodePermissionPublic"];
    /**
     * Update the public access permissions
     * @description Update the public access permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Set public access permissions to none (NOTE: this is not the same as removing public access permissions):<br><code>body = {"permissions":[]}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
     */
    put: operations["updateNodePermissionPublic"];
  };
  "/v2/nodes/{id}/permissions/custom": {
    /**
     * Update an Assigned Access permission for the specified user/group
     * @description Update an Assigned Access permission for the specified user/group.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions for the user/group to 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Update permissions for the user/group to no permissions (NOTE: this is not the same as deleting the user/group's permissions from the Assigned Access):<br><code>body = {"permissions":[]}</code><br><br>Update the user/group's permissions on a Folder to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update the user/group's permissions on a Folder to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
     */
    put: operations["updateNodePermissionCustom"];
    /**
     * Add an Assigned Access permission
     * @description Add an Assigned Access permission on the node.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"],"right_id":15234}</code><br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"right_id":15234,"apply_to":0}</code><br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"right_id":15234,"apply_to":2,"include_sub_types":[204,207]}</code>
     */
    post: operations["addNodePermissions"];
  };
  "/v2/nodes/{id}/permissions/effective/{right_id}": {
    /**
     * Get the effective permissions for the specified user/group
     * @description Get the effective permissions for the specified user/group on the node.<br><br>The effective permissions are an aggregation of the user's permissions on the node, as well as the permissions of any of the user's groups that have permissions on the node.
     */
    get: operations["getNodePermissionEffective"];
  };
  "/v2/perspectives/{perspective_id}/personalization": {
    /**
     * Personalize particular perspective for specific user
     * @description Personalize particular perspective for specific user
     */
    post: operations["postPerspectivesPersonalization"];
  };
  "/v1/ping": {
    /**
     * Get CS and REST API Info
     * @description Provides basic information about Content Server and the REST API.  This call does not require authentication.
     */
    get: operations["rest_api"];
  };
  "/v2/processes/{process_id}/subprocesses/{subprocess_id}/tasks/{task_id}": {
    /**
     * Sends on a process
     * @description Sends on a process based on the provided action / custom_action. The provided comment is added to the current task.
     */
    put: operations["sendProcess"];
  };
  "/v2/processes/{process_id}/subprocesses/{subprocess_id}/activities": {
    /**
     * Reads workflow activities
     * @description Reads all available workflow activities based on the provided ids
     */
    get: operations["WorkflowActivities"];
  };
  "/v2/processes/{map_id}/definition": {
    /**
     * Loads the workflow map definition
     * @description Loads the workflow map definition
     */
    get: operations["WorkflowDefinition"];
  };
  "/v2/processes": {
    /**
     * Initiates a workflow
     * @description Initiates a workflow.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will provide Json Input format:<br><br><code>{"definition":{"workflow_id":30568,"role_info": {"Role1": 1000, "Role2": 1000}}}</code><br><br>
     */
    post: operations["initiate"];
  };
  "/v2/processes/{process_id}/status": {
    /**
     * Changes the process status
     * @description Changes the process status
     */
    put: operations["changeStatus"];
  };
  "/v2/processes/{process_id}": {
    /**
     * Deletes the process
     * @description Deletes the process
     */
    delete: operations["deleteProcess"];
  };
  "/v2/workflows/status/processes/{process_id}": {
    /**
     * Task List for a Workflow Instance
     * @description Gets the Tasks list of workflow categorized by Completed, In Progress and Next
     */
    get: operations["getProcesses"];
  };
  "/v2/workflows/status": {
    /**
     * Workflows by status
     * @description Get workflows based on WF status, Kind, sort order, and completion dates
     */
    get: operations["getWorkflowStatus"];
  };
  "/v2/reservemanagement/nodes/{id}": {
    /**
     * Get the reservation request status
     * @description Get the information of the given node including currently reserved user, when the node was reserved and how many users has requested for reservation
     */
    get: operations["GetRequestStatus"];
    /**
     * Request for the reservation
     * @description Add the current user into the reservation request queue of the given node
     */
    post: operations["AddRequestReservation"];
    /**
     * Cancel the request for reservation
     * @description Remove the current user from the reservation request queue of the given node
     */
    delete: operations["DeleteRequestReservation"];
  };
  "/v1/regions": {
    /**
     * Get Current Regions Info
     * @description Returns a list of regions.
     */
    get: operations["GetRegionsInfo"];
  };
  "/v1/slices": {
    /**
     * Get Current Slices Info
     * @description Returns a list of slices.
     */
    get: operations["GetSlicessInfo"];
  };
  "/v2/search": {
    /**
     * Returns search results
     * @deprecated
     * @description Returns search results. This call is fully supported and functional, however it is recommended to use the POST method as it supports larger search queries and it is more secure.
     */
    get: operations["none"];
    /**
     * Returns search results
     * @description Returns search results.
     */
    post: operations["GetRegionsInfo2"];
  };
  "/v2/search/members/info": {
    /**
     * Get information on available search Slices, Personal Search Forms, Recent Search Forms,  Search Bar Full Text settings, and System Search Forms for the user
     * @description Returns lists of Slices, Personal Search Forms, Recent Search Forms, Search Bar Full Text settings, and System Search Forms
     */
    get: operations["GetSearchInfo"];
  };
  "/v2/search/template/settings/display": {
    /**
     * Gets display options from the user's default template
     * @description Gets display options from the user's default template.
     */
    get: operations["GetDisplayInfo"];
    /**
     * Sets display options for the user's default template
     * @description Sets the display options for the user's default template
     */
    put: operations["SetDisplayInfo"];
  };
  "/v2/search/template/{id}/settings/display": {
    /**
     * Gets the display options for the specified template ID
     * @description Gets the display options for the specified template ID.
     */
    get: operations["GetDisplayInfo2"];
    /**
     * Sets the display options for the specified template ID
     * @description Sets the display options for the specified template ID
     */
    put: operations["SetDisplayInfo2"];
  };
  "/v2/search/session/{id}/settings/display": {
    /**
     * Gets display options from the specified search cache ID
     * @description Gets display options from the specified search cache ID.
     */
    get: operations["GetDisplayInfo3"];
    /**
     * Sets the display options for the specified cache ID
     * @description Sets the display options for the specified cache ID
     */
    put: operations["SetDisplayInfo3"];
  };
  "/v2/server/messages": {
    /**
     * Server Messages
     * @description Returns the System Messages that are currently active.
     */
    get: operations["servermessagestab"];
  };
  "/v2/server/privileges/object": {
    /**
     * Object Privileges
     * @description Returns the Object Privileges that are available in the system. User must be a member of the Web Admin privilege in order to view this information.
     */
    get: operations["serverobjectprivileges"];
  };
  "/v2/server/privileges/usage": {
    /**
     * Usage Privileges
     * @description Returns the Usage Privileges that are available in the system. User must be a member of the Web Admin privilege in order to view this information.
     */
    get: operations["serverusageprivileges"];
  };
  "/v2/server/privileges": {
    /**
     * Update Object/Usage Privileges
     * @description Makes the supplied privilege restricted or unrestricted. User must be a member of the Web Admin privilege in order to perform this operation.
     */
    put: operations["serverupdageprivileges"];
  };
  "/v1/serverinfo": {
    /**
     * Server Information
     * @description Returns information related to Content Server and its configuration.
     */
    get: operations["serverinfotab"];
  };
  "/v1/tabs/nodes/categories": {
    /**
     * Categories tab
     * @description Gets the necessary data to render the contents of the Categories tab.
     */
    get: operations["categoriestab"];
  };
  "/v1/tklattribute/validvalues": {
    /**
     * TKL Attribute Valid Values
     * @description List of Valid Values for a TKL Attribute based on the dependent attribute values if provided
     */
    post: operations["ValidValues"];
  };
  "/v2/tklattribute/defaultvalues": {
    /**
     * Default Values of child TKL attributes
     * @description List of all child attribute values if the length of valid values is 1, depending on the parent attribute value
     */
    post: operations["DefaultValues"];
  };
  "/v1/validation/nodes": {
    /**
     * Check a list of names
     * @description For a list of names and a given parent node, check to see if there are name collisions (subject to database collation) between the list of names and the nodes in the parent node.
     */
    post: operations["CheckNames"];
  };
  "/v1/validation/nodes/categories/enforcement": {
    /**
     * Check for enforced required attributes
     * @description Check if the given node IDs enforce required attributes.
     */
    post: operations["CheckCategories"];
  };
  "/v1/validation/nodes/names": {
    /**
     * Check for name collisions
     * @description Check for name collisions in the specified node (container).  NOTE: The output of this call will contain ONLY the items with name collisions.  If there are no name collisions, the output will be empty.
     */
    post: operations["CheckNames2"];
  };
  "/v1/nodes/{id}/versions": {
    /**
     * List versions
     * @description Gets info on the versions on the node.
     */
    get: operations["listVersions"];
    /**
     * Add version
     * @description Adds a new version on the node.
     */
    post: operations["addVersion"];
  };
  "/v2/nodes/{id}/versions": {
    /**
     * List versions
     * @description Gets info on the versions on the node. <br><br>NOTE: if results.data.versions is an empty object (ie. results.data.version = []), the node has no versions.
     */
    get: operations["listVersions2"];
    /**
     * Add version
     * @description Adds a new version on the node. Must use `file` _or_ `upload_key` arguments.
     */
    post: operations["addVersion2"];
    /**
     * Purge versions
     * @description Purges the versions on the node. If the node is using advanced versioning, then it will only purge minor versions.
     */
    delete: operations["purgeVersion"];
  };
  "/v1/nodes/{id}/versions/{version_number}": {
    /**
     * Get specified version
     * @description Gets info on the specified version on the node.
     */
    get: operations["getVersion"];
    /**
     * Update version
     * @description Updates the specified version on the node.
     */
    put: operations["updateVersion"];
    /**
     * Delete version
     * @description Deletes the specified version on the node.
     */
    delete: operations["deleteVersion"];
  };
  "/v2/nodes/{id}/versions/{version_number}": {
    /**
     * Get specified version
     * @description Gets info on the versions on the node. <br><br>NOTE: if results.data.versions is an empty object (ie. results.data.version = []), the node has no versions.
     */
    get: operations["getVersion2"];
    /**
     * Update version
     * @description Updates the specified version on the node.
     */
    put: operations["updateVersion2"];
    /**
     * Delete version
     * @description Deletes the specified version on the node.
     */
    delete: operations["deleteVersion2"];
  };
  "/v1/nodes/{id}/versions/latest": {
    /**
     * Get latest version
     * @description Gets info on the latest version on the node.
     */
    get: operations["getLatestVersion"];
  };
  "/v1/nodes/{id}/versions/{version_number}/actions": {
    /**
     * Get actions for a version
     * @description Gets the available actions on the specified version on the node.
     */
    get: operations["getVersionActions"];
  };
  "/v1/nodes/{id}/versions/{version_number}/categories": {
    /**
     * Get categories for specified version
     * @description Gets info on the categories on the specified version on the node.  If the specified version does not have categories, the return data structure(s) will be empty.
     */
    get: operations["getVersionCategories"];
  };
  "/v2/nodes/{id}/versions/{version_number}/categories": {
    /**
     * Get categories for specified version
     * @description Gets info on the categories on the specified version on the node. Use the metadata flag to get the category attribute ordering.<br>If the specified version does not have categories, the 'results' list will be empty. <br>If there are multiple categories on that version, they will be returned under the 'results' list in the order they were applied to that version.
     */
    get: operations["getVersionCategories2"];
  };
  "/v1/nodes/{id}/versions/{version_number}/content": {
    /**
     * Download version
     * @description Downloads contents of the specified version on the node.  The name of the downloaded file will be that of the version's file name.
     */
    get: operations["DownloadVersion"];
  };
  "/v1/nodes/{id}/versions/{version_number}/content/{document_name}": {
    /**
     * Download version in specified name
     * @description Downloads contents of the specified version on the node.  The name of the downloaded file will be set to the value in {document_name}.
     */
    get: operations["DownloadNamedVersion"];
  };
  "/v2/nodes/{id}/versions/{version_number}/content": {
    /**
     * Download version
     * @description Downloads contents of the specified version on the node. The name of the downloaded file will be that of the version's file name.
     */
    get: operations["DownloadVersion2"];
  };
  "/v2/nodes/{id}/versions/{version_number}/content/{document_name}": {
    /**
     * Download version in specified name
     * @description Downloads contents of the specified version on the node. The name of the downloaded file will be set to the value in {document_name}.
     */
    get: operations["DownloadNamedVersion2"];
  };
  "/v2/nodes/{id}/versions/renditions": {
    /**
     * List all renditions for all available versions
     * @description Lists all renditions for all available versions indexed by <strong>&lt;version_number&gt;</strong>.  <br><br>NOTE: if results.data[ <strong>&lt;version_number&gt;</strong> ] is an empty list, the version has no renditions.
     */
    get: operations["listRenditions"];
    /**
     * Add rendition
     * @description Adds a new rendition to the current version of a node.
     */
    post: operations["addRendition"];
  };
  "/v2/nodes/{id}/versions/{version_number}/renditions": {
    /**
     * List/Get rendition(s) for a specified version
     * @description List/Get rendition(s) for a specified version depending on specified parameters.<ul><li>"rendition_type" not specified:<br>List available renditions for the specified version. If no renditions are available, results.data will be an empty list.</li><li>"rendition_type" specified:<br>Get the specified rendition of the version. If no such rendition exists, will return an error. results.data will be an object with the rendition information.</li></ul>
     */
    get: operations["listRenditionsSpecific"];
    /**
     * Replace rendition
     * @description Replaces the specified rendition of a version on the node
     */
    put: operations["replaceRendition"];
    /**
     * Delete rendition
     * @description Deletes the specified rendition of a version on the node.
     */
    delete: operations["deleteRendition"];
  };
  "/v2/nodes/{id}/versions/{version_number}/renditions/content": {
    /**
     * Download rendition
     * @description Download contents of the specified rendition of the specified version of the node. The name of the downloaded file will be that of the node or the node with the rendition type and the extension of the rendition if they are of different types.
     */
    get: operations["DownloadRendition"];
  };
  "/v1/nodes/{id}/versions/{version_number}/thumbnails": {
    /**
     * Get info on available version thumbnails
     * @description Gets info on the version thumbnails on the node (available in Content Server 10.5).
     */
    get: operations["VersionThumbnails"];
  };
  "/v1/nodes/{id}/versions/{version_number}/thumbnails/{thumbnail_type}": {
    /**
     * Get info on the specified size of a version thumbnail
     * @description Gets info on the specified size of version thumbnail on the node (available in Content Server 10.5).
     */
    get: operations["VersionThumbnails2"];
  };
  "/v1/nodes/{id}/versions/{version_number}/thumbnails/{thumbnail_type}/content": {
    /**
     * Download version thumbnail in specified size
     * @description Downloads the specified size of version thumbnail on the node (available in Content Server 10.5).
     */
    get: operations["DownloadVersionThumbnail"];
  };
  "/v2/nodes/{id}/versions/{version_number}/promote": {
    /**
     * Promote version
     * @description Promotes a version to the next Major version on the node.
     */
    post: operations["promoteVersion"];
  };
  "/v2/nodes/{id}/versions/{version_number}/lock": {
    /**
     * Lock version
     * @description Locks the specified version on the node, preventing it from being modified or deleted.<br><br>NOTE:This is not the same as <b>reserving</b> a node, which prevents the document and its versions from being modified. Locking a version only prevents that version from being modified - the rest of the node can still be modified by other users (ie. a user can lock a version, while another user can change the node's name or description at the same time).
     */
    post: operations["lockVersion"];
  };
  "/v2/nodes/{id}/versions/{version_number}/unlock": {
    /**
     * Unlock version
     * @description Unlocks the specified version on the node.<br><br>NOTE: This is not the same as <b>unreserving</b> a node. Unlocking a version is specific to that version alone.
     */
    post: operations["unlockVersion"];
  };
  "/v2/nodes/{id}/versions/{version_number}/view/html": {
    /**
     * View the content of a version as HTML.
     * @description View the HTML rendering of a version.
     */
    get: operations["viewHtmlVersions"];
  };
  "/v1/volumes": {
    /**
     * Get available volumes
     * @description Gets info on available system volumes.
     */
    get: operations["getVolumes"];
  };
  "/v2/volumes": {
    /**
     * Get available volumes
     * @description Gets info on available system volumes.
     */
    get: operations["getVolumes2"];
  };
  "/v1/volumes/{type}": {
    /**
     * Get volume info
     * @description Gets info about the specified volume.
     */
    get: operations["getVolume"];
  };
  "/v2/volumes/{type}": {
    /**
     * Get volume info
     * @description Gets info about the specified volume.
     */
    get: operations["getVolume2"];
  };
  "/v1/volumes/{type}/nodes": {
    /**
     * Get subnodes of the specified volume
     * @description Browses the volume, returning info on its child nodes.
     */
    get: operations["browseVolume"];
  };
  "/v2/volumes/{type}/nodes": {
    /**
     * Get subnodes of the specified volume
     * @description Browses the volume, returning info on its child nodes.
     */
    get: operations["browseVolume2"];
  };
  "/v2/volumes/recyclebin/nodes": {
    /**
     * Get subnodes of the Recycle Bin
     * @description Browses the Recycle Bin, returning info on its contents.
     */
    get: operations["browseRecycleBin"];
  };
  "/v2/volumes/recyclebin/nodes/purge": {
    /**
     * Purge nodes from the Recycle Bin
     * @description Purge nodes from the Recycle Bin<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following example assumes that there are two nodes in the Recycle Bin with the IDs 3589 and 3590, respectively, that the user wants to purge. The ID 7321 does not belong to any node in the Recycle Bin.<br><br>Purge the nodes with the given IDs:<br><br><code>{"ids":[3589,3590,7321]}</code><br><br>The response will have a results structure (see the schema diagram below) that have two sub-structures 'success' and 'failure' which will list the IDs that were successfully purged, and the IDs that had failed to be purged, as well as error messages.<br><br>results.success.ids : A List of the IDs which were successfully purged (ex. [ 3589, 3590 ].<br><br>results.failures.ids : A List of the IDs which were not successfully purged. (ex. [ 7321 ])<br><br>results.failures.errors.7321.message : The error message (ex. Could not get a node for 7321)<br><br>NOTE: If the response code is 200, all of the ids were successfully purged and there is no need to check the results. If the response code is 400 and there are results, you will need to check the above sub-structures to see which nodes were purged, and which ones were not.
     */
    post: operations["purgeRecycleBin"];
  };
  "/v2/volumes/recyclebin/nodes/restore": {
    /**
     * Restore nodes that are in the Recycle Bin back to their original location
     * @description Restore nodes that are in the Recycle Bin back to their original location<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following example assumes that there are two nodes in the Recycle Bin with the IDs 3589 and 3590, respectively, that the user wants to restore. The ID 7321 does not belong to any node in the Recycle Bin.<br><br>Restore the nodes with the given IDs:<br><br><code>{"ids":[3589,3590,7321]}</code><br><br>The response will have a results structure (see the schema diagram below) that have two sub-structures 'success' and 'failure' which will list the IDs that were successfully restored, and the IDs that had failed to be restored, as well as error messages.<br><br>results.success.ids : A List of the IDs which were successfully restored (ex. [ 3589, 3590 ].<br><br>results.failures.ids : A List of the IDs which were not successfully restored. (ex. [ 7321 ])<br><br>results.failures.errors.7321.message : The error message (ex. Could not get a node for 7321)<br><br>NOTE: If the response code is 200, all of the ids were successfully restored and there is no need to check the results. If the response code is 400 and there are results, you will need to check the above sub-structures to see which nodes were restored, and which ones were not.
     */
    post: operations["restoreRecycleBin"];
  };
  "/v1/nodes/{id}/destination": {
    /**
     * Get destination data for a WebReport
     * @description Returns the destination data from a WebReport node. (*) against a field name denotes that the field supports tag replacement.
     */
    get: operations["getWebReportDestination"];
  };
  "/v1/nodes/{id}/output": {
    /**
     * Get output for a WebReport
     * @description Returns the output from the execution of a WebReport node. This API only supports the 'browser' and 'desktop' WebReport destination types. Any content-type is supported for the response. The content-type of the response is user-defined according to the 'Export Mime Type' specified for the WebReport node destination. All dynamic parameters and those defined by the output of the 'api/v1/nodes/{id}/parameters' or 'api/v1/webreports/{nickname}/parameters' APIs are supported when passed in as part of the query string.
     */
    get: operations["getWebReportOutput"];
    /**
     * Run a WebReport that has a destination type other than 'browser' or 'desktop'
     * @description Runs a WebReport. This API supports all destination types other than 'browser' and 'desktop' WebReport destination types, for which the GET method should be used instead.
     */
    post: operations["postWebReportOutput"];
  };
  "/v1/webreports/{nickname}": {
    /**
     * Get output for a WebReport
     * @description Returns the output from the execution of a WebReport node. This API only supports the 'browser' and 'desktop' WebReport destination types. Any content-type is supported for the response. The content-type of the response is user-defined according to the 'Export Mime Type' specified for the WebReport node destination. All dynamic parameters and those defined by the output of the 'api/v1/nodes/{id}/parameters' or 'api/v1/webreports/{nickname}/parameters' APIs are supported when passed in as part of the query string.
     */
    get: operations["getWebReportOutput2"];
    /**
     * Run a WebReport that has a destination type other than 'browser' or 'desktop'
     * @description Runs a WebReport. This API supports all destination types other than 'browser' and 'desktop' WebReport destination types, for which the GET method should be used instead.
     */
    post: operations["postWebReportOutput2"];
  };
  "/v1/webreports/{nickname}/parameters": {
    /**
     * Get parameters info
     * @description Returns the definition of all parameters defined for a WebReport node.
     */
    get: operations["getParameters2"];
  };
  "/v2/import/settings/admin": {
    /**
     * Import administration settings
     * @description Imports administration settings from an XML file.
     */
    post: operations["XmlIngestion"];
  };
  "/v2/nodes/{id}/followups": {
    /**
     * Get all followups for a given node.
     * @description Get all followups for a given node.
     */
    get: operations["getFollowUps"];
  };
  "/v2/nodes/{id}/followups/{followup_id}": {
    /**
     * Get followup details for node and related followup.
     * @description This will give followups for a given node and followup id.
     */
    get: operations["getFollowUpInfo"];
    /**
     * Changes the status of Reminder.
     * @description This will change status of reminder.
     */
    put: operations["UpdateReminderStatus"];
  };
  "/v1/forms/nodes/followup/getClientTypes": {
    /**
     * Get info on followup client types.
     * @description This will give followup client types information.
     */
    get: operations["getFollowupClientTypes"];
  };
  "/v1/forms/nodes/{nodeid}/reminder/view": {
    /**
     * Alpaca form for viewing a reminder details on a node.
     * @description Gets the Alpaca form for viewing a reminder details on a node
     */
    get: operations["getReminderInfo"];
  };
  "/v1/forms/nodes/reminder/create": {
    /**
     * Alpaca form to create a reminder for a node.
     * @description Gets the Alpaca form to create a reminder for a node.
     */
    get: operations["getReminderCreateForm"];
  };
  "/v2/resubmission/{id}/addreminder": {
    /**
     * Create a Reminder.
     * @description This will create a reminder.
     */
    post: operations["AddReminder"];
  };
  "/v2/nodes/{id}/updatereminder": {
    /**
     * Update reminder details.
     * @description This will update reminder information.
     */
    put: operations["UpdateReminder"];
  };
  "/v2/restructure": {
    /**
     * Restructures a list of items from source to destination
     * @description Moves nodes to a new destination effectively by making use of DA framework <br>This includes permissions updates and category processing as per configuration<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. </b><br><br>Restructure list of nodes from source to destination:<br><br><code>body : { "userstobenotified":"List of userIds to be notified for restructure", "AttrSourceType":"Category Inheritance","parent_id":"destination node for restructure","startdate":"Date and time for this restructure operation","subject":"Notification subject for this restructure operation","message":"Notification message for this restructure operation","nodes":"List of source data ids for the restructure operation" }</code><br>
     */
    put: operations["Restructure"];
  };
  "/v2/signaturerequests": {
    /**
     * Get signature request
     * @description Get signature request details
     */
    get: operations["Get"];
    /**
     * Create signature request
     * @description Create the signature request.<br><br> To create the signature request we need to pass doc_id , signer information and provider_id .<br><br>Examples <ul><li>we need to pass signer information in below format.</li><br><code>signer:{"full_name":"name","email_id":"test@opentext.com"} </code>  <br>  <br> <li> To create the signature request use below format</li> <br> <code>{"doc_id":1234,"signer":{"full_name":"name","email_id":"test@opentext.com"},"provider_id":"docusign"}</code>
     */
    post: operations["Create"];
  };
  "/v2/signaturerequests/{request_id}": {
    /**
     * Get signature request details by request id
     * @description Get signature request details by request id
     */
    get: operations["GetById"];
  };
  "/v2/signaturerequests/{request_id}/reminder/": {
    /**
     * Send reminder notification to signers by request id
     * @description Send reminder notification to signers by request id
     */
    post: operations["SendReminders"];
  };
  "/v2/signaturerequests/{request_id}/cancel": {
    /**
     * Cancel the signature request by request id
     * @description Cancel the signature request by request id
     */
    post: operations["Cancel"];
  };
  "/v2/syndication/{id}": {
    /**
     * Get syndication information of a given node
     * @description Get syndication information of a given node.
     */
    get: operations["syndication"];
  };
}

export type webhooks = Record<string, any>;

export interface components {
  schemas: {
    /** @description Forces the server to always return a HTTP Response of '200 OK'. The data returned from the call will have an additional integer feature named 'statusCode', which will contain the actual status code (the 'statusCode' feature will be added regardless of whether the REST API call was successful or not). */
    suppress_response_codes: string;
    apiinfo: {
      /**
       * Format: string
       * @description If the DELETE method is available, information for this REST API call will be displayed.
       */
      DELETE?: string;
      /**
       * Format: string
       * @description If the GET method is available, information for this REST API call will be displayed.
       */
      GET?: string;
      /**
       * Format: string
       * @description If the POST method is available, information for this REST API call will be displayed.
       */
      POST?: string;
      /**
       * Format: string
       * @description If the PUT method is available, information for this REST API call will be displayed.
       */
      PUT?: string;
    };
    auth_UserInfo: {
      /** @description User Data */
      data?: components["schemas"]["auth_Data"][];
    };
    auth_Data: {
      /** @description The user's birthday */
      birth_date?: string;
      /** @description The user's business e-mail address */
      business_email?: string;
      /** @description The user's business fax number */
      business_fax?: string;
      /** @description The user's business phone number */
      business_phone?: string;
      /** @description The user's personal cellphone number */
      cell_phone?: string;
      /** @description TRUE if the user has been deleted, FALSE otherwise */
      deleted?: boolean;
      /** @description The user's preferred language */
      display_language?: string;
      /** @description The user's displayed name */
      display_name?: string;
      /** @description The user's first name */
      first_name?: string;
      /** @description The user's gender. null = <gender not set>, 0 = male, 1 = female. Any integers greater than 1 refer to additional custom genders, which can be configured in Content Server under 'Configure Gender Settings'. */
      gender?: number;
      /** @description The ID of the user's base group */
      group_id?: number;
      /** @description The user's first home address */
      home_address_1?: string;
      /** @description The user's second home address */
      home_address_2?: string;
      /** @description The user's home fax number */
      home_fax?: string;
      /** @description The user's home phone number */
      home_phone?: string;
      /** @description A unique identifier for the user */
      id?: number;
      /** @description The user's initials */
      initials?: string;
      /** @description The user's last name */
      last_name?: string;
      /** @description The user's middle name */
      middle_name?: string;
      /** @description The user's log-in name */
      name?: string;
      /** @description The full address of the user's office location */
      office_location?: string;
      /** @description The user's pager number */
      pager?: string;
      /** @description The user's home email address */
      personal_email?: string;
      /** @description The user's hobbies */
      personal_interests?: string;
      /** @description The user's first favorite link */
      personal_url_1?: string;
      /** @description The user's second favorite link */
      personal_url_2?: string;
      /** @description The user's third favorite link */
      personal_url_3?: string;
      /** @description The user's homepage address */
      personal_website?: string;
      /** @description The user's photo ID */
      photo_id?: string;
      /** @description REST API URL to get the member's profile photo */
      photo_url?: string;
      /** @description TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_content_manager?: boolean;
      /** @description TRUE if the user has eDiscovery privileges, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_grant_discovery?: boolean;
      /** @description TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_login?: boolean;
      /** @description TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_groups?: boolean;
      /** @description TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_users?: boolean;
      /** @description TRUE means the user can access to any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_public_access?: boolean;
      /** @description TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_system_admin_rights?: boolean;
      /** @description TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_user_admin_rights?: boolean;
      /** @description An offset of GMT */
      time_zone?: number;
      /** @description The user's title */
      title?: string;
      /** @description The type of user or user-related entity */
      type?: number;
      /** @description The type name of user or user-related entity */
      type_name?: string;
    };
    auth_AuthenticationInfo: {
      /** @description The valid authentication ticket */
      ticket?: string;
    };
    auth_AuthenticationDelete: Record<string, any>;
    bulkactions: {
      data?: components["schemas"]["bulkactions_ActionData"];
      definitions?: components["schemas"]["bulkactions_Definitions"];
      definitions_map?: components["schemas"]["bulkactions_DefinitionsMap"];
      /** @description The order in which actions should be displayed. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
    };
    bulkactions_ActionData: Record<string, any>;
    bulkactions_Definitions: Record<string, any>;
    bulkactions_DefinitionsMap: Record<string, any>;
    categories_V2CategoriesResponseSingle: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["categories_V2DataCategories"][];
    };
    categories_V2CategoriesResponse: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["categories_V2DataCategories"][];
    };
    categories_V2CategoriesApplyResponse: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["categories_V2DataCategoriesApplyResults"][];
    };
    categories_V2EmptyResponse: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["categories_V2EmptyResults"][];
    };
    categories_V2DataCategories: {
      data?: components["schemas"]["categories_V2Categories"][];
    };
    categories_V2Categories: {
      categories?: components["schemas"]["categories_V2EmptyResults"][];
    };
    categories_V2DataLinks: {
      data?: components["schemas"]["categories_V2Links"][];
    };
    categories_V2Links: {
      self?: components["schemas"]["categories_V2Link"][];
    };
    categories_V2Link: {
      body?: string;
      content_type?: string;
      href?: string;
      method?: string;
      name?: string;
    };
    categories_V2DataCategoriesApplyResults: {
      message?: string;
      processed?: number;
      skipped?: number;
    };
    categories_V2EmptyResults: Record<string, any>;
    categories_CategoriesInfo: {
      /** @description Category information */
      data?: components["schemas"]["categories_CategoriesInfoData"][];
      definitions?: components["schemas"]["categories_Definitions"];
      /** @description Default order of the fields defined in data */
      definitions_order?: string[];
      definitions_map?: components["schemas"]["categories_DefinitionsMap"];
    };
    categories_CategoriesInfoData: {
      /** @description Category ID */
      id?: number;
      /** @description Display name */
      name?: string;
    };
    categories_CategoryInfo: {
      /** @description Category information */
      data?: components["schemas"]["categories_CategoryInfoData"][];
      definitions?: components["schemas"]["categories_Definitions"];
      /** @description Default order of the fields defined in data */
      definitions_order?: string[];
      definitions_map?: components["schemas"]["categories_DefinitionsMap"];
    };
    categories_CategoryInfoData: {
      /** @description Attribute value */
      "{attribute_key}"?: string;
    };
    categories_ActionsCategoriesInfo: {
      data?: components["schemas"]["categories_ActionData"];
      definitions?: components["schemas"]["categories_Definitions"];
      definitions_map?: components["schemas"]["categories_DefinitionsMap"];
      /** @description The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
    };
    categories_AddCategoryResponse: Record<string, any>;
    categories_UpdateCategoryResponse: Record<string, any>;
    categories_ActionData: Record<string, any>;
    categories_Definitions: Record<string, any>;
    categories_DefinitionsMap: Record<string, any>;
    csapplications_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    csapplications_V2Results: {
      /** @description Content Server Applications Server Response */
      content?: string;
      /** @description ok is true or false */
      ok?: boolean;
    };
    csapplications_V2ResponseCSApplicationsPost: {
      links?: {
        data?: {
          self?: components["schemas"]["csapplications_V2Link"];
        };
      };
      results?: {
        data?: {
          properties?: components["schemas"]["csapplications_V2Results"];
        };
      };
    };
    doctemplates_DocumentTemplateInstanceInfo: {
      /**
       * Format: integer
       * @description The valid document template InstanceID
       */
      id: number;
      /**
       * Format: integer
       * @description The valid cacheID generated and used while instance creation
       */
      cacheId: number;
    };
    documentproperties_InsertablePropertiesRow: {
      /** @description The localized name of the insertable property. */
      name?: string;
      /** @description The name of the file property to write the value to. */
      property?: string;
      /** @description The value of the content server attribute the insertable property represents. */
      value?: string;
      /** @description The value with possible formatting or conversion applied. */
      value_formatted?: string;
    };
    draftprocesses_DraftProcess_V2EmptyResponse: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["draftprocesses_DraftProcess"][];
    };
    draftprocesses_DraftProcess_PutV2EmptyResponse: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["draftprocesses_DraftProcess_Put"][];
    };
    draftprocesses_DraftProcess: {
      /** @description The id of the created draft process */
      draftprocess_id: number;
      /** @description String composition of  workData.type_workData.subtype , example  1_1 */
      workflow_type?: string;
    };
    draftprocesses_DraftProcess_Put: {
      /** @description custom_message,If exist */
      custom_message: string;
      /** @description process_id */
      process_id: number;
    };
    draftprocesses_DraftProcess_Authentication: {
      /** @description Authentication Required */
      error: string;
    };
    draftprocesses_DraftProcess_NodeNotFound: {
      /** @description <ul><li>Could not Loadmap.</li><li>Workflow Map has no versions.</li><li>Error getting node from ID</li> <li>Could not retrieve specified version from map.</li></ul> */
      error: string;
    };
    export_Export: {
      /** @description Indicates report should include default values */
      includeDefaults?: boolean;
      /** @description Extension of report format */
      fileFormat?: string;
    };
    facets_FacetResponse: {
      /** @description Links */
      links?: components["schemas"]["facets_DataLinks"][];
      /** @description results */
      results?: components["schemas"]["facets_Results"][];
    };
    facets_DataLinks: {
      data?: components["schemas"]["facets_Links"][];
    };
    facets_Links: {
      /** @description Self link */
      self?: components["schemas"]["facets_Link"][];
    };
    facets_Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    facets_Results: {
      data?: components["schemas"]["facets_Data"][];
    };
    facets_Data: {
      facets?: components["schemas"]["facets_Facet"][];
      values?: components["schemas"]["facets_Values"][];
    };
    facets_Values: {
      available?: components["schemas"]["facets_Value"][];
      selected?: components["schemas"]["facets_Value"][];
    };
    facets_Facet: {
      /** @description TRUE if count information is available and should be displayed; FALSE otherwise */
      display_count?: boolean;
      /** @description The ID of the Facet */
      id?: number;
      /** @description The name of the Facet */
      name?: string;
      /** @description The number of available options to display */
      total_displayable?: number;
    };
    facets_Value: {
      /** @description The number of matched objects for the given option */
      count?: number;
      /** @description The name of the option */
      name?: string;
      /** @description The percentage of objects which contain this option */
      percentage?: number;
      /** @description The internal value of this option */
      value?: string;
    };
    forms_CategoriesCreateFormInfo: {
      data?: components["schemas"]["forms_CategoriesData"];
      options?: components["schemas"]["forms_CategoriesCreateOptions"];
      schema?: components["schemas"]["forms_CategoriesCreateSchema"];
    };
    forms_CategoriesUpdateFormInfo: {
      /** @description Category attributes and their values for the category applied to the node */
      data?: Record<string, any>;
      options?: components["schemas"]["forms_CategoriesUpdateOptions"];
      schema?: components["schemas"]["forms_CategoriesUpdateSchema"];
    };
    forms_CopyFormInfo: {
      /** @description The array containing the information on the object being copied. The first element contains node data, the elements following contain optional data */
      form?: components["schemas"]["forms_CopyInfo"][];
    };
    forms_CreateFormInfo: {
      /** @description The array containing the information on the object being created. The first element contains node data, the elements following contain optional data */
      form?: components["schemas"]["forms_CreateInfo"][];
    };
    forms_GetFormFileNodeInfo: {
      /** @description The array containing the information on the object being filed. The first element contains node data, the elements following contain optional data */
      forms?: components["schemas"]["forms_FileNodeInfo"][];
    };
    forms_RunPropertiesFormInfo: {
      data?: components["schemas"]["forms_RunPropertiesFormData"];
      /** @description The array containing the information on WebReport parameters to be displayed. The forms are displayed when a WebReport is run. */
      forms?: components["schemas"]["forms_RunFormInfo"][];
    };
    forms_RunPropertiesFormData: {
      /** @description Destination data */
      destination_data?: components["schemas"]["forms_DestinationData"][];
      /** @description Parameters data */
      parameters_data?: components["schemas"]["forms_ParametersData"][];
    };
    forms_UpdateFormInfo: {
      /** @description The array containing the forms for updating the node. The first element contains node data, the elements following contain additional data */
      forms?: components["schemas"]["forms_UpdateInfo"][];
    };
    forms_DestinationData: {
      /** @description Destination-specific data */
      destination_specific?: components["schemas"]["forms_DestinationSpecific"][];
      /** @description Whether the WebReport is set to export if there is no data */
      export_if_no_data?: boolean;
      /** @description The MIMEType that the WebReport output is written in */
      export_mime_type?: string;
      /** @description The http method that should be used to run the WebReport based on the destination type */
      http_method?: string;
      /** @description The WebReport destination type */
      output_destination?: string;
      /** @description Whether the WebReport is set to run in the background */
      run_in_background?: boolean;
      /** @description Schedule data */
      schedule_data?: components["schemas"]["forms_ScheduleData"][];
      /** @description Whether the WebReport is set to display a status page after it is run */
      show_status_screen?: boolean;
      /** @description Whether the conversion engine is set to be used */
      use_conversion_engine?: boolean;
      /** @description ID of the XML job ticket */
      xml_job_ticket_id?: string;
    };
    forms_DestinationSpecific: {
      /** @description (Content Server Node destination only): The names of the categories that will be applied to the output node */
      category_names?: string;
      /** @description (Content Server Node destination only): The node ID of the container that the WebReport output will be created in */
      "create_in_id (*)"?: string;
      /** @description (Content Server Node destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found in the destination container */
      duplicate_name_action?: string;
      /** @description (Content Server Node destination only): Whether the WebReport is set to output to a new node or add a version to an existing node */
      export_type?: string;
      /** @description (Content Server Node destination only): The description of the output node */
      "node_description (*)"?: string;
      /** @description (Content Server Node destination only): The name of the output node */
      "node_name (*)"?: string;
      /** @description (Content Server Node destination only): Whether the node type of the output is set to Document or Custom View */
      node_type?: string;
      /** @description (Content Server Version destination only): The node to add a version to */
      add_version_to_id?: string;
      /** @description (Content Server Version destination only): Setting used to determine whether the WebReport output should be appended into the text of an existing document */
      append_data?: string;
      /** @description (Content Server Version destination only): The end tag if the WebReport output is set to be appended into the text of an existing document between tags */
      end_tag?: string;
      /** @description (Content Server Version destination only): Whether the output should overwrite tags in the destination text if the WebReport output is set to be appended into the text of an existing document between tags */
      overwrite_tags?: string;
      /** @description (Content Server Version destination only): The start tag if the WebReport output is set to be appended into the text of an existing document between tags */
      start_tag?: string;
      /** @description (Content Server Version destination only): The description of the output version */
      "version_description (*)"?: string;
      /** @description (Content Server Version destination only): Whether the output should be added as a major or minor version */
      version_handling?: string;
      /** @description (Content Server Version destination only): The name of the output version */
      "version_name (*)"?: string;
      /** @description (Desktop destination only): The name of the file that the WebReport output is written to */
      "download_file_name (*)"?: string;
      /** @description (E-mail destination only): The name of the file attached to the e-mail */
      "attachment_name (*)"?: string;
      /** @description (E-mail destination only): Whether the WebReport output should be attached to the e-mail */
      attach_results_to_email?: boolean;
      /** @description (E-mail destination only): The e-mail address that the e-mail is being sent to */
      "email_address (*)"?: string;
      /** @description (E-mail destination only): The User ID of the Content Server user that the e-mail is being sent to */
      "email_address_user_id (*)"?: string;
      /** @description (E-mail destination only): The body text of the e-mail */
      "email_body_text (*)"?: string;
      /** @description (E-mail destination only): The node ID of the Content Server node containing the mailing list that the e-mail is being sent to */
      "email_mailing_list (*)"?: string;
      /** @description (E-mail destination only): The Subject of the e-mail */
      "email_subject (*)"?: string;
      /** @description (Form destination only): Setting used to determine how the WebReport output affects existing form data */
      append_form?: string;
      /** @description (Form destination only): The node ID of the Form being used as the destination of the WebReport */
      "form_id (*)"?: string;
      /** @description (FTP destination only): Whether the WebReport is set to login to the FTP Server anonymously */
      ftp_anonymous?: boolean;
      /** @description (FTP destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found on the destination FTP server */
      ftp_copy_options?: string;
      /** @description (FTP destination only): The relative path to the destination file from the FTP root folder */
      "ftp_file_path (*)"?: string;
      /** @description (FTP destination only): The port on the FTP server to connect to */
      ftp_port?: number;
      /** @description (FTP destination only): The IP Address or machine name of the FTP server */
      ftp_server?: string;
      /** @description (FTP destination only): The user name used for authentication on the FTP server */
      ftp_user_name?: string;
      /** @description (FTP destination only): The password used for authentication on the FTP server */
      ftp_user_password?: string;
      /** @description (Server destination only): The file path that the output will be written to on the destination server */
      "server_file_path (*)"?: string;
      /** @description (Workflow destination only): Whether the WebReport output is attached to the initiated workflow */
      workflow_attach_output?: boolean;
      /** @description (Workflow destination only): The node description of the WebReport output to be attached to the initiated workflow */
      "workflow_attachment_description (*)"?: boolean;
      /** @description (Workflow destination only): The node name of the WebReport output to be attached to the initiated workflow */
      "workflow_attachment_name (*)"?: boolean;
      /** @description (Workflow destination only): The names of the categories that will be applied to the output node to be attached to the initiated workflow */
      workflow_category_names?: boolean;
      /** @description (Workflow destination only): The description of the initiated workflow */
      "workflow_description (*)"?: string;
      /** @description (Workflow destination only): Setting used to determine whether the workflow will become due for completion */
      workflow_due?: string;
      /** @description (Workflow destination only): Number of days from initiation that the workflow will become due for completion */
      workflow_due_in?: string;
      /** @description (Workflow destination only): Date that the workflow will become due for completion */
      workflow_due_on?: string;
      /** @description (Workflow destination only): The node ID of the Workflow map being used as the destination of the WebReport */
      "workflow_map_id (*)"?: string;
      /** @description (Workflow destination only): The title of the initiated workflow */
      "workflow_title (*)"?: string;
    };
    forms_ScheduleData: {
      /** @description Whether the '5-minute-increments' setting is set */
      five_minute_increments?: boolean;
      /**
       * Format: date
       * @description The date that the WebReport is scheduled to be next run
       */
      next_run?: string;
      /** @description The repeat interval number of days that the WebReport is scheduled for */
      repeat_day?: number;
      /** @description The repeat interval number of hours that the WebReport is scheduled for */
      repeat_hour?: number;
      /** @description The repeat interval number of minutes that the WebReport is scheduled for */
      repeat_minute?: number;
      /** @description The repeat interval number of weeks that the WebReport is scheduled for */
      repeat_week?: number;
      /** @description 'intervals' if the schedule is set to run using repeat intervals or 'specific' if the schedule is set to run on specific days of the month */
      run_condition?: string;
      /** @description List containing the dates of the month that the report is scheduled to run on */
      run_on_dates?: string;
      /** @description List containing the weeks of the month that the report is scheduled to run on */
      run_on_weeks_month?: string;
      /** @description List containing the days of the month that the report is scheduled to run on */
      run_on_days_month?: string;
      /** @description List containing the days of the week that the report is scheduled to run on */
      run_on_days_week?: string;
      /** @description The specific number of times that the WebReport will run, or -1 for forever */
      run_times?: number;
      /** @description Whether the schedule is enabled */
      schedule_enabled?: boolean;
      /** @description The User ID of the user that created the schedule */
      user_id?: number;
    };
    forms_ParametersData: {
      /** @description ID of the prompt file */
      prompt_file_id?: string;
      /** @description Whether the parameter descriptions are set to be displayed */
      show_descriptions?: boolean;
    };
    forms_RunFormInfo: {
      /** @description Dynamic data for the WebReport parameters to be displayed */
      data?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for displaying WebReport parameters */
      schema?: Record<string, any>;
    };
    forms_GeneralPropertiesFormInfo: {
      data?: components["schemas"]["forms_GeneralPropertiesInfo"];
      options?: components["schemas"]["forms_PropertiesOptions"];
      schema?: components["schemas"]["forms_PropertiesSchema"];
    };
    forms_VersionGeneralPropertiesFormInfo: {
      data?: components["schemas"]["forms_VersionGeneralPropertiesInfo"];
      options?: components["schemas"]["forms_PropertiesOptions"];
      schema?: components["schemas"]["forms_PropertiesSchema"];
    };
    forms_VersionSpecificPropertiesFormInfo: {
      data?: components["schemas"]["forms_VersionSpecificPropertiesInfo"];
      options?: components["schemas"]["forms_PropertiesOptions"];
      schema?: components["schemas"]["forms_PropertiesSchema"];
    };
    forms_SpecificPropertiesFormInfo: {
      /** @description Dynamic data about the node */
      data?: Record<string, any>;
      options?: components["schemas"]["forms_PropertiesOptions"];
      schema?: components["schemas"]["forms_PropertiesSchema"];
    };
    forms_MoveFormInfo: {
      /** @description The array containing the information on the object being moved. The first element contains node data, the elements following contain optional data */
      form?: components["schemas"]["forms_MoveInfo"][];
    };
    forms_CopyInfo: {
      /** @description Dynamic data for the node being copied */
      data?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for copying the node */
      schema?: Record<string, any>;
    };
    forms_MoveInfo: {
      /** @description Dynamic data for the node being moved */
      data?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for moving the node */
      schema?: Record<string, any>;
    };
    forms_CreateInfo: {
      /** @description Dynamic data for the node being created */
      data?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for creating the node */
      schema?: Record<string, any>;
    };
    forms_FileNodeInfo: {
      data?: components["schemas"]["forms_FileNodeInfoData"];
      options?: components["schemas"]["forms_FileNodeInfoOptions"];
      schema?: components["schemas"]["forms_FileNodeInfoSchema"];
    };
    forms_FileNodeInfoData: {
      /** @description Always contains the Filing Destination ID set to null */
      filing_destination_id?: number;
      /** @description Always contains the Filing Classification ID set to null */
      filing_classification_id?: number;
    };
    forms_FileNodeInfoOptions: {
      fields?: components["schemas"]["forms_FileNodeInfoOptionsFields"];
      form?: components["schemas"]["forms_PropertiesForm"];
    };
    forms_FileNodeInfoOptionsFields: {
      filing_destination_id?: components["schemas"]["forms_FileNodeInfoFilingDestinationIDOptionsField"];
      filing_classification_id?: components["schemas"]["forms_FileNodeInfoFilingClassificationIDOptionsField"];
    };
    forms_FileNodeInfoOptionsField: {
      /** @description True if alpaca field is hidden, false otherwise */
      hidden?: boolean;
      /** @description True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise */
      hideInitValidationError?: boolean;
      /** @description The label of the alpaca field */
      label?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description Integer values representing selectable node types ( ex.0 = Folders, 144 = Documents, 131 = Category etc. ) */
      select_types?: number[];
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
      type_control?: components["schemas"]["forms_type_control"];
    };
    forms_FileNodeInfoFilingDestinationIDOptionsField: {
      /** @description True if alpaca field is hidden, false otherwise */
      hidden?: boolean;
      /** @description True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise */
      hideInitValidationError?: boolean;
      /** @description The label of the alpaca field */
      label?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
      type_control?: components["schemas"]["file_FilingDestinationIDControl"];
    };
    file_FilingDestinationIDControl: {
      parameters?: components["schemas"]["file_FilingDestinationIDControlParameters"];
    };
    file_FilingDestinationIDControlParameters: {
      /** @description The search type (ex. startsWith) */
      search_type?: string;
      /** @description Integer values representing Workspace Types */
      workspace_types?: number[];
    };
    forms_FileNodeInfoFilingClassificationIDOptionsField: {
      /** @description The ID of the Business Workspace Template */
      businessWorkspaceId?: number;
      /** @description True if alpaca field is hidden, false otherwise */
      hidden?: boolean;
      /** @description True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise */
      hideInitValidationError?: boolean;
      /** @description The label of the alpaca field */
      label?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_FileNodeInfoSchema: {
      properties?: components["schemas"]["forms_FileNodeInfoSchemaProperties"];
      type?: string;
    };
    forms_FileNodeInfoSchemaProperties: {
      filing_destination_id?: components["schemas"]["forms_FilingDestinationIDSchemaProperties"];
      filing_classification_id?: components["schemas"]["forms_FilingClassificationIDSchemaProperties"];
    };
    forms_FilingDestinationIDSchemaProperties: {
      /** @description The description of the alpaca field */
      description?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description True if the alpaca field is required, false otherwise */
      required?: boolean;
      /** @description The label of the alpaca field */
      title?: string;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_FilingClassificationIDSchemaProperties: {
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description True if the alpaca field is required, false otherwise */
      required?: boolean;
      /** @description The label of the alpaca field */
      title?: string;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_GeneralPropertiesInfo: {
      /** @description Name of the node */
      name?: string;
      /** @description Description of the node */
      description?: string;
      /**
       * Format: date-time
       * @description Date of node creation
       */
      create_date?: string;
      /** @description User ID of the node's creator */
      create_user_id?: number;
      /** @description Node data type */
      type?: number;
      /**
       * Format: date-time
       * @description Date the node was last modified
       */
      modified_date?: string;
      /** @description User ID of the node's owner */
      owner_user_id?: number;
    };
    forms_UpdateInfo: {
      /** @description Dynamic data for the node being updated */
      data?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for updating the node */
      schema?: Record<string, any>;
    };
    forms_VersionGeneralPropertiesInfo: {
      /** @description Description of the version */
      description?: string;
      /** @description Version number of the node */
      version_number?: number;
      /** @description Version number of the node */
      version_number_name?: string;
      /**
       * Format: date-time
       * @description Date the version was created
       */
      create_date?: string;
      /** @description User ID of the versions's owner */
      owner_id?: number;
      /**
       * Format: date-time
       * @description Date the version was last modified
       */
      modify_date?: string;
      /** @description Storage provider name */
      provider_id?: string;
    };
    forms_VersionSpecificPropertiesInfo: {
      /** @description Mime type of the version */
      mime_type?: string;
      /** @description Version number of the node */
      version_number?: number;
      /** @description File name of the version */
      file_name?: string;
      /** @description File extension of the version */
      file_type?: string;
      /** @description Formatted file size of the versions */
      file_size_formatted?: string;
      /**
       * Format: date-time
       * @description Date the file was created
       */
      file_create_date?: string;
      /**
       * Format: date-time
       * @description Date the file was last modified
       */
      file_modify_date?: string;
    };
    forms_VersionsCategoriesFormInfo: {
      /** @description Attributes values for the categories applied to the version */
      data?: Record<string, any>;
      /** @description Display information for the categories applied to the version */
      options?: Record<string, any>;
      /** @description Definitions for the categories applied to the version */
      schema?: Record<string, any>;
    };
    forms_VersionsCreateFormInfo: {
      data?: components["schemas"]["forms_VersionsCreateInfo"];
      options?: components["schemas"]["forms_VersionsCreateOptions"];
      schema?: components["schemas"]["forms_VersionsCreateSchema"];
    };
    forms_VersionsCreateInfo: {
      /** @description Description for the new version of the node */
      description?: string;
      /** @description File for the new version of the node */
      file?: string;
    };
    forms_VersionsCreateOptions: {
      description?: components["schemas"]["forms_VersionCreateOptionsInfo"];
      file?: components["schemas"]["forms_VersionCreateOptionsInfo"];
      form?: components["schemas"]["forms_PropertiesForm"];
    };
    forms_VersionCreateOptionsInfo: {
      /** @description True if alpaca field is hidden, false otherwise */
      hidden?: boolean;
      /** @description True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise */
      hideInitValidationError?: boolean;
      /** @description The label of the alpaca field */
      label?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_VersionsCreateSchema: {
      description?: components["schemas"]["forms_VersionCreateSchemaInfo"];
      file?: components["schemas"]["forms_VersionCreateSchemaInfo"];
      /** @description Object type of the schema (always of type 'object') */
      type?: string;
    };
    forms_VersionCreateSchemaInfo: {
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description True if the alpaca field is required, false otherwise */
      required?: boolean;
      /** @description The label of the alpaca field */
      title?: string;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_VersionsUpdateFormInfo: {
      data?: components["schemas"]["forms_VersionsUpdateInfo"];
      options?: components["schemas"]["forms_VersionsUpdateOptions"];
      schema?: components["schemas"]["forms_VersionsUpdateSchema"];
    };
    forms_VersionsUpdateInfo: {
      /** @description Description for the new version of the node */
      description?: string;
      /** @description The version number of the node to update */
      version_number?: number;
    };
    forms_VersionsUpdateOptions: {
      description?: components["schemas"]["forms_VersionUpdateOptionsInfo"];
      version_number?: components["schemas"]["forms_VersionUpdateOptionsInfo"];
      form?: components["schemas"]["forms_PropertiesForm"];
    };
    forms_VersionUpdateOptionsInfo: {
      /** @description True if alpaca field is hidden, false otherwise */
      hidden?: boolean;
      /** @description True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise */
      hideInitValidationError?: boolean;
      /** @description The label of the alpaca field */
      label?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_VersionsUpdateSchema: {
      description?: components["schemas"]["forms_VersionUpdateSchemaInfo"];
      version_number?: components["schemas"]["forms_VersionUpdateSchemaInfo2"];
      /** @description Object type of the schema (always of type 'object') */
      type?: string;
    };
    forms_VersionUpdateSchemaInfo: {
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description True if the alpaca field is required, false otherwise */
      required?: boolean;
      /** @description The label of the alpaca field */
      title?: string;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_VersionUpdateSchemaInfo2: {
      /** @description Regex pattern for the field */
      pattern?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description True if the alpaca field is required, false otherwise */
      required?: boolean;
      /** @description The label of the alpaca field */
      title?: string;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
    };
    forms_CategoriesCreateOptions: {
      options?: components["schemas"]["forms_category_id"];
      form?: components["schemas"]["forms_PropertiesForm"];
    };
    forms_CategoriesUpdateOptions: {
      /** @description Properties data for the fields of the alpaca form */
      options?: Record<string, any>;
      form?: components["schemas"]["forms_PropertiesForm"];
    };
    forms_CategoriesUpdateSchema: {
      /** @description Schema of the data that will populate the alpaca form fields */
      schema?: Record<string, any>;
      /** @description Object type of the schema (always of type 'object') */
      type?: string;
    };
    forms_category_id: {
      /** @description True if alpaca field is hidden, false otherwise */
      hidden?: boolean;
      /** @description True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise */
      hideInitValidationError?: boolean;
      /** @description The label of the alpaca field */
      label?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description The type of alpaca field ( ex. otcs_node_picker ) */
      type?: string;
      type_control?: components["schemas"]["forms_type_control"];
    };
    forms_type_control: {
      action?: string;
      method?: string;
      name?: string;
      parameters?: components["schemas"]["forms_parameters"];
    };
    forms_parameters: {
      /** @description Integer values representing node filter types ( ex. 0 = Folders, 144 = Documents, 131 = Category etc. ) */
      filter_types?: number[];
      /** @description Integer values representing selectable node types ( ex.0 = Folders, 144 = Documents, 131 = Category etc. ) */
      select_types?: number[];
    };
    forms_CategoriesCreateSchema: {
      schema?: components["schemas"]["forms_Schema"];
      type?: string;
    };
    forms_CategoriesData: {
      /** @description Always contains the categories ID set to null */
      categories_id?: number;
    };
    forms_Options: {
      /** @description Contains dynamic field data for the alpaca form */
      options?: Record<string, any>;
    };
    forms_Schema: {
      /** @description Contains dynamic data for populating the alpaca form fields */
      schema?: Record<string, any>;
    };
    forms_PropertiesForm: {
      attributes?: components["schemas"]["forms_PropertiesFormAttributes"];
      /** @description True if the form will be rendered, false otherwise */
      renderForm?: boolean;
    };
    forms_PropertiesFormAttributes: {
      /** @description Path of the action ( example: api/v1/nodes/{1} ) */
      action?: string;
      /** @description Method of the action ( ex. GET, PUT etc. ) */
      method?: string;
    };
    forms_PropertiesOptions: {
      options?: components["schemas"]["forms_Options"];
      form?: components["schemas"]["forms_PropertiesForm"];
    };
    forms_PropertiesSchema: {
      schema?: components["schemas"]["forms_Schema"];
      type?: string;
    };
    forms_CategoryInfo: {
      /** @description Data about the the category */
      data?: string[];
      /** @description Data about the category options */
      options?: string[];
      /** @description Name of the role being used */
      role_name?: string;
      /** @description Schema of the category */
      schema?: string[];
    };
    forms_WorkflowPropertiesFormInfo: {
      data?: components["schemas"]["forms_WorkflowPropertiesInfo"];
      /** @description The array containing the information on workflow attributes to be displayed. The forms are displayed in the workflow dialog. */
      forms?: components["schemas"]["forms_WorkflowFormInfo"][];
    };
    forms_WorkflowPropertiesInfo: {
      /** @description Title of the workflow */
      title?: string;
      /** @description Instructions of the workflow task */
      instructions?: string;
      /** @description Priority of the workflow task */
      priority?: number;
      /** @description Flag indicating if comments are enabled for the workflow */
      comments_on?: boolean;
      /** @description Flag indicating if attachments are enabled for the workflow */
      attachments_on?: boolean;
      /** @description The array containing the information about the defined data packages (comments, attachments, ...) */
      data_packages?: components["schemas"]["forms_WorkflowDataPackageInfo"][];
      /** @description The array containing the information about the standard actions for the workflow task. ( example: SendOn, SendForReview, Delegate) */
      actions?: components["schemas"]["forms_WorkflowActionInfo"][];
      /** @description The array containing the information about the custom actions (dispositiions) for the workflow task. */
      custom_actions?: components["schemas"]["forms_WorkflowActionInfo"][];
      message?: components["schemas"]["forms_WorkflowPropertiesMessageInfo"];
      /** @description Indicates if the step has to be accepted before the user can work with it */
      member_accept?: boolean;
      /** @description Contains in a subwork case, if available, the performerId of the step before this step. Used for the 'Reply' action in smartUI, but can be set in other cases as well. Is not there when the performerId is not available. */
      reply_performer_id?: number;
      task?: components["schemas"]["forms_WorkflowTaskInfo"];
      /** @description Flag indicating wether the authentication is set for this task. */
      authentication?: boolean;
    };
    forms_WorkflowPropertiesMessageInfo: {
      /** @description Performer that is responsible for the message */
      performer?: number;
      /** @description The type of the message. Supported types are 'delegate', 'review' and 'review_return' */
      type?: string;
      /** @description The message text */
      text?: string;
    };
    forms_WorkflowTaskInfo: {
      /** @description Task type */
      type?: number;
      /** @description Task sub_type */
      sub_type?: number;
      /** @description Task specific data */
      data?: Record<string, any>;
    };
    forms_WorkflowFormInfo: {
      /** @description Dynamic data for the workflow to be displayed */
      data?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for displaying workflow attributes */
      schema?: Record<string, any>;
      /** @description Number of columns for the form, currently supported values: 1 or 2 */
      columns?: number;
    };
    forms_WorkflowActionInfo: {
      /** @description Key of the action, has to be sent when executing the action */
      key?: string;
      /** @description Label of the action */
      label?: string;
    };
    forms_WorkflowDataPackageInfo: {
      /** @description Type of the data package, normally 1 */
      type?: number;
      /** @description Sub type of the data package (attachments = 1, comments = 2, attributes = 3, ...) */
      sub_type?: number;
      /** @description The structure of the data property depends on the data packages */
      data?: Record<string, any>;
    };
    forms_UserFormInfo: {
      data?: components["schemas"]["forms_UserData"];
      options?: components["schemas"]["forms_UserViewOptions"];
      schema?: components["schemas"]["forms_UserViewSchema"];
    };
    forms_UserData: {
      /** @description The user's manager id */
      reportsToID?: string;
      /** @description The user's office location */
      OfficeLocation?: string;
      /** @description The user's office email address */
      MailAddress?: string;
      /** @description The user's office phone number */
      Contact?: string;
      /** @description The user's personal mobile phone number */
      CellularPhone?: string;
    };
    forms_UserViewOptions: {
      fields?: components["schemas"]["forms_UserOptionFields"];
    };
    forms_UserOptionFields: {
      reportsToID?: components["schemas"]["forms_UserOptionFieldsInfo"];
      OfficeLocation?: components["schemas"]["forms_UserOptionFieldsInfo"];
      MailAddress?: components["schemas"]["forms_UserOptionFieldsInfo"];
      Contact?: components["schemas"]["forms_UserOptionFieldsInfo"];
      CellularPhone?: components["schemas"]["forms_UserOptionFieldsInfo"];
    };
    forms_UserOptionFieldsInfo: {
      /** @description True if alpaca field is hidden, false otherwise */
      hidden?: boolean;
      /** @description True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise */
      hideInitValidationError?: boolean;
      /** @description The label of the alpaca field */
      label?: string;
      /** @description True if the alpaca field is read only, false otherwise */
      readonly?: boolean;
      /** @description The type of alpaca field ( ex. otcs_user_picker ) */
      type?: string;
    };
    forms_UserViewSchema: {
      schema?: components["schemas"]["forms_Schema"];
      type?: string;
    };
    forms_DoctemplatesCreateResponse: {
      forms?: components["schemas"]["forms_DoctemplatesCreateFormsInfo"][];
    };
    forms_DoctemplatesCreateFormsInfo: {
      /** @description Data about the the doctemplates create form */
      data?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: components["schemas"]["forms_DoctemplatesCreateFormsOptions"][];
      /** @description Name of the role being used */
      role_name?: string;
      /** @description Schema of the data that will populate the alpaca form fields */
      schema?: components["schemas"]["forms_DoctemplatesCreateFormsSchema"][];
    };
    forms_DoctemplatesCreateFormsOptions: {
      fields?: Record<string, any>;
    };
    forms_DoctemplatesCreateFormsSchema: {
      properties?: Record<string, any>;
      title?: string;
      type?: string;
    };
    forms_RenameFormInfo: Record<string, any>;
    intelligentfiling_V2ResponseIntelligentFilingPost: {
      links?: {
        data?: {
          self?: components["schemas"]["nodes_V2Link"];
        };
      };
      results?: {
        data?: {
          properties?: components["schemas"]["nodes_V2Properties"];
        };
      };
    };
    lladmin_setup: {
      links?: {
        data?: {
          self?: components["schemas"]["nodes_V2Link"];
        };
      };
      results?: {
        dbupgradeError?: boolean;
        ok?: boolean;
      };
    };
    members_MemberInfo: {
      available_actions?: components["schemas"]["members_AvailableActions"][];
      /** @description User Data */
      data?: components["schemas"]["members_Data"][];
      /** @description This describes the actions available for items in the data structure */
      definitions?: components["schemas"]["members_ActionDefinitions"][];
      /** @description The order items should be displayed in. These items can be treated as keys to items in definitions_map */
      definitions_order?: components["schemas"]["members_ActionDefinitionsOrder"][];
      /** @description The type of user, group or user-related entity */
      type?: number;
      /** @description The type name of user, group or user-related entity */
      type_name?: string;
      /** @description The workflow ID */
      workflow_id?: number;
      /** @description The sub-workflow ID */
      workflow_subworkflow_id?: number;
      /** @description The task ID from the sub-workflow */
      workflow_subworkflow_task_id?: number;
    };
    members_ActionDefinitions: Record<string, any>;
    members_ActionDefinitionsOrder: Record<string, any>;
    members_AvailableActions: {
      /** @description TRUE if this action has parameters, FALSE otherwise */
      parameterless?: boolean;
      /** @description TRUE if this action does not modify data, FALSE otherwise */
      read_only?: boolean;
      /** @description The type of action */
      type?: string;
      /** @description The name of the action */
      type_name?: string;
      /** @description A unique name for this action */
      webnode_signature?: string;
    };
    members_Data: {
      /** @description The user's business e-mail address */
      business_email?: string;
      /** @description The user's business fax number */
      business_fax?: string;
      /** @description The user's business phone number */
      business_phone?: string;
      /** @description TRUE if the user or group has been deleted, FALSE otherwise */
      deleted?: boolean;
      /** @description The user's first name */
      first_name?: string;
      /** @description The ID of the user's base group */
      group_id?: number;
      /** @description A unique identifier for the user or group */
      id?: number;
      /** @description The user/group display initials (ex. 'JP', 'A') */
      initials?: string;
      /** @description The user's last name */
      last_name?: string;
      /** @description The user's middle name */
      middle_name?: string;
      /** @description The user or group name */
      name?: string;
      /** @description The full address of the user's office location */
      office_location?: string;
      /** @description REST API URL to get the member's profile photo */
      photo_url?: string;
      /** @description The user's preferred display language */
      display_language?: string;
      /** @description TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_content_manager?: boolean;
      /** @description TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_login?: boolean;
      /** @description TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_groups?: boolean;
      /** @description TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_users?: boolean;
      /** @description TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_public_access?: boolean;
      /** @description TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_system_admin_rights?: boolean;
      /** @description TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_user_admin_rights?: boolean;
      /** @description An offset of GMT */
      time_zone?: number;
      /** @description The user's title */
      title?: string;
      /** @description The type of user, group or user-related entity */
      type?: number;
      /** @description The type name of user, group or user-related entity */
      type_name?: string;
    };
    members_CreateMember: {
      /** @description A unique identifier for the user */
      id?: number;
    };
    members_DeleteMember: Record<string, any>;
    members_AddFavorite: Record<string, any>;
    members_EmptyResult: Record<string, any>;
    members_RemoveFavorite: Record<string, any>;
    members_Properties: {
      /** @description Properties */
      properties?: components["schemas"]["members_PropertiesStandard"][];
    };
    members_PropertiesStandard: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      /** @description Globally unique id */
      guid?: string;
      /** @description The item's icon */
      icon?: string;
      /** @description The item's icon (large) */
      icon_large?: string;
      /** @description The item's unique object ID */
      id?: number;
      /**
       * Format: date
       * @description The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description The date on which the item was reserved */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    members_SearchMember: {
      /** @description Search results */
      data?: components["schemas"]["members_SearchResults"][];
    };
    members_SearchResults: {
      /** @description A unique identifier for the user or group */
      id?: number;
      /** @description The user or group name */
      name?: string;
      /** @description The user's first name */
      first_name?: string;
      /** @description The user's last name */
      last_name?: string;
      /** @description The type of user, group or user-related entity */
      type?: string;
      /** @description The group name or user's display name */
      name_formatted?: string;
      /** @description The user/group display initials (ex. 'JP', 'A') */
      initials?: string;
    };
    members_UpdateMemberGroup: {
      /** @description TRUE if the group has been deleted, FALSE otherwise */
      deleted?: boolean;
      /** @description The group ID */
      id?: number;
      /** @description The id of the leader of the group */
      leader_id?: number;
      /** @description The group name */
      name?: string;
      /** @description Member Type of the user represented as an integer (0 for User, 1 for Group) */
      type?: number;
      /** @description Member Type of the user in a human-readable format */
      type_name?: string;
    };
    members_UpdateMemberUser: {
      /**
       * Format: date
       * @description The user's birthday
       */
      birth_date?: string;
      /** @description The user's office email address */
      business_email?: string;
      /** @description The user's office fax number */
      business_fax?: string;
      /** @description The user's office phone number */
      business_phone?: string;
      /** @description The user's personal mobile phone number */
      cell_phone?: string;
      /** @description TRUE if the user or group has been deleted, FALSE otherwise */
      deleted?: boolean;
      /** @description The user's first name */
      first_name?: string;
      /** @description The user's gender */
      gender?: string;
      /** @description The user's group ID */
      group_id?: number;
      /** @description The user's home address 1 */
      home_address_1?: string;
      /** @description The user's home address 2 */
      home_address_2?: string;
      /** @description The user's personal fax number */
      home_fax?: string;
      /** @description The user's personal home phone number */
      home_phone?: string;
      /** @description The user/group ID */
      id?: number;
      /** @description The user's last name */
      last_name?: string;
      /** @description The user's middle name */
      middle_name?: string;
      /** @description The user's login name.  If this is a group, then it is the group name */
      name?: string;
      /** @description The user's office location */
      office_location?: string;
      /** @description The user's office mobile phone number */
      pager?: string;
      /** @description The user's personal email address */
      personal_email?: string;
      /** @description The user's personal interests and hobbies */
      personal_interests?: string;
      /** @description The user's bookmarked url link 1 */
      personal_url_1?: string;
      /** @description The user's bookmarked url link 2 */
      personal_url_2?: string;
      /** @description The user's bookmarked url link 3 */
      personal_url_3?: string;
      /** @description The user's personal home page */
      personal_website?: string;
      /** @description The ID of the node for the user's profile photo */
      photo_id?: number;
      /** @description The user's preferred display language */
      display_language?: string;
      /** @description TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_content_manager?: boolean;
      /** @description TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_login?: boolean;
      /** @description TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_groups?: boolean;
      /** @description TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_users?: boolean;
      /** @description TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_public_access?: boolean;
      /** @description TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_system_admin_rights?: boolean;
      /** @description TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_user_admin_rights?: boolean;
      /** @description The user's time zone */
      time_zone?: number;
      /** @description The user's title */
      title?: string;
      /** @description Member Type of the user represented as an integer (0 for User, 1 for Group) */
      type?: number;
      /** @description Member Type of the user in a human-readable format */
      type_name?: string;
    };
    members_V2UpdateMember: {
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
      /** @description Results */
      results?: components["schemas"]["members_V2UpdateMemberResults"][];
    };
    members_V2UpdateMemberResults: {
      /** @description Data */
      data?: components["schemas"]["members_V2UpdateMemberData"][];
    };
    members_V2UpdateMemberData: {
      /** @description Members Information */
      properties?: components["schemas"]["members_V2UpdateMemberProperties"][];
    };
    members_V2UpdateMemberProperties: {
      /**
       * Format: date
       * @description The user's birthday
       */
      birth_date?: string;
      /** @description The user's office email address */
      business_email?: string;
      /** @description The user's office fax number */
      business_fax?: string;
      /** @description The user's office phone number */
      business_phone?: string;
      /** @description The user's personal mobile phone number */
      cell_phone?: string;
      /** @description TRUE if the user or group has been deleted, FALSE otherwise */
      deleted?: boolean;
      /** @description The user's first name */
      first_name?: string;
      /** @description The user's gender */
      gender?: string;
      /** @description The user's group ID */
      group_id?: number;
      /** @description The user's home address 1 */
      home_address_1?: string;
      /** @description The user's home address 2 */
      home_address_2?: string;
      /** @description The user's personal fax number */
      home_fax?: string;
      /** @description The user's personal home phone number */
      home_phone?: string;
      /** @description The user/group ID */
      id?: number;
      /** @description The user/group display initials (ex. 'JP', 'A') */
      initials?: string;
      /** @description The user's last name */
      last_name?: string;
      /** @description The user's middle name */
      middle_name?: string;
      /** @description The user's login name.  If this is a group, then it is the group name */
      name?: string;
      /** @description The user/group display name (ex. 'John Q. Public', 'AdminUserGroup') */
      name_formatted?: string;
      /** @description The user's office location */
      office_location?: string;
      /** @description The user's office mobile phone number */
      pager?: string;
      /** @description The user's personal email address */
      personal_email?: string;
      /** @description The user's personal interests and hobbies */
      personal_interests?: string;
      /** @description The user's bookmarked url link 1 */
      personal_url_1?: string;
      /** @description The user's bookmarked url link 2 */
      personal_url_2?: string;
      /** @description The user's bookmarked url link 3 */
      personal_url_3?: string;
      /** @description The user's personal home page */
      personal_website?: string;
      /** @description The ID of the node for the user's profile photo */
      photo_id?: number;
      /** @description The user's photo url */
      photo_url?: string;
      /** @description The user's time zone */
      time_zone?: number;
      /** @description The user's preferred display language */
      display_language?: string;
      /** @description TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_content_manager?: boolean;
      /** @description TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_login?: boolean;
      /** @description TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_groups?: boolean;
      /** @description TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_users?: boolean;
      /** @description TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_public_access?: boolean;
      /** @description TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_system_admin_rights?: boolean;
      /** @description TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_user_admin_rights?: boolean;
      /** @description The user's title */
      title?: string;
      /** @description Member Type of the user represented as an integer (0 for User, 1 for Group) */
      type?: number;
      /** @description Member Type of the user in a human-readable format */
      type_name?: string;
    };
    members_V2Data: {
      /** @description Properties */
      properties?: components["schemas"]["members_V2Properties"][];
    };
    members_V2DataAccessed: {
      /** @description Properties */
      properties?: components["schemas"]["members_V2Properties"][];
      /** @description User Properties */
      properties_user?: components["schemas"]["members_V2PropertiesUser"][];
    };
    members_V2DataAssignments: {
      /** @description Assignments */
      assignments?: components["schemas"]["members_V2PropertiesAssignments"][];
    };
    members_V2DataMembersSearch: {
      /** @description Members Search */
      properties?: components["schemas"]["members_V2PropertiesMembersSearch"][];
    };
    members_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    members_V2Link_Self: {
      /** @description Self link */
      self?: components["schemas"]["members_V2Link"][];
    };
    members_V2Links: {
      /** @description Data link */
      data?: components["schemas"]["members_V2Link_Self"][];
    };
    members_V2Properties: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description (Can be time-zone aware) The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["members_DescriptionMultilingual"];
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description Globally unique id */
      guid?: string;
      /** @description The item's icon */
      icon?: string;
      /** @description The item's icon (large) */
      icon_large?: string;
      /** @description The item's unique object ID */
      id?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["members_NameMultilingual"];
      /** @description The name of the owner of this item */
      owner?: string;
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description (Can be time-zone aware) The date on which the item was reserved */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description TRUE if this item has versionable content, FALSE otherwise */
      versionable?: boolean;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    members_V2PropertiesFavoritesTab: {
      /** @description The name of the favorites tab */
      name?: string;
      /** @description The order of the favorites tab */
      order?: number;
      /** @description The tab_id of the favorites tab */
      tab_id?: number;
    };
    members_V2PropertiesAssignments: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) Assignment due date
       */
      date_due?: string;
      /** @description Description of the item */
      description?: string;
      /** @description Indicates if the item is a favorite */
      favorite?: boolean;
      /** @description The follow up ID */
      followup_id?: number;
      /** @description The id of the user who had sent this assignment */
      from_user_id?: number;
      /** @description The item's unique object ID */
      id?: number;
      /** @description Instructions for the assignment if applicable */
      instructions?: string;
      /** @description The object id of the parent to which this assignment belongs */
      location_id?: number;
      /** @description The name of the item */
      name?: string;
      /** @description Integer representation of the assignment's priority */
      priority?: number;
      /** @description Assignment priority */
      priority_name?: string;
      /** @description Whether to open the workflow in the Smart View Attachment view */
      smartViewAttachmentsView?: boolean;
      /** @description Integer representation of the assignment's status */
      status?: number;
      /** @description Assignment status */
      status_name?: string;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description The workflow ID */
      workflow_id?: number;
      /** @description Whether to open the workflow in the Smart UI */
      workflow_open_in_smart_ui?: boolean;
      /** @description The sub-workflow ID */
      workflow_subworkflow_id?: number;
      /** @description The sub-workflow task ID */
      workflow_subworkflow_task_id?: number;
      /** @description The task subtype */
      maptask_subtype?: number;
    };
    members_V2PropertiesMembersSearch: {
      /**
       * Format: date
       * @description The user's birthday
       */
      birth_date?: string;
      /** @description The user's office email address */
      business_email?: string;
      /** @description The user's office fax number */
      business_fax?: string;
      /** @description The user's office phone number */
      business_phone?: string;
      /** @description The user's personal mobile phone number */
      cell_phone?: string;
      /** @description The user's first name */
      first_name?: string;
      /** @description The user's gender */
      gender?: string;
      /** @description The user's group ID */
      group_id?: number;
      /** @description The user's home address 1 */
      home_address_1?: string;
      /** @description The user's home address 2 */
      home_address_2?: string;
      /** @description The user's personal fax number */
      home_fax?: string;
      /** @description The user's personal home phone number */
      home_phone?: string;
      /** @description The user/group ID */
      id?: number;
      /** @description The user/group display initials (ex. 'JP', 'A') */
      initials?: string;
      /** @description The user's last name */
      last_name?: string;
      /** @description The group leader's user ID */
      leader_id?: number;
      /** @description The user's middle name */
      middle_name?: string;
      /** @description The user's login name.  If this is a group, then it is the group name */
      name?: string;
      /** @description The user/group display name (ex. 'John Q. Public', 'AdminUserGroup') */
      name_formatted?: string;
      /** @description The user's office location */
      office_location?: string;
      /** @description The user's office mobile phone number */
      pager?: string;
      /** @description The user's personal email address */
      personal_email?: string;
      /** @description The user's personal interests and hobbies */
      personal_interests?: string;
      /** @description The user's bookmarked url link 1 */
      personal_url_1?: string;
      /** @description The user's bookmarked url link 2 */
      personal_url_2?: string;
      /** @description The user's bookmarked url link 3 */
      personal_url_3?: string;
      /** @description The user's personal home page */
      personal_website?: string;
      /** @description The ID of the node for the user's profile photo */
      photo_id?: number;
      /** @description The user's photo url */
      photo_url?: string;
      /** @description The user's time zone */
      time_zone?: number;
      /** @description The user's preferred display language */
      display_language?: string;
      /** @description TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_content_manager?: boolean;
      /** @description TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_login?: boolean;
      /** @description TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_groups?: boolean;
      /** @description TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_modify_users?: boolean;
      /** @description TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_public_access?: boolean;
      /** @description TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_system_admin_rights?: boolean;
      /** @description TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators */
      privilege_user_admin_rights?: boolean;
      /** @description The user's title */
      title?: string;
      /** @description Member Type of the user represented as an integer (0 for User, 1 for Group) */
      type?: number;
      /** @description Member Type of the user in a human-readable format */
      type_name?: string;
    };
    members_V2PropertiesUser: {
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The last time this item was accessed by this user
       */
      access_date_last?: string;
    };
    members_V2ResponseAccessed: {
      /** @description Collection */
      collection?: components["schemas"]["members_V2Collection_BrowseMembers"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
      /** @description Results */
      results?: components["schemas"]["members_V2ResultAccessed"][];
    };
    members_V2ResponseAssignments: {
      /** @description Results */
      results?: components["schemas"]["members_V2ResultAssignments"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseEmpty: {
      /** @description Results */
      results?: components["schemas"]["members_EmptyResult"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseMembersCreate: {
      /** @description Results */
      results?: components["schemas"]["members_V2ResultMembersSearch"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseMembersSearch: {
      /** @description Collection */
      collection?: components["schemas"]["members_V2Collection_BrowseMembers"][];
      /** @description Results */
      results?: components["schemas"]["members_V2ResultMembersSearch"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseBrowseMembersSearch: {
      /** @description Collection */
      collection?: components["schemas"]["members_V2Collection_BrowseMembers"][];
      /** @description Results */
      results?: components["schemas"]["members_V2ResultMembersSearch"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseMembersGet: {
      /** @description Results */
      results?: components["schemas"]["members_V2ResultMembersSearch"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseCollection: {
      /** @description Results */
      results?: components["schemas"]["members_V2Result"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseCollectionFavorites: {
      /** @description Collection */
      collection?: components["schemas"]["members_V2Collection_ListFavorites"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
      /** @description Results */
      results?: components["schemas"]["members_V2Result"][];
    };
    members_V2ResponseCollectionReserved: {
      /** @description Collection */
      collection?: components["schemas"]["members_V2Collection_ListReserved"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
      /** @description Results */
      results?: components["schemas"]["members_V2Result"][];
    };
    members_V2ResponseCollectionFavoritesTab: {
      /** @description Results */
      results?: components["schemas"]["members_V2ResultFavoritesTab"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResponseElement: {
      /** @description Results */
      results?: components["schemas"]["members_V2Result"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2Result: {
      /** @description Data */
      data?: components["schemas"]["members_V2Data"][];
    };
    members_V2ResultFavoritesTab: {
      /** @description Data */
      data?: components["schemas"]["members_V2PropertiesFavoritesTab"][];
    };
    members_V2ResultAccessed: {
      /** @description Data */
      data?: components["schemas"]["members_V2DataAccessed"][];
    };
    members_V2ResultAssignments: {
      /** @description Data */
      data?: components["schemas"]["members_V2DataAssignments"][];
    };
    members_V2ResultMembersSearch: {
      /** @description Data */
      data?: components["schemas"]["members_V2DataMembersSearch"][];
    };
    members_V2ResponseGroupsSearch: {
      /** @description Results */
      results?: components["schemas"]["members_V2ResultGroupsSearch"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResultGroupsSearch: {
      /** @description Data */
      data?: components["schemas"]["members_V2DataGroupsSearch"][];
    };
    members_V2DataGroupsSearch: {
      /** @description Group Search */
      properties?: components["schemas"]["members_V2PropertiesGroupsSearch"][];
    };
    members_V2PropertiesGroupsSearch: {
      /** @description TRUE if the user or group has been deleted, FALSE otherwise */
      deleted?: boolean;
      /** @description The user/group ID */
      id?: number;
      /** @description The group leader's user ID */
      leader_id?: number;
      /** @description The user's login name.  If this is a group, then it is the group name */
      name?: string;
      /** @description The user/group display name (ex. 'John Q. Public', 'AdminUserGroup') */
      name_formatted?: string;
      /** @description The user/group display initials (ex. 'JP', 'A') */
      initials?: string;
      /** @description Member Type of the user represented as an integer (0 for User, 1 for Group) */
      type?: number;
      /** @description Member Type of the user in a human-readable format */
      type_name?: string;
    };
    members_V2ResponseObjectTypes: {
      /** @description Results */
      results?: components["schemas"]["members_V2ResultObjectTypes"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    members_V2ResultObjectTypes: {
      /** @description Data */
      data?: components["schemas"]["members_V2ListObjectTypes"][];
    };
    members_V2ListObjectTypes: {
      /** @description Objects */
      objects?: components["schemas"]["members_V2DataObjectType"][];
    };
    members_V2DataObjectType: {
      /** @description The value of the Object Type */
      type?: number;
      /** @description The display name of the Object Type */
      type_name?: string;
    };
    members_V2Collection: {
      /** @description Paging Information */
      paging?: components["schemas"]["members_V2Paging"][];
    };
    members_V2Collection_BrowseMembers: {
      /** @description Paging Information */
      paging?: components["schemas"]["members_V2Paging"][];
      /** @description Sorting information */
      sorting?: components["schemas"]["members_V2Sorting"][];
    };
    members_V2Collection_ListFavorites: {
      /** @description Paging Information */
      paging?: components["schemas"]["members_V2Paging"][];
      /** @description Sorting information */
      sorting?: components["schemas"]["members_V2Sorting"][];
    };
    members_V2Collection_ListReserved: {
      /** @description Paging Information */
      paging?: components["schemas"]["members_V2Paging"][];
      /** @description Sorting information */
      sorting?: components["schemas"]["members_V2Sorting"][];
    };
    members_V2Paging: {
      /** @description limit */
      limit?: number;
      /** @description links */
      links?: string[];
      /** @description page */
      page?: number;
      /** @description page total */
      page_total?: number;
      /** @description range max */
      range_max?: number;
      /** @description range min */
      range_min?: number;
      /** @description total count */
      total_count?: number;
    };
    members_V2Sorting: {
      sort?: components["schemas"]["members_V2Sort"][];
    };
    members_V2Sort: Record<string, any>;
    members_DescriptionMultilingual: {
      /** @description Description in English */
      en?: string;
      /** @description Beschreibung in Deutsch */
      de?: string;
    };
    members_NameMultilingual: {
      /** @description Name in English */
      en?: string;
      /** @description Name auf Deutsch */
      de?: string;
    };
    multipart_GetSettings: {
      /** @description Whether Large File Upload is enabled or not */
      is_enabled?: boolean;
      /** @description Maximum allowed size in bytes */
      max_size?: number;
      /** @description Minimum allowed size in bytes */
      min_size?: number;
    };
    multipart_StartUpload: {
      /** @description The key to identify the Large File Upload session */
      upload_key?: string;
      /** @description Number of retries allowed per part */
      max_retries?: number;
      /** @description Number of parts expected in Large File Upload session */
      num_parts?: number;
      /** @description Maximum size of each file part in bytes */
      part_size?: number;
    };
    members_V2GetSessions: {
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
      /** @description Results */
      results?: components["schemas"]["members_V2GetSessionsResults"][];
    };
    members_V2GetSessionsResults: {
      active_sessions?: components["schemas"]["members_V2SessionsActiveSessions"][];
      previous_sessions?: components["schemas"]["members_V2SessionsPreviousSessions"][];
    };
    members_V2SessionsActiveSessions: {
      /** @description Whether or not the active session information was successfully retrieved. */
      ok?: boolean;
      recs?: components["schemas"]["members_V2SessionsActiveSessionsRecs"][];
    };
    /** @description The array of the active session information. */
    members_V2SessionsActiveSessionsRecs: components["schemas"]["members_V2SessionsActiveSessionsRecsDatePairs"][];
    members_V2SessionsActiveSessionsRecsDatePairs: {
      /** @description For how long the current session was active in minutes. */
      duration?: number;
      /**
       * Format: date-time
       * @description When the current session was created.
       */
      create_time?: string;
      /**
       * Format: date-time
       * @description When the last activity of the current session happened.
       */
      last_activity?: string;
    };
    members_V2SessionsPreviousSessions: {
      /** @description Whether or not the previous session information was successfully retrieved. */
      ok?: boolean;
      recs?: string[];
    };
    nicknames_Tag: {
      name?: string;
    };
    nicknames_V2Empty: {
      /** @description results */
      results?: components["schemas"]["nicknames_V2EmptyResults"][];
      /** @description links */
      links?: components["schemas"]["nicknames_V2DataLinks"][];
    };
    nicknames_V2EmptyResults: Record<string, any>;
    nicknames_V2Links: {
      /** @description Self link */
      self?: components["schemas"]["nicknames_V2Link"][];
    };
    nicknames_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    nicknames_V2DataLinks: {
      data?: components["schemas"]["nicknames_V2Links"][];
    };
    nicknames_V2Result: {
      /** @description Data */
      data?: components["schemas"]["nicknames_V2Data"][];
    };
    nicknames_V2Data: {
      /** @description Properties */
      properties?: components["schemas"]["nicknames_V2Properties"][];
    };
    nicknames_V2ResponseElement: {
      /** @description Results */
      results?: components["schemas"]["nicknames_V2Result"][];
      /** @description Links */
      links?: components["schemas"]["nicknames_V2DataLinks"][];
    };
    nicknames_V2Properties: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["members_DescriptionMultilingual"];
      /**
       * Format: date
       * @description External create date
       */
      external_create_date?: string;
      /** @description External identity */
      external_identity?: string;
      /** @description External identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date
       */
      external_modify_date?: string;
      /** @description External source */
      external_source?: string;
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description Globally unique id */
      guid?: string;
      /** @description The item's icon */
      icon?: string;
      /** @description The item's icon (large) */
      icon_large?: string;
      /** @description The item's unique object ID */
      id?: number;
      /**
       * Format: date
       * @description The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["members_NameMultilingual"];
      /** @description The name of the owner of this item */
      owner?: string;
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /**
       * Format: date
       * @description The date on which the item was reserved
       */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    nodes_bodyParam: {
      description?: string;
      description_multilingual?: components["schemas"]["nodes_bodyParam2"];
    };
    nodes_bodyParam2: {
      en?: string;
      de_DE?: string;
    };
    nodes_GetRequestStatus: {
      data?: {
        /** @description the number of users that have requested for reservation, not including the current user */
        num_users?: number;
        /** @description the username of the user who is currently reserving the given node */
        reserved_by?: string;
        /**
         * Format: date-time
         * @description the datetime that the given node was reserved
         */
        reserved_date?: string;
        /** @description Returns true if the current user has already requested */
        already_requested?: boolean;
      };
    };
    nodes_Tag: {
      name?: string;
    };
    nodes_AddableTypesInfo: {
      data?: components["schemas"]["nodes_ActionData"];
      definitions?: components["schemas"]["nodes_Definitions"];
      definitions_map?: components["schemas"]["nodes_DefinitionsMap"];
      /** @description The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
    };
    nodes_AuditInfo: {
      data?: components["schemas"]["nodes_ActionData"];
      definitions?: components["schemas"]["nodes_Definitions"];
      /** @description The order items should be displayed in */
      definitions_order?: string[];
      /** @description The max number of records that can be returned */
      limit?: number;
      offset_key?: components["schemas"]["nodes_AuditOffsetKey"];
      /** @description Number of the current page */
      page?: number;
      /** @description Total number of pages available */
      page_total?: number;
      /** @description Total audit records available */
      total?: number;
      /** @description Order and column name on which the results are sorted */
      sort?: string;
    };
    nodes_AuditResult2: {
      /** @description Collection */
      collection?: components["schemas"]["nodes_V2Collection"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["nodes_V2AuditResult"][];
    };
    nodes_V2AuditResult: {
      /** @description Data */
      data?: components["schemas"]["nodes_V2AuditData"][];
    };
    nodes_V2AuditData: {
      /** @description The audit data fields */
      audit?: components["schemas"]["nodes_V2AuditDataFields"][];
    };
    nodes_V2AuditDataFields: {
      /** @description The ID of the agent which performed the audit event on behalf of a user */
      agent_id?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) The audit date
       */
      audit_date?: string;
      /** @description The node ID (which these audit records belong to) */
      id?: number;
      /** @description The user ID associated with the audit event */
      user_id?: number;
      /** @description The audit language code */
      audit_language_code?: string;
      /** @description The audit name */
      audit_name?: string;
    };
    nodes_AuditOffsetKey: {
      /** @description EventID of last audit record returned */
      Identity?: number;
      /** @description Returns a false if not all audit records were returned in data, true if all were returned */
      NoMoreData?: boolean;
    };
    nodes_BrowseResult: {
      data?: components["schemas"]["nodes_NodeInfo"][];
      definitions?: components["schemas"]["nodes_Definitions"];
      definitions_map?: components["schemas"]["nodes_DefinitionsMap"];
      /** @description The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
      /** @description Maximum number of items returned per page */
      limit?: number;
      /** @description Number of the current page */
      page?: number;
      /** @description Total number of pages available */
      page_total?: number;
      /** @description Number of the ending item for this page */
      range_max?: number;
      /** @description Number of the starting item for this page */
      range_min?: number;
      /** @description Order and column name on which the results are sorted */
      sort?: string;
      /** @description Total number of items available */
      total_count?: number;
      /** @description Facets on which results are filtered */
      where_facet?: string[];
      /** @description Name on which results are filtered */
      where_name?: number;
      /** @description Types on which results are filtered */
      where_type?: number[];
    };
    nodes_BrowseResult2: {
      /** @description Collection */
      collection?: components["schemas"]["nodes_V2Collection"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["nodes_V2Result"][];
    };
    nodes_BrowseReleasesResult2: {
      /** @description Collection */
      collection?: components["schemas"]["nodes_V2Collection"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["nodes_V2ReleaseResult"][];
    };
    nodes_ListContents: {
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["nodes_ListContentsResult"][];
    };
    nodes_CellMetadata: {
      data?: components["schemas"]["nodes_CellMetadataData"];
      definitions?: components["schemas"]["nodes_CellMetadataDefinitions"];
    };
    nodes_CreateResponse: {
      /** @description The ID of the node which was created */
      id?: number;
    };
    nodes_CopyResponse: {
      /** @description Information about the node */
      data?: components["schemas"]["nodes_V1DataPost"][];
    };
    nodes_MoveResponse: {
      /** @description Information about the node */
      data?: components["schemas"]["nodes_V1DataPost"][];
    };
    nodes_RolesInfo: {
      categories?: Record<string, any>;
    };
    nodes_CategoriesInfo: {
      /** @description Attribute key in the format {category_id}_[{set_id}_{set_row}]_{attribute_id} */
      "{attribute_key}"?: string;
    };
    nodes_FacetInfo: {
      /** @description Information on the available unselected facets. */
      available_values?: string[];
      properties?: components["schemas"]["nodes_FacetInfoProperties"];
      /** @description Information on the selected facets from the query string's where_facets clause */
      selected_values?: string[];
    };
    nodes_FacetInfoProperties: Record<string, any>;
    nodes_FacetsInfo: {
      facets?: components["schemas"]["nodes_FacetInfo"];
    };
    nodes_InfoResult: {
      /** @description The object types (including icon information) that can be added to this node */
      addable_types?: components["schemas"]["nodes_AddableTypes"][];
      /** @description The actions that can be performed on this node */
      available_actions?: components["schemas"]["nodes_AvailableActions"][];
      /** @description The available roles for this node */
      available_roles?: components["schemas"]["nodes_AvailableRoles"][];
      data?: components["schemas"]["nodes_Data"];
      definitions?: components["schemas"]["nodes_InfoDefinitions"];
      /** @description The definitions that are common to all nodes */
      definitions_base?: string[];
      /** @description The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
      /** @description An ID representing the type of the object */
      type?: number;
      type_info?: components["schemas"]["nodes_TypeInfo"];
      /** @description The name of the node's object type */
      type_name?: string;
    };
    nodes_AddableTypes: {
      /** @description A relative URL to the object's icon */
      icon?: string;
      /** @description An ID representing the type of the object */
      type?: number;
      /** @description The name of the type of object */
      type_name?: string;
    };
    nodes_AvailableActions: {
      /** @description TRUE if this action has parameters, FALSE otherwise */
      parameterless?: boolean;
      /** @description TRUE if this action does not modify data, FALSE otherwise */
      read_only?: boolean;
      /** @description The type of action */
      type?: string;
      /** @description The name of action */
      type_name?: string;
      /** @description A unique name for this action */
      webnode_signature?: string;
    };
    nodes_AvailableRoles: {
      /** @description The type of role */
      type?: string;
      /** @description The name of role */
      type_name?: string;
    };
    nodes_Data: {
      /** @description Whether or not this item uses standard or advanced versioning */
      advanced_versioning?: boolean;
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description (Can be time-zone aware) Creation date of this object */
      create_date?: string;
      /** @description The ID of the user */
      create_user_id?: number;
      /** @description Description of the object */
      description?: string;
      description_multilingual?: components["schemas"]["nodes_DescriptionMultilingual"];
      /**
       * Format: date
       * @description External create date
       */
      external_create_date?: string;
      /** @description External identity */
      external_identity?: string;
      /** @description External identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date
       */
      external_modify_date?: string;
      /** @description External source */
      external_source?: string;
      /** @description Global unique identifier */
      guid?: string;
      /** @description Indicates if the item is hidden */
      hidden?: boolean;
      /** @description Path to the type specific icon */
      icon?: string;
      /** @description Path to the type specific icon (larger sized) */
      icon_large?: string;
      /** @description A unique ID for this object */
      id?: number;
      /** @description (Can be time-zone aware) Date when this object was modified */
      modify_date?: string;
      /** @description The ID of the user who modified this object */
      modify_user_id?: number;
      /** @description Name of the object */
      name?: string;
      name_multilingual?: components["schemas"]["nodes_NameMultilingual"];
      /** @description ID of original object if this object is a shortcut */
      original_id?: number;
      /** @description The ID of the group to which the owner of this object belongs */
      owner_group_id?: number;
      /** @description The ID of the user who owns this object */
      owner_user_id?: number;
      /** @description The ID of the parent object of which this object is a child */
      parent_id?: number;
      /** @description TRUE if this object is reserved, FALSE otherwise */
      reserved?: boolean;
      /** @description (Can be time-zone aware) Date when this object was reserved */
      reserved_date?: string;
      /** @description The ID of the user or group that has reserved this object */
      reserved_user_id?: number;
      /** @description TRUE if this object has versionable content, false otherwise */
      versionable?: boolean;
      /** @description The ID of the volume */
      volume_id?: number;
    };
    nodes_Properties: {
      /**
       * Format: date-time
       * @description Date of creation
       */
      create_date?: string;
      /**
       * Format: date-time
       * @description Date of last modification
       */
      modify_date?: string;
      description?: string;
      guid?: string;
      id?: number;
      name?: string;
      /** @description Parent's ID */
      parent_id?: number;
      volume_id?: number;
    };
    nodes_AncestorsInfo: {
      ancestors?: components["schemas"]["nodes_AncestorInfo"][];
    };
    nodes_AncestorInfo: {
      /** @description Unique identifer of an item, as number */
      id?: number;
      /** @description Item name */
      name?: string;
      /** @description ID of the volume under which the item is located */
      volume_id?: number;
      /** @description Parent's ID */
      parent_id?: number;
      /** @description Item type */
      type?: number;
      /** @description Item type name */
      type_name?: string;
    };
    nodes_ColumnsInfo: {
      columns?: components["schemas"]["nodes_ColumnInfo"][];
    };
    nodes_ColumnInfo: {
      /** @description Unique identifer of column, as number */
      id?: number;
      /** @description Indicates if this is a non-modifiable column */
      locked?: number;
      /**
       * @description Horizontal alignment
       * @enum {string}
       */
      alignment?: "left" | "center" | "right";
      /** @description Unique identifier of column as string, used for e.g. sorting or getting value */
      column_key?: string;
      /** @description Width of column in letters, maximum number of letters to display */
      column_display_width?: number;
      /** @description Width of column in em units */
      column_em_width?: number;
      /** @description Name of value provider, which gives value of this column */
      data_source?: string;
      /**
       * @description Data Type (5 = Boolean,-7 = Date,13 = DatePopup,401 = DateTime,2 = Integer,12 = IntegerPopup,-1 = String,10 = StringPopup,305 = SubType,14 = User,19 = UserPopup)
       * @enum {integer}
       */
      data_type?: 5 | -7 | 13 | 401 | 2 | 12 | -1 | 10 | 305 | 14 | 19;
      /** @description Indicates display of this column as link */
      display_as_link?: boolean;
      /** @description Column name */
      name?: string;
      /** @description Display format string ('%value%' is to be replaced with the property value) */
      display_value?: string;
      /** @description Indicates if column is always displayed */
      is_default?: boolean;
      /** @description Indicates if this column is fixed system column (i.e. columns that come defined out of the box and can't be removed) */
      is_system_column?: boolean;
      /**
       * @description How to handle textual column values (Wrap = 0, NoWrap = 1, Truncate = 2)
       * @enum {integer}
       */
      long_text?: 0 | 1 | 2;
      name_multilingual?: components["schemas"]["nodes_NameMultilingual"];
      /** @description Indicates, in case display_as_link is true, if the link has to be opened in new window */
      new_window?: boolean;
      /** @description Public access permissions */
      public_access?: number;
      /** @description Indicates if columns is ready to be displayed. */
      ready?: boolean;
      /** @description Indicates if this column is sortable. */
      sortable?: boolean;
      /** @description <tooltip?> */
      title_text?: string;
      /** @description Gives, in case display_as_link is true, target URL */
      url?: string;
    };
    nodes_NodeInfo: {
      /** @description ID of the volume to which this item belongs */
      volume_id?: number;
      /** @description Unique identifier of this item */
      id?: number;
      /** @description ID of the parent container */
      parent_id?: number;
      /** @description Item name */
      name?: string;
      /** @description Item type, as a number */
      type?: number;
      /** @description Item description */
      description?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) Date of creation
       */
      create_date?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) Date of last modification
       */
      modify_date?: string;
      /** @description Is this item reserved */
      reserved?: boolean;
      /** @description ID of user that reserved this item */
      reserved_user_id?: number;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) Date this item was reserved
       */
      reserved_date?: string;
      /** @description Indicates if the item is hidden */
      hidden?: boolean;
      /** @description Path to the icon for the type of this item */
      icon?: string;
      /** @description Mime type of the object */
      mime_type?: string;
      /** @description ID of original item - used when this item is a shortcut */
      original_id?: number;
      /** @description Item type, as a word */
      type_name?: string;
      /** @description Is this item a container */
      container?: boolean;
      /** @description Size of this item */
      size?: number;
      perm_see?: boolean;
      perm_see_contents?: boolean;
      perm_modify?: boolean;
      perm_modify_attributes?: boolean;
      perm_modify_permissions?: boolean;
      perm_create?: boolean;
      perm_delete?: boolean;
      perm_delete_versions?: boolean;
      perm_reserve?: boolean;
      perm_add_major_version?: boolean;
      cell_metadata?: components["schemas"]["nodes_CellMetadata"];
      menu?: string;
      /** @description Whether this node has been favorited by the current user */
      favorite?: boolean;
      /** @description Size of this item with an appropriate units based on type (i.e. 11 items or 7 KB) */
      size_formatted?: string;
      reserved_user_login?: string;
      /** @description URL for getting available actions on this item */
      action_url?: string;
      /** @description URL for getting metadata about this item's parent container */
      parent_id_url?: string;
      /** @description Actions possible on this node (only with query-parameter actions=true) */
      actions?: components["schemas"]["nodes_ActionInfo"][];
    };
    nodes_ActionsInfo: {
      /** @description Actions possible on this node. The returned actions also includes spacing (represented by dashes '-') */
      actions?: components["schemas"]["nodes_ActionInfo"][];
      data?: components["schemas"]["nodes_ActionData"];
      definitions?: components["schemas"]["nodes_Definitions"];
      definitions_map?: components["schemas"]["nodes_DefinitionsMap"];
      /** @description The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
    };
    nodes_ActionInfo: {
      /** @description The action's name (as shown in UI representation) */
      name?: string;
      /** @description The URL to be called on the action's execution */
      url?: string;
      /** @description List of sub-actions available. This appears when the action is a sub-menu */
      children?: components["schemas"]["nodes_ActionInfoChild"][];
      signature?: string;
    };
    nodes_ActionInfoChild: {
      /** @description The action's name (as shown in UI representation) */
      name?: string;
      /** @description The URL to be called on the action's execution */
      url?: string;
      signature?: string;
    };
    nodes_ActionData: Record<string, any>;
    nodes_InfoDefinitions: Record<string, any>;
    nodes_Definitions: Record<string, any>;
    nodes_DefinitionsBase: Record<string, any>;
    nodes_DefinitionsMap: Record<string, any>;
    nodes_DefinitionsOrder: Record<string, any>;
    nodes_ThumbnailInfo: {
      data?: components["schemas"]["nodes_ThumbnailInfoData"];
      definitions?: components["schemas"]["nodes_ThumbnailInfoDefinitions"];
      /** @description This is populated with children of item(s) in definitions_order if applicable. These items will also be in definitions and data. Always returns empty for addablenodetypes */
      definitions_map?: Record<string, any>;
      /** @description The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
    };
    nodes_ThumbnailInfoData: {
      /** @description Path of the thumbnail resource ( e.g. 'api/v1/nodes/{id}/thumbnails/medium/content' ) */
      medium?: string;
    };
    nodes_ThumbnailInfoDefinitions: {
      medium?: components["schemas"]["nodes_ThumbnailInfoDefinitionsSize"];
    };
    nodes_ThumbnailInfoDefinitionsSize: {
      /** @description Size of the thumbnail in bytes */
      file_size?: number;
      /** @description MIME type of the thumbnail */
      mime_type?: string;
      /** @description The thumbnail type (currently only the medium type is supported) */
      type?: string;
      /** @description Path of the thumbnail resource ( e.g. 'api/v1/nodes/{id}/thumbnails/medium/content' ) */
      url?: string;
    };
    nodes_TypeInfo: {
      /** @description True if this document has advanced versioning, false otherwise */
      advanced_versioning?: boolean;
      /** @description True if this object is a container */
      container?: boolean;
    };
    nodes_V2Collection: {
      /** @description Paging Information */
      paging?: components["schemas"]["nodes_V2Paging"][];
      /** @description Sorting information */
      sorting?: components["schemas"]["nodes_V2Sorting"][];
    };
    nodes_V2Columns: {
      /** @description data type */
      data_type?: number;
      /** @description key */
      key?: string;
      /** @description name */
      name?: string;
      /** @description sort_key */
      sort_key?: string;
    };
    nodes_V2Data: {
      /** @description columns */
      columns?: components["schemas"]["nodes_V2Columns"][];
      /** @description Properties */
      properties?: components["schemas"]["nodes_V2Properties"][];
    };
    nodes_V2ReleaseData: {
      /** @description columns */
      columns?: components["schemas"]["nodes_V2Columns"][];
      /** @description Properties */
      properties?: components["schemas"]["nodes_V2ReleaseProperties"][];
    };
    nodes_ListContentsData: {
      /** @description Properties */
      properties?: components["schemas"]["nodes_ListContentsProperties"][];
    };
    nodes_V2DataPost: {
      /** @description Properties */
      properties?: components["schemas"]["nodes_V2Properties"][];
    };
    nodes_V2SystemAttributesDataPost: {
      /** @description Properties */
      properties?: components["schemas"]["nodes_V2Properties"][];
      /** @description System Attributes */
      system_attributes?: components["schemas"]["nodes_V2SystemAttributes"][];
    };
    nodes_V2DataLinks: {
      data?: components["schemas"]["nodes_V2Links"][];
    };
    nodes_V2Empty: {
      /** @description results */
      results?: components["schemas"]["nodes_V2EmptyResults"][];
      /** @description links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
    };
    nodes_V2EmptyResults: Record<string, any>;
    nodes_V2Links: {
      /** @description Self link */
      self?: components["schemas"]["nodes_V2Link"][];
    };
    nodes_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    nodes_V2Paging: {
      /** @description limit */
      limit?: number;
      /** @description links */
      links?: Record<string, any>;
      /** @description page */
      page?: number;
      /** @description page total */
      page_total?: number;
      /** @description range max */
      range_max?: number;
      /** @description range min */
      range_min?: number;
      /** @description total count */
      total_count?: number;
    };
    nodes_V2Properties: {
      /** @description Whether or not this item uses standard or advanced versioning */
      advanced_versioning?: boolean;
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description (Can be time-zone aware) The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["nodes_DescriptionMultilingual"];
      /**
       * Format: date
       * @description External create date
       */
      external_create_date?: string;
      /** @description External identity */
      external_identity?: string;
      /** @description External identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date
       */
      external_modify_date?: string;
      /** @description External source */
      external_source?: string;
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description Globally unique id */
      guid?: string;
      /** @description Indicates if the item is hidden */
      hidden?: boolean;
      /** @description The item's icon */
      icon?: string;
      /** @description The item's icon (large) */
      icon_large?: string;
      /** @description The item's unique object ID */
      id?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["nodes_NameMultilingual"];
      /** @description The name of the owner of this item */
      owner?: string;
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description (Can be time-zone aware) The date on which the item was reserved */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description The item's status */
      status?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description TRUE if this item has versionable content, FALSE otherwise */
      versionable?: boolean;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    nodes_V2ReleaseProperties: {
      /** @description Whether or not this item uses standard or advanced versioning */
      advanced_versioning?: boolean;
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description (Can be time-zone aware) The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["nodes_DescriptionMultilingual"];
      /**
       * Format: date
       * @description External create date
       */
      external_create_date?: string;
      /** @description External identity */
      external_identity?: string;
      /** @description External identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date
       */
      external_modify_date?: string;
      /** @description External source */
      external_source?: string;
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description Globally unique id */
      guid?: string;
      /** @description Indicates if the release/revision has an associated Generation */
      has_generation?: boolean;
      /** @description Indicates if the item is hidden */
      hidden?: boolean;
      /** @description The item's icon */
      icon?: string;
      /** @description The item's icon (large) */
      icon_large?: string;
      /** @description The item's unique object ID */
      id?: number;
      /** @description Indicates if this is a non-modifiable release/revision */
      locked?: boolean;
      /**
       * Format: date-time
       * @description The date when the release/revision was locked
       */
      locked_date?: string;
      /** @description The ID of the user who locked this release/revision */
      locked_user_id?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["nodes_NameMultilingual"];
      /** @description The name of the owner of this item */
      owner?: string;
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description The number of the release */
      release?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description (Can be time-zone aware) The date on which the item was reserved */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description The number of the revision */
      revision?: number;
      /** @description The item's status */
      status?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description TRUE if this item has versionable content, FALSE otherwise */
      versionable?: boolean;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    nodes_ListContentsProperties: {
      /** @description The ID of the volume to which this item belongs */
      volume_id?: number;
      /** @description The item's unique object ID */
      id?: number;
      /** @description The object ID of the item's parent */
      parent_id?: number;
      /** @description The name of the item */
      name?: string;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description Description of the item */
      description?: string;
      /** @description (Can be time-zone aware) The date that the item was created */
      create_date?: string;
      /** @description The ID of the user who created the item */
      create_user_id?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The ID of the user who modified the item */
      modify_user_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description The ID of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description (Can be time-zone aware) The date on which the item was reserved */
      reserved_date?: string;
      /** @description The item's order (order 0 is Master) */
      order?: number;
      /** @description The item's icon */
      icon?: string;
      /** @description Indicates if the item is hidden */
      hidden?: boolean;
      /** @description The item's file size (in bytes) */
      size?: number;
      /** @description The item's MIME type */
      mime_type?: string;
      /** @description The item's original ID */
      original_id?: number;
    };
    nodes_V2SystemAttributes: {
      /** @description A sample System Attribute */
      attribute_key?: string;
    };
    nodes_V2ResponseCollection: {
      /** @description Results */
      results?: components["schemas"]["nodes_V2Result"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2Links"][];
    };
    nodes_V2ResponseElement: {
      /** @description Results */
      results?: components["schemas"]["nodes_V2Result"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
    };
    nodes_V2ResponseElementPost: {
      /** @description Results */
      results?: components["schemas"]["nodes_V2ResultPost"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
    };
    nodes_V2ResponseElementSystemAttributesPost: {
      /** @description Results */
      results?: components["schemas"]["nodes_V2SystemAttributesResultPost"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
    };
    nodes_V2Result: {
      /** @description Data */
      data?: components["schemas"]["nodes_V2Data"][];
    };
    nodes_V2ReleaseResult: {
      /** @description Data */
      data?: components["schemas"]["nodes_V2ReleaseData"][];
    };
    nodes_ListContentsResult: {
      /** @description Data */
      data?: components["schemas"]["nodes_ListContentsData"][];
    };
    nodes_V2ResultPost: {
      /** @description Data */
      data?: components["schemas"]["nodes_V2DataPost"][];
    };
    nodes_V2SystemAttributesResultPost: {
      /** @description Data */
      data?: components["schemas"]["nodes_V2SystemAttributesDataPost"][];
    };
    nodes_V2Sort: Record<string, any>;
    nodes_V2Sorting: {
      sort?: components["schemas"]["nodes_V2Sort"][];
    };
    nodes_V2ResponseNodesActions: {
      /** @description Results */
      results?: components["schemas"]["nodes_V2NodeActionsId"][];
      /** @description Links */
      links?: components["schemas"]["nodes_V2Links"][];
    };
    nodes_V2NodeActionsId: {
      /** @description ID */
      "<id>"?: components["schemas"]["nodes_V2NodeActionsData"][];
    };
    nodes_V2NodeActionsData: {
      /** @description Data */
      data?: components["schemas"]["nodes_V2Actions"][];
      /** @description Map */
      map?: Record<string, any>;
      /** @description Order */
      order?: string;
    };
    nodes_V2Actions: {
      /** @description Self link */
      "<action>"?: components["schemas"]["nodes_V2Link"][];
    };
    nodes_v2ResponseUpdateCollection: {
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["nodes_v2ResponseUpdateCollectionData"][];
    };
    nodes_v2ResponseUpdateCollectionData: {
      /** @description Update collection results */
      data?: components["schemas"]["nodes_V2UpdateCollectionStatus"][];
    };
    nodes_V2UpdateCollectionStatus: {
      /** @description Update collection results */
      status?: components["schemas"]["nodes_V2UpdateCollectionStatusDetails"][];
    };
    nodes_V2UpdateCollectionStatusDetails: {
      /** @description No of items failed to add or remove from collection */
      error_count?: number;
      /** @description No of items successfully added or removed from collection */
      success_count?: number;
      /** @description Total number of items sent as apart of the request */
      total_count?: number;
      /** @description No of items failed to add or remove from collection */
      errors?: components["schemas"]["nodes_V2UpdateCollectionErrors"][];
    };
    nodes_V2UpdateCollectionErrors: {
      /** @description Id of node to added or removed from collection */
      id?: number;
      /** @description name of node to added or removed from collectionn */
      name?: string;
      /** @description Error occurend while adding or removing the node in collection */
      error?: string;
    };
    nodes_DoctemplatesInfo: {
      /** @description Links */
      links?: components["schemas"]["nodes_V2DataLinks"][];
      results?: components["schemas"]["nodes_TemplateTypeInfo"][];
    };
    nodes_TemplateTypeInfo: {
      /** @description specifies whether template type is container or not */
      container?: boolean;
      /** @description This parameter specifies whether templates are available or not. This parameter will be available only when group_by request parameter is available */
      hasTemplates?: boolean;
      /** @description Name of the template type. For example: Document */
      name?: string;
      /** @description This response parameter specifies the list of recently used templates */
      recentlyUsedTemplates?: components["schemas"]["nodes_TemplateInfo"][];
      /** @description Subtype of the template type. For example: 144 */
      subtype?: number;
      /** @description This response parameter will be available only when group_by request parameter is not available */
      templates?: components["schemas"]["nodes_TemplateInfo"][];
      /** @description This response parameter will be available only when group_by request parameter is available */
      templatesGroup?: components["schemas"]["nodes_TemplateTypeByClassInfo"][];
    };
    nodes_TemplateTypeByClassInfo: {
      /** @description classification id */
      id?: number;
      /** @description Name of the Classification */
      name?: string;
      /** @description Templates grouped by particular classification */
      templates?: components["schemas"]["nodes_TemplateInfo"][];
    };
    nodes_TemplateInfo: {
      /** @description Data ID of the template */
      id?: number;
      /** @description Specifies whether DPWizard module is available or not */
      isDPWizardAvailable?: boolean;
      /** @description mime type of the template */
      mime_type?: string;
      /** @description Name of the template */
      name?: string;
      /**
       * Format: date
       * @description Recently used date ( This field will be available only for recently used templates)
       */
      recentlyUsedDate?: string;
      /** @description Exact size of the template */
      size?: string;
      /** @description Formatted size of the template */
      sizeformatted?: number;
      /** @description Subtype of the template. For example: 144 */
      type?: number;
    };
    nodes_CellMetadataData: Record<string, any>;
    nodes_CellMetadataDefinitions: Record<string, any>;
    nodes_V1DataPost: {
      /** @description Properties */
      Properties?: components["schemas"]["nodes_V1Properties"][];
    };
    nodes_V1Properties: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description (Can be time-zone aware) The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["nodes_DescriptionMultilingual"];
      /**
       * Format: date
       * @description External create date
       */
      external_create_date?: string;
      /** @description External identity */
      external_identity?: string;
      /** @description External identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date
       */
      external_modify_date?: string;
      /** @description External source */
      external_source?: string;
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description Globally unique id */
      guid?: string;
      /** @description The item's icon */
      icon?: string;
      /** @description The item's icon (large) */
      icon_large?: string;
      /** @description The item's unique object ID */
      id?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["nodes_NameMultilingual"];
      /** @description The name of the owner of this item */
      owner?: string;
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description (Can be time-zone aware) The date on which the item was reserved */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description TRUE if this item has versionable content, FALSE otherwise */
      versionable?: boolean;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    nodes_NameMultilingual: {
      /** @description Name in English */
      en?: string;
      /** @description Name auf Deutsch */
      de?: string;
    };
    nodes_DescriptionMultilingual: {
      /** @description Description in English */
      en?: string;
      /** @description Beschreibung in Deutsch */
      de?: string;
    };
    notifications_notification_interests_node: {
      /** @description Results */
      results?: components["schemas"]["notifications_V2Result"][];
      /** @description Links */
      links?: components["schemas"]["notifications_V2DataLinks"][];
    };
    notifications_V2Result: {
      /** @description Data */
      data?: components["schemas"]["notifications_datainterests"][];
    };
    notifications_datainterests: {
      /** @description interests */
      interests?: components["schemas"]["notifications_interests"][];
    };
    notifications_interests: {
      /** @description interests */
      id?: number;
      /** @description interests */
      interest?: string;
      /** @description interests */
      report?: number;
    };
    notifications_V2DataLinks: {
      data?: components["schemas"]["notifications_V2Links"][];
    };
    notifications_V2Links: {
      /** @description Self link */
      self?: components["schemas"]["notifications_V2Link"][];
    };
    notifications_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    notifications_set_notification_interests_node: {
      /** @description Results */
      results?: components["schemas"]["notifications_V2EmptyResults"][];
      /** @description Links */
      links?: components["schemas"]["notifications_V2DataLinks"][];
    };
    notifications_V2EmptyResults: Record<string, any>;
    permissions_V2DataPermissions: {
      /** @description permissions */
      permissions?: components["schemas"]["permissions_V2Permissions"][];
    };
    permissions_V2Permissions: {
      /** @description The permissions associated with this right */
      permissions?: string;
      /** @description The ID of the user/group associated with this right */
      right_id?: number;
      /**
       * @description The type of right
       * @enum {string}
       */
      type?: "owner" | "group" | "public" | "custom";
    };
    permissions_V2ResponsePermissions: {
      /** @description Results */
      results?: components["schemas"]["permissions_V2ResultPermissions"][];
      /** @description Links */
      links?: components["schemas"]["permissions_V2DataLinks"][];
    };
    permissions_V2ResponsePermission: {
      /** @description Results */
      results?: components["schemas"]["permissions_V2ResultPermissions"][];
      /** @description Links */
      links?: components["schemas"]["permissions_V2DataLinks"][];
    };
    permissions_V2ResultPermissions: {
      /** @description Data */
      data?: components["schemas"]["permissions_V2DataPermissions"][];
    };
    permissions_V2DataLinks: {
      data?: components["schemas"]["permissions_V2Links"][];
    };
    permissions_V2Links: {
      /** @description Self link */
      self?: components["schemas"]["permissions_V2Link"][];
    };
    permissions_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    permissions_V2EmptyResponse: {
      links?: components["schemas"]["permissions_V2DataLinks"][];
      results?: components["schemas"]["permissions_V2EmptyResults"][];
    };
    permissions_V2EmptyResults: Record<string, any>;
    ping_rest_api: {
      /** @description The build number of the REST API */
      build?: number;
      /** @description The base HREF URL */
      href?: string;
      /** @description The version of the REST API */
      version?: number;
    };
    processes_ProcessInfo: {
      /** @description The id of the initiated process */
      process_id: number;
    };
    processes_WorkflowDefinitionInfo: {
      results?: components["schemas"]["processes_WorkflowDefinitionResults"];
    };
    workflow_Process_TaskListResults: {
      data?: components["schemas"]["workflow_Process_TaskListDefinition"];
    };
    workflow_Process_TaskListDefinition: {
      /** @description The array contains the attachment details of the workflow instance */
      attachments?: components["schemas"]["workflow_Process_TaskList_attachments"];
      /** @description The array contains the data packages activated for the workflow map */
      data_packages?: components["schemas"]["workflow_Process_TaskList_WorkflowDefinitionDataPackage"][];
      step_list?: {
        completed?: components["schemas"]["workFlow_Process_TaskInfo"][];
        current?: components["schemas"]["workFlow_Process_TaskInfo"][];
        next?: components["schemas"]["workFlow_Process_TaskInfo"][];
      };
      wf_details?: components["schemas"]["workFlow_Details"];
      permissions?: components["schemas"]["workflow_Permissions"];
    };
    /** @description Contains Permisions that logged in user have on the Workflow */
    workflow_Permissions: {
      /** @description check if logged in user have permission to archive the workflow */
      Archive?: boolean;
      /** @description check if logged in user have permission to change attributes of the workflow */
      ChangeAttr?: boolean;
      /** @description check if logged in user have permission to Delete the workflow */
      Delete?: boolean;
      /** @description check if logged in user have permission to change route of the workflow */
      ChangeRoute?: boolean;
      /** @description check if logged in user have permission to manage permissions of the workflow */
      ManagerPerms?: boolean;
      /** @description check if logged in user have permission to see details the workflow */
      SeeDetail?: boolean;
      /** @description check if logged in user have permission to stop the workflow */
      Stop?: boolean;
      /** @description check if logged in user have permission to suspend the workflow */
      Suspend?: boolean;
    };
    workflow_Process_TaskList_attachments: {
      /** @description attachment id */
      attachment_folder_id?: number;
    };
    workflow_StatusListInfo: {
      results?: components["schemas"]["workflow_StatusListResults"];
    };
    workflow_StatusListResults: components["schemas"]["workflow_StatusData"][];
    workflow_StatusData: {
      data?: components["schemas"]["workflow_StatusData_Info"];
      definitions?: {
        wfstatus?: components["schemas"]["workflowstatus_nodeDefinitions"];
      };
      definitions_map?: {
        wfstatus?: Record<string, any>;
      };
      definitions_order?: {
        wfstatus?: string[];
      };
      permissions?: components["schemas"]["workflow_Permissions"];
    };
    workflowstatus_nodeDefinitions: {
      assignee?: components["schemas"]["workflowstatus_nodeDefinitions_properties"];
      date_initiated?: components["schemas"]["workflowstatus_nodeDefinitions_properties"];
      due_date?: components["schemas"]["workflowstatus_nodeDefinitions_properties"];
      status_key?: components["schemas"]["workflowstatus_nodeDefinitions_properties"];
      step_name?: components["schemas"]["workflowstatus_nodeDefinitions_properties"];
      wf_name?: components["schemas"]["workflowstatus_nodeDefinitions_properties"];
    };
    workflowstatus_nodeDefinitions_properties: {
      allow_undefined?: boolean;
      bulk_shared?: boolean;
      default_value?: Record<string, any>;
      hidden?: boolean;
      key?: string;
      max_value?: Record<string, any>;
      min_value?: Record<string, any>;
      multi_value?: boolean;
      name?: string;
      read_only?: boolean;
      required?: boolean;
      type?: number;
      type_name?: string;
      description?: string;
      persona?: string;
      valid_values?: Record<string, any>;
      valid_values_name?: Record<string, any>;
    };
    workflow_StatusData_Info: {
      wfstatus?: components["schemas"]["workflow_StatusData_Properties"];
    };
    workflow_StatusData_Properties: {
      process_id?: number;
      assignee?: components["schemas"]["workflow_Process_TaskAssigneeInfo"][];
      parallel_steps?: components["schemas"]["workFlow_Process_TaskInfo"][];
      assignee_count?: number;
      comments_on?: boolean;
      current_assignee?: string;
      /**
       * Format: date-time
       * @description Date Initiated of workflow
       */
      date_initiated?: string;
      /**
       * Format: date-time
       * @description Due date of workflow
       */
      due_date?: string;
      status_key?: string;
      step_name?: string;
      steps_count?: number;
      subprocess_id?: number;
      /** @description Name of the Workflow */
      wf_name?: string;
      /** @description Workflow task id */
      task_id?: number;
    };
    workflow_Process_TaskListInfo: {
      results?: components["schemas"]["workflow_Process_TaskListDefinition"];
    };
    workflow_Process_TaskAssigneeInfo: {
      /** @description user ID of the assignee */
      userId?: number;
      /** @description login name of the assignee */
      loginName?: string;
      /** @description First Name of the assignee */
      firstName?: string;
      /** @description Last Name of the assignee */
      lastName?: string;
      /** @description Email address of the assignee */
      emailAddress?: string;
      /** @description Phone number of the assignee */
      phone?: string;
    };
    workflow_InitiatorInfo: {
      /** @description First Name of the Initiator */
      firstName?: string;
      /** @description Last Name of the Initiator */
      lastName?: string;
      /** @description login Name of the Initiator */
      loginName?: string;
      /** @description user Id the assignee */
      userId?: number;
    };
    workFlow_Process_TaskInfo: {
      /** @description process ID */
      process_id?: number;
      /** @description Sub process ID */
      subprocess_id?: number;
      /** @description Task Id of the Workflow */
      task_id?: number;
      /** @description Task Name of the Workflow */
      task_name?: string;
      /**
       * Format: date-time
       * @description Task Due date
       */
      task_due_date?: string;
      /**
       * Format: date-time
       * @description Task Start date
       */
      task_start_date?: string;
      /** @description Task Status */
      task_status?: string;
      /** @description The array containing the information collected for one task of the workflow */
      task_assignees?: components["schemas"]["workflow_Process_TaskAssigneeInfoObject"];
    };
    workflow_Process_TaskAssigneeInfoObject: {
      assignee?: components["schemas"]["workflow_Process_TaskAssigneeInfo"][];
      /** @description count of assignees */
      assigneeCount?: number;
      /** @description Current Assignee */
      currentAssignee?: string;
    };
    workFlow_Details: {
      /**
       * Format: date-time
       * @description Date Initiated of workflow
       */
      date_initiated?: string;
      /**
       * Format: date-time
       * @description Due date of workflow
       */
      due_date?: string;
      /** @description Initiator Details of Workflow */
      initiator?: components["schemas"]["workflow_InitiatorInfo"];
      /** @description Status of the workdflow */
      status?: string;
      /** @description Name of the Workflow */
      wf_name?: string;
      /** @description WorkFlow Instance ID */
      work_workID?: number;
    };
    processes_AuthenticationInfo: {
      /** @description This is cache id which filled will be validated at server. */
      authentication_id?: number;
      /** @description password of the assigned user, will be used for validation if authentication_id is not available. */
      password?: string;
    };
    processes_WorkflowActivitiesResults: {
      results?: components["schemas"]["processes_WorkflowActivitiesData"];
    };
    processes_WorkflowActivitiesData: {
      /** @description The array containing the information collected for one task of the workflow */
      data?: components["schemas"]["processes_WorkflowActivitiesInfo"][];
    };
    processes_WorkflowActivitiesInfo: {
      /** @description Taken task action */
      action?: string;
      action_properties?: components["schemas"]["processes_ActionPropertiesInfo"];
      /** @description Comment of task performer */
      comment?: string;
      /**
       * Format: date-time
       * @description Date of task action
       */
      date?: string;
      /** @description ID of task performer */
      user_id?: number;
    };
    processes_ActionPropertiesInfo: {
      /** @description Event property when disposition or attachment was performed */
      event?: string;
      /** @description Disposition label */
      label?: string;
      node?: components["schemas"]["processes_NodeInfo"];
      /** @description ID of assignee when send for review or forward was performed */
      user_id?: number;
    };
    processes_NodeInfo: {
      /** @description Attachment description */
      description?: string;
      /** @description Attachment node ID */
      id?: number;
      /** @description Attachment mime-type */
      "mime-type"?: string;
      /** @description Attachment name */
      name?: string;
      /** @description Attachment type */
      type?: number;
    };
    workflow_Process_TaskList_WorkflowDefinitionDataPackage: {
      /** @description Data Package ID */
      USERDATA?: number;
      /** @description Description of the workflow package */
      DESCRIPTION?: string;
      /** @description Workflow package type id */
      TYPE?: number;
      /** @description Workflow package sub-type id */
      SUBTYPE?: number;
    };
    processes_WorkflowDefinitionResults: {
      definition?: components["schemas"]["processes_WorkflowDefinition"];
    };
    processes_WorkflowDefinition: {
      /** @description The array contains the data packages activated for the workflow map */
      data_packages?: components["schemas"]["processes_WorkflowDefinitionDataPackage"][];
      /** @description The array contains the tasks available in the workflow map */
      tasks?: components["schemas"]["processes_WorkflowDefinitionTask"][];
      /** @description This is the workflow map id */
      workflow_id?: number;
    };
    processes_WorkflowDefinitionDataPackage: {
      /** @description Workflow data package specific properties */
      data?: number;
      /** @description Description of the workflow package */
      description?: string;
      /** @description Workflow package type id */
      type?: number;
      /** @description Workflow package sub-type id */
      sub_type?: number;
    };
    processes_WorkflowDefinitionTask: {
      /** @description Workflow task specific properties */
      data?: number;
      /** @description Description of the workflow task */
      description?: string;
      /** @description Instructions of the workflow task */
      instructions?: string;
      /** @description Workflow task sub-type id */
      sub_type?: number;
      /** @description Workflow task id */
      task_id?: number;
      /** @description Title of the workflow task */
      title?: string;
      /** @description Workflow task type id */
      type?: number;
    };
    search_RegionInfo: {
      /** @description Regions Data */
      data?: components["schemas"]["search_RegionData"][];
    };
    search_RegionData: {
      /** @description Whether the region is displayable, which allows users to display regions on the Search Results page */
      displayable?: boolean;
      /** @description The region's display name */
      display_name?: string;
      /** @description Whether the region is a facet */
      facet?: boolean;
      /** @description The name of the region */
      name?: string;
      /** @description Whether the region is queryable, which allows users to choose the regions that appear as System Attributes on the Advanced Search Page */
      queryable?: boolean;
      /** @description Whether the region is searched automatically */
      search_by_default?: boolean;
      /** @description Whether the region is sortable */
      sortable?: boolean;
    };
    search_SliceInfo: {
      /** @description Slices Data */
      data?: components["schemas"]["search_SliceData"][];
    };
    search_SliceData: {
      /** @description Whether the slice is a default slice */
      default_slice?: boolean;
      /** @description ID of the slice */
      id?: number;
      /** @description Name of the slice */
      name?: string;
    };
    search_SearchInfo: {
      collection?: components["schemas"]["search_collectionData"];
      links?: components["schemas"]["search_linksData"];
      results?: components["schemas"]["search_resultsData"][];
    };
    search_collectionData: {
      paging?: components["schemas"]["search_pagingData"];
      searching?: components["schemas"]["search_searchingData"];
      sorting?: components["schemas"]["search_sortingData"];
    };
    search_sortingData: {
      links?: components["schemas"]["search_linksSortingData"];
      /** @description A list of region names prepended with sort direction specifying the order in which the results are sorted */
      sort?: string[];
    };
    search_linksSortingData: {
      asc_OTObjectDate?: components["schemas"]["search_searchLinksSelfData"];
      asc_OTObjectSize?: components["schemas"]["search_searchLinksSelfData"];
      desc_OTObjectDate?: components["schemas"]["search_searchLinksSelfData"];
      desc_OTObjectSize?: components["schemas"]["search_searchLinksSelfData"];
      relevance?: components["schemas"]["search_searchLinksSelfData"];
    };
    search_resultsData: {
      data?: components["schemas"]["search_dataResultsData"];
      links?: components["schemas"]["search_linksResultsData"];
      metadata?: string;
      search_result_metadata?: components["schemas"]["search_searchMetadataResultsData"];
    };
    search_searchMetadataResultsData: {
      /** @description Indicates if this is a versioned object or not */
      current_version?: boolean;
      /** @description URL mapped location to access the result */
      object_href?: string;
      /** @description The unique identifier in the search index the result came from */
      object_id?: string;
      /** @description result style ( 264 indicates an Enterprise style result ) */
      result_type?: number;
      /** @description The node ID of the search engine that generated the result */
      source_id?: number;
      /** @description Representing the type of the version */
      version_type?: string;
    };
    search_dataResultsData: {
      properties?: components["schemas"]["search_propertiesDataResultsData"];
      regions?: string;
      versions?: components["schemas"]["search_versionsDataResultsData"];
    };
    search_versionsDataResultsData: {
      /**
       * Format: date-time
       * @description The date that the version was created
       */
      create_date?: string;
      /** @description A description of the version */
      description?: string;
      /**
       * Format: date-time
       * @description The date the file was created
       */
      file_create_date?: string;
      /**
       * Format: date-time
       * @description The date the file was last modified
       */
      file_modify_date?: string;
      /** @description The file name of the version */
      file_name?: string;
      /** @description The file size of the version */
      file_size?: number;
      /** @description The file extension of the version */
      file_type?: string;
      /** @description The ID of the version */
      id?: number;
      /** @description Indicates if this is a non-modifiable version */
      locked?: boolean;
      /**
       * Format: date-time
       * @description The date of the version where locked
       */
      locked_date?: string;
      /** @description The ID of the user who locked this version */
      locked_user_id?: number;
      /** @description The mime type of the object */
      mime_type?: string;
      /**
       * Format: date-time
       * @description The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The name of the file */
      name?: string;
      /** @description The user ID of the versionâ€™s owner */
      owner_id?: number;
      /** @description The storage provider ID */
      provider_id?: number;
      /** @description The version ID */
      version_id?: number;
      /** @description The version number of the node */
      version_number?: number;
      /** @description The number of the source version */
      version_number_major?: number;
      /** @description The number of the edited version */
      version_number_minor?: number;
      /** @description Version number of the node */
      version_number_name?: string;
    };
    search_propertiesDataResultsData: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /**
       * Format: data-time
       * @description The date that the item was created
       */
      create_date?: string;
      /** @description The ID of the user who created the item */
      create_user_id?: number;
      /** @description A description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["search_descriptionMultilingual"];
      /**
       * Format: date
       * @description The external create date
       */
      external_create_date?: string;
      /** @description The external identity */
      external_identity?: string;
      /** @description The external identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description The external modify date
       */
      external_modify_date?: string;
      /** @description The external source */
      external_source?: string;
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description The item's unique object ID */
      id?: number;
      /** @description The mime type of the object */
      mime_type?: string;
      /**
       * Format: date-time
       * @description The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The ID of the user who modified the item */
      modify_user_id?: number;
      /** @description  The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["search_nameMultilingual"];
      /** @description The name of the owner of this item */
      owner?: string;
      /** @description  The group ID of the owner of this item */
      owner_group_id?: number;
      /** @description The user ID of the owner of this item */
      owner_user_id?: number;
      /** @description The object ID of the item's parent */
      parent_id?: number;
      /** @description This is the permissions level */
      permissions_model?: string;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /**
       * Format: date
       * @description The date on which the item was reserved
       */
      reserved_date?: string;
      /** @description Indicates if this item is shared externally or not */
      reserved_shared_collaboration?: boolean;
      /** @description The ID of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description A short description of the item */
      short_summary?: string;
      /** @description The size of this item */
      size?: number;
      /** @description The size of this item with an appropriate units based on type */
      size_formatted?: string;
      /** @description A description of the item */
      summary?: string;
      /** @description An ID representing the type of the object */
      type?: number;
      /** @description The name of the node's object type */
      type_name?: string;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description ID of the volume to which this item belongs */
      volume_id?: number;
    };
    search_formData: {
      /** @description The ID of the form */
      id?: number;
      /** @description The display name of the form */
      name?: string;
      /** @description Whether or not the form is writeable by the user */
      read_only?: boolean;
    };
    search_recentFormData: {
      /**
       * Format: date-time
       * @description The date the form was last accessed by the user
       */
      accessed?: string;
      /** @description The ID of the form */
      id?: number;
      /** @description The display name of the form */
      name?: string;
    };
    search_searchbarData: {
      full_text?: components["schemas"]["search_fulltextData"];
    };
    search_fulltextData: {
      /** @description Search Mode options */
      lookfor?: string;
      /** @description The kind of related terms included in the search */
      modifier?: string;
    };
    search_sliceData: {
      /** @description The ID of the slice. Typically a number, but can be a 'From here' slice, which has a number that represents the slice ID, a vertical bar, then a number than represents the container ID the search is constrained to, eg: '3423|2000' */
      id?: string;
      /** @description The display name of the slice */
      name?: string;
      /** @description Whether or not the slice is the default selected for UI dropdowns */
      selected?: boolean;
    };
    search_descriptionMultilingual: {
      /** @description Description in English */
      en?: string;
      /** @description Beschreibung in Deutsch */
      de?: string;
    };
    search_nameMultilingual: {
      /** @description Name in English */
      en?: string;
      /** @description Name auf Deutsch */
      de?: string;
    };
    search_linksResultsData: {
      ancestors?: components["schemas"]["search_allLinksResultsData"][];
      ancestors_nodes?: components["schemas"]["search_allLinksResultsData"][];
      parent?: components["schemas"]["search_allLinksResultsData"];
      parent_nodes?: components["schemas"]["search_allLinksResultsData"];
    };
    search_allLinksResultsData: {
      href?: string;
      name?: string;
    };
    search_searchingData: {
      /** @description The search cacheID for the result set */
      cache_id?: number;
      facets?: components["schemas"]["search_facetsSearchingData"];
      /** @description A title for the result set */
      result_title?: string;
      /** @description A list of region names specifying the order in which to display the regions. There can be duplicates */
      regions_order?: string[];
      regions_metadata?: components["schemas"]["search_regionsMetadataData"];
    };
    search_regionsMetadataData: {
      OTObjectDate?: components["schemas"]["search_regionsMetadataSelfData"];
      OTLocation?: components["schemas"]["search_regionsMetadataSelfData"];
      OTMIMEType?: components["schemas"]["search_regionsMetadataSelfData"];
      OTName?: components["schemas"]["search_regionsMetadataSelfData"];
      OTObjectSize?: components["schemas"]["search_regionsMetadataSelfData"];
    };
    search_regionsMetadataSelfData: {
      persona?: string;
      name?: string;
      type?: number;
    };
    search_facetsSearchingData: {
      available?: components["schemas"]["search_availableFacetsSearchingData"][];
    };
    search_availableFacetsSearchingData: {
      count?: number;
      count_exceeded?: boolean;
      display_name?: string;
      facet_items?: components["schemas"]["search_facetItems"][];
      name?: string;
      type?: string;
    };
    search_facetItems: {
      count?: number;
      display_name?: string;
      value?: string;
    };
    search_pagingData: {
      /** @description Maximum number of items returned per page */
      limit?: number;
      /** @description Number of the current page */
      page?: number;
      /** @description Total number of pages available */
      page_total?: number;
      /** @description Number of the ending item for this page */
      range_max?: number;
      /** @description Number of the starting item for this page */
      range_min?: number;
      /** @description The header for the result page */
      result_header_string?: string;
      /** @description Total number of items available */
      total_count?: number;
    };
    search_searchLinksData: {
      self?: components["schemas"]["search_searchLinksSelfData"];
    };
    search_searchLinksSelfData: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    search_linksData: {
      data?: components["schemas"]["search_searchLinksData"];
    };
    search_membersInfoData: {
      personal_search_forms?: components["schemas"]["search_formData"][];
      recent_search_forms?: components["schemas"]["search_recentFormData"][];
      search_bar_settings?: components["schemas"]["search_searchbarData"];
      system_search_forms?: components["schemas"]["search_formData"][];
      slices?: components["schemas"]["search_sliceData"][];
    };
    search_templateDisplayData: {
      data?: components["schemas"]["search_templateDisplayDataData"];
    };
    search_templateDisplaySettings: {
      /** @description Number of results to return per page */
      page_size?: number;
      /** @description Whether or not to show the result's keywords */
      show_keywords?: boolean;
      /** @description Whether or not to show the result's location path */
      show_location_path?: boolean;
      /** @description Key value indicating which display style to use */
      style_id?: number;
      display_regions?: components["schemas"]["search_displayRegionsObject"];
      facet_regions?: components["schemas"]["search_facetRegionsObject"];
      sort_regions?: components["schemas"]["search_sortRegionsObject"];
      summary_description?: components["schemas"]["search_summDescObject"];
    };
    search_templateProperties: {
      /** @description dataID of the template */
      id?: number;
      /** @description Display name of the template */
      name?: string;
      /** @description ID of the data type of the template */
      type?: number;
      /** @description Display name of the data type of the template */
      type_name?: string;
    };
    search_templateDisplayDataData: {
      display?: components["schemas"]["search_templateDisplaySettings"];
      properties?: components["schemas"]["search_templateProperties"];
    };
    search_availableSelectedObject: {
      /** @description ID string for the option */
      key?: string;
      /** @description Display name for the option */
      name?: string;
    };
    search_displayRegionsObject: {
      /** @description List of available display regions for the template */
      available?: components["schemas"]["search_availableSelectedObject"][];
      /** @description Ordered list of selected display regions for the template */
      selected?: components["schemas"]["search_availableSelectedObject"][];
    };
    search_facetRegionsObject: {
      /** @description List of available facet regions for the template */
      available?: components["schemas"]["search_availableSelectedObject"][];
      /** @description Ordered list of selected facet regions for the template */
      selected?: components["schemas"]["search_availableSelectedObject"][];
    };
    search_sortRegionsObject: {
      /** @description List of available sort regions for the template */
      available?: components["schemas"]["search_availableSelectedObject"][];
      /** @description Ordered list of selected sort regions for the template */
      selected?: components["schemas"]["search_availableSelectedObject"][];
    };
    search_summDescObject: {
      /** @description List of available summary and description options */
      available?: components["schemas"]["search_availableSelectedObject"][];
      /** @description The selected summary and description option */
      selected?: string;
    };
    search_MembersInfo: {
      links?: components["schemas"]["search_linksData"];
      results?: components["schemas"]["search_membersInfoData"];
    };
    search_TemplateDisplayInfo: {
      links?: components["schemas"]["search_linksData"];
      results?: components["schemas"]["search_templateDisplayData"];
    };
    search_WorkflowDefinitionResults: {
      definition?: components["schemas"]["search_WorkflowDefinition"];
    };
    search_WorkflowDefinition: {
      /** @description The array contains the data packages activated for the workflow map */
      data_packages?: components["schemas"]["search_WorkflowDefinitionDataPackage"][];
      /** @description The array contains the tasks available in the workflow map */
      tasks?: components["schemas"]["search_WorkflowDefinitionTask"][];
      /** @description This is the workflow map id */
      workflow_id?: number;
    };
    search_WorkflowDefinitionDataPackage: {
      /** @description Workflow data package specific properties */
      data?: number;
      /** @description Description of the workflow package */
      description?: string;
      /** @description Workflow package type id */
      type?: number;
      /** @description Workflow package sub-type id */
      sub_type?: number;
    };
    search_WorkflowDefinitionTask: {
      /** @description Workflow task specific properties */
      data?: number;
      /** @description Description of the workflow task */
      description?: string;
      /** @description Instructions of the workflow task */
      instructions?: string;
      /** @description Workflow task sub-type id */
      sub_type?: number;
      /** @description Workflow task id */
      task_id?: number;
      /** @description Title of the workflow task */
      title?: string;
      /** @description Workflow task type id */
      type?: number;
    };
    servermessages_results: {
      messages?: components["schemas"]["servermessages_message"][];
      /** @description The amount of time a message should appear on screen (in milliseconds) */
      display_interval?: number;
      /** @description A flag that indicates if message URLs are relative */
      relative_url?: boolean;
    };
    servermessages_message: {
      /** @description The text of the system message to be displayed */
      message?: string;
      /** @description (Optional) The URL to accompany the message */
      url?: string;
    };
    serverinfo_results: {
      mobile?: components["schemas"]["serverinfo_mobile"][];
      server?: components["schemas"]["serverinfo_server"][];
      viewer?: components["schemas"]["serverinfo_viewer"][];
      sessions?: components["schemas"]["serverinfo_sessions"][];
    };
    server_PrivilegeV2Collection: {
      /** @description Filtering information */
      filtering?: {
        filter?: components["schemas"]["volumes_V2FilterObj"][];
      };
      /** @description Results */
      results?: components["schemas"]["server_V2Privilege"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    server_PrivilegeV2UpdateCollection: {
      /** @description Results */
      results?: components["schemas"]["server_V2PrivilegeUpdateResults"][];
    };
    server_V2PrivilegeUpdateResults: {
      /** @description Data */
      data?: components["schemas"]["server_V2PrivilegeUpdateData"][];
    };
    server_V2PrivilegeUpdateData: {
      /** @description The ID to be used when making /v2/members/* calls. Will be null if the privilege is unrestricted */
      id?: number;
    };
    server_V2Privilege: {
      /** @description A flag that indicates if the privilege was deleted */
      deleted?: boolean;
      /** @description The ID to be used when making /v2/members/* calls. Will be null if the privilege is unrestricted */
      id?: number;
      /** @description The name of the privilege */
      name?: string;
      /** @description If the privilege is an object privilege, this will be the path to the icon. If the privilege is a usage privilege, the value will be null */
      object_icon?: string;
      /** @description If the privilege is an object privilege, this will be the name of the associate subtype. If the privilege is a usage privilege, the value will be null */
      object_name?: string;
      /** @description If the privilege is an object privilege, this will be the associate subtype. If the privilege is a usage privilege, the value will be null */
      object_type?: number;
      /** @description The UAPI type of the privilege. This will be the value of UAPI.FACTORY */
      type?: number;
      /** @description The name of the UAPI type of the privilege. */
      type_name?: string;
      /** @description If the privilege is a usage privilege, this will be the internal ID of the privilege. If the privilege is an object privilege, the value will be null */
      usage_id?: string;
      /** @description If the privilege is a usage privilege, this will be the name of the privilege. If the privilege is an object privilege, the value will be null */
      usage_name?: string;
      /** @description If the privilege is a usage privilege, this will be the internal ID of the privilege's usage type. If the privilege is an object privilege, the value will be null */
      usage_type?: string;
      /** @description If the privilege is a usage privilege, this will be the name of the usage type of the privilege. If the privilege is an object privilege, the value will be null */
      object_type_name?: string;
    };
    serverinfo_language: {
      /** @description A flag that indicates if this the default language */
      default?: boolean;
      /** @description The internal language code for the language */
      language_code?: string;
      /** @description The display name of the language */
      display_name?: string;
    };
    serverinfo_sessions: {
      /** @description A flag that indicates if this the session expiration is enabled */
      enabled?: boolean;
      /** @description A flag that indicates if the session should expire after a set time after the last request has been made */
      expire_after_last_request?: boolean;
      /** @description A flag that indicates if the session should expire after a set time after logging in */
      expire_after_last_login?: boolean;
      /** @description When the session should expire (in milliseconds) */
      session_timeout?: number;
      /** @description The amount of time a session can be inactive before an alert should appear (in milliseconds) */
      session_inactivity?: number;
      /** @description The amount of time that the user has to continue or end their session in the session timeout alert (in milliseconds) */
      session_reaction_time?: number;
      /** @description A portion of the URL to be used in order to allow the user to log out */
      logout_url?: string;
    };
    serverinfo_mobile: {
      /** @description A flag that indicates if users can download objects to their mobile device */
      offline_use?: boolean;
    };
    serverinfo_server: {
      /** @description The base Content Server URL */
      url?: string;
      /** @description Indicates the type of character encoding used by Content Server, as specified by one of the Character Encoding Constants */
      character_encoding?: number;
      /** @description The release and update version of Content Server (for example, 16.2.3) */
      version?: string;
      /** @description Indicates the locale suffix used by Content Server, for example, _en_US */
      current_locale_suffix?: string;
      /** @description A flag that indicates if domain access is enabled in Content Server */
      domain_access_enabled?: boolean;
      /** @description A flag which indicates if the time zone offset setting is enabled in Content Server */
      time_zone_offset_enabled?: boolean;
      /** @description Indicates the language code in use in Content Server */
      language_code?: string;
      /** @description List of all display languages currently enabled in Content Server */
      languages?: components["schemas"]["serverinfo_language"][];
      /** @description List of all metadata languages currently enabled in Content Server */
      metadata_languages?: components["schemas"]["serverinfo_language"][];
      /**
       * Format: date-time
       * @description Content Server's current date and time that follows ISO 8601 format, which is YYYY-MM-DDThh:mm:ss
       */
      current_date?: string;
      /** @description List of MIME types which are forced to be downloaded before they are opened in the browser window */
      force_download_for_mime_types?: string[];
      /** @description A flag which indicates if the Advanced Versioning setting is enabled in Content Server */
      advanced_versioning?: boolean;
      /** @description A flag which indicates if the Enhanced Advanced Versioning setting is enabled in Content Server */
      enhanced_advanced_versioning?: boolean;
      /** @description A flag which indicates if the Extended ECM for Government setting for mobile is enabled in Content Server */
      xecmgovInstalled?: boolean;
    };
    serverinfo_viewer: {
      content_suite?: components["schemas"]["serverinfo_cs_viewer"][];
    };
    serverinfo_cs_viewer: {
      /** @description Boolean indicating if the Content Suite Viewer is enabled */
      enabled?: boolean;
      /** @description List of MIME types which are supported by the Content Suite Viewer */
      supported_mime_types?: string[];
    };
    tabs_CategoriesTabInfo: {
      data?: components["schemas"]["tabs_Data"];
      definitions?: components["schemas"]["tabs_Definitions"];
      definitions_map?: components["schemas"]["tabs_DefinitionsMap"];
      /** @description Ordering of the categories in the categories tab */
      definitions_order?: string[];
    };
    tabs_Data: Record<string, any>;
    tabs_Definitions: Record<string, any>;
    tabs_DefinitionsMap: Record<string, any>;
    tklattribute_ValidValues: {
      /** @description Attribute Key */
      attribute_key?: string[];
    };
    tklattribute_DefaultValue: {
      /** @description Attribute Value */
      attribute_key?: string;
    };
    tklattribute_V2ResponseElement: {
      /** @description Results */
      results?: components["schemas"]["tklattribute_V2Result"][];
    };
    tklattribute_V2Result: {
      /** @description DefaultValues */
      data?: components["schemas"]["tklattribute_DefaultValue"][];
    };
    validation_CheckCategoriesInfo: {
      results?: components["schemas"]["validation_CheckCategoriesItem"][];
    };
    validation_CheckCategoriesItem: {
      /** @description The id of the node whose subtype enforces required attributes */
      id?: number;
    };
    validation_CheckNodesInfo: {
      results?: components["schemas"]["validation_CheckNodesItem"][];
    };
    validation_CheckNamesInfo: {
      results?: components["schemas"]["validation_CheckNamesItem"][];
    };
    validation_CheckNamesItem: {
      /** @description The id of the node which was matched on the parent by name */
      id?: number;
      /** @description The name of the node which was matched on the parent by name */
      name?: string;
    };
    validation_CheckNodesItem: {
      /** @description If the node exists (ie. there was a name collision), this is the node's ID, otherwise it is null */
      id?: number;
      /** @description The name that was input as part of the body parameter to this call */
      name?: string;
      /** @description If the node exists (ie. there was a name collision), this is the node's subtype, otherwise it is the suggested subtype for the name (based on file extension) */
      type?: number;
      /** @description Whether the node supports versions */
      versioned?: boolean;
    };
    versions_VersionsInfo: {
      data?: components["schemas"]["versions_VersionInfo"][];
      definitions?: components["schemas"]["versions_Definitions"];
    };
    versions_OneVersionInfo: {
      data?: components["schemas"]["versions_VersionInfo"][];
      definitions?: components["schemas"]["versions_Definitions"];
    };
    versions_CategoryInfo: {
      /** @description Category information */
      data?: components["schemas"]["versions_CategoryInfoData"][];
      definitions?: components["schemas"]["versions_Definitions"];
      /** @description Default order of the fields defined in data */
      definitions_order?: string[];
      definitions_map?: components["schemas"]["versions_DefinitionsMap"];
    };
    versions_LatestVersionInfo: {
      data?: components["schemas"]["versions_VersionInfo"][];
      definitions?: components["schemas"]["versions_Definitions"];
    };
    versions_DownloadVersion: {
      /** @description The contents of the given version of the given node */
      data?: string;
    };
    versions_DownloadNamedVersion: {
      /** @description The contents of the given version of the given node */
      data?: string;
    };
    versions_VersionThumbnails: {
      /** @description Image size information */
      data?: Record<string, any>;
      definitions?: components["schemas"]["versions_Definitions"];
      definitions_map?: components["schemas"]["versions_DefinitionsMap"];
      /** @description The order items should be displayed in. */
      definitions_order?: string[];
    };
    versions_DownloadVersionThumbnail: {
      /** @description The given image of the given node version */
      data?: string;
    };
    versions_VersionInfo: {
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The version's creation date
       */
      create_date?: string;
      /** @description The version's description */
      description?: string;
      /**
       * Format: date
       * @description External create date. This property will not be returned if the node is a Category.
       */
      external_create_date?: string;
      /** @description External identity. This property will not be returned if the node is a Category. */
      external_identity?: string;
      /** @description External identity type. This property will not be returned if the node is a Category. */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date. This property will not be returned if the node is a Category.
       */
      external_modify_date?: string;
      /** @description External source. This property will not be returned if the node is a Category. */
      external_source?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The creation date of the file used for the version. This property will not be returned if the node is a Category.
       */
      file_create_date?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The modification date of the file used for the version. This property will not be returned if the node is a Category.
       */
      file_modify_date?: string;
      /** @description The name of the file used for the version */
      file_name?: string;
      /** @description The data size of the file used for the version */
      file_size?: number;
      /** @description The extension from the name of the file used for the version */
      file_type?: string;
      /** @description Indicates if there is a Generation associated with this version */
      has_generation?: boolean;
      /** @description The ID of the version */
      id?: number;
      /** @description Legacy */
      locked?: number;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) Legacy
       */
      locked_date?: string;
      /** @description Legacy */
      locked_user_id?: number;
      /** @description The MIME type for the version */
      mime_type?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The modification date of the version
       */
      modify_date?: string;
      /** @description The ID of the owner of the version */
      owner_id?: number;
      /** @description The name of the storage provider */
      provider_name?: string;
      /** @description The ID of the version */
      version_id?: number;
      /** @description The version number */
      version_number?: number;
      /** @description The major version number. This property will not be returned if the node is a Category. */
      version_major_number?: number;
      /** @description The minor version number. This property will not be returned if the node is a Category. */
      version_minor_number?: number;
    };
    versions_VersionActionsInfo: {
      data?: components["schemas"]["versions_ActionData"];
      definitions?: components["schemas"]["versions_Definitions"];
      definitions_map?: components["schemas"]["versions_DefinitionsMap"];
      /** @description The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order */
      definitions_order?: string[];
    };
    versions_NewVersionInfo: {
      /** @description The ID of the version */
      id?: number;
      /** @description The version number */
      version_number?: number;
    };
    versions_ActionData: Record<string, any>;
    versions_Definitions: Record<string, any>;
    versions_DefinitionsMap: Record<string, any>;
    versions_V2CategoriesResponse: {
      links?: components["schemas"]["versions_V2Links"][];
      results?: components["schemas"]["versions_V2DataCategories"][];
    };
    versions_V2DataCategories: {
      data?: components["schemas"]["versions_V2Categories"][];
    };
    versions_V2Categories: {
      categories?: components["schemas"]["versions_V2EmptyResults"][];
    };
    versions_V2DataVersions: {
      /** @description Versions */
      versions?: components["schemas"]["versions_VersionInfo"][];
    };
    versions_V2DataVersionsSingle: {
      /** @description Versions */
      versions?: components["schemas"]["versions_VersionInfo"][];
    };
    versions_V2DataVersionsAdd: {
      /** @description Properties */
      properties?: components["schemas"]["versions_V2Properties"][];
      /** @description Versions */
      versions?: components["schemas"]["versions_VersionInfo"][];
    };
    versions_V2EmptyResults: Record<string, any>;
    versions_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    versions_V2Paging: {
      /** @description Limit */
      limit?: number;
      /** @description Page */
      page?: number;
      /** @description Page Total */
      page_total?: number;
    };
    versions_V2Links: {
      /** @description Links data */
      data?: {
        /** @description self link */
        self?: components["schemas"]["versions_V2Link"][];
      };
    };
    versions_V2Collection: {
      /** @description Collection paging */
      paging?: components["schemas"]["versions_V2Paging"][];
    };
    versions_V2ResponseVersions: {
      /** @description Results */
      results?: components["schemas"]["versions_V2ResultVersions"][];
      /** @description Collection */
      collection?: components["schemas"]["versions_V2Collection"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResponseVersionsSingle: {
      /** @description Results */
      results?: components["schemas"]["versions_V2ResultVersionsSingle"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResponseVersionsAdd: {
      /** @description Results */
      results?: components["schemas"]["versions_V2ResultVersionsAdd"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResponseVersionsDelete: {
      /** @description Results */
      results?: components["schemas"]["versions_V2EmptyResults"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResponseVersionsPurge: {
      /** @description Results */
      results?: components["schemas"]["versions_V2EmptyResults"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResultVersions: {
      /** @description Data */
      data?: components["schemas"]["versions_V2DataVersions"][];
    };
    versions_V2ResultVersionsSingle: {
      /** @description Data */
      data?: components["schemas"]["versions_V2DataVersionsSingle"][];
    };
    versions_V2ResultVersionsAdd: {
      /** @description Data */
      data?: components["schemas"]["versions_V2DataVersionsAdd"][];
    };
    versions_V2Properties: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description (Can be time-zone aware) The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["versions_DescriptionMultilingual"];
      /**
       * Format: date
       * @description External create date
       */
      external_create_date?: string;
      /** @description External identity */
      external_identity?: string;
      /** @description External identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date
       */
      external_modify_date?: string;
      /** @description External source */
      external_source?: string;
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description Globally unique id */
      guid?: string;
      /** @description The item's icon */
      icon?: string;
      /** @description The item's icon (large) */
      icon_large?: string;
      /** @description The item's unique object ID */
      id?: number;
      /**
       * Format: date
       * @description (Can be time-zone aware) The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["versions_NameMultilingual"];
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description (Can be time-zone aware) The date on which the item was reserved */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description TRUE if this item has versionable content, FALSE otherwise */
      versionable?: boolean;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    versions_V2ResultRenditionsListAll: {
      data?: components["schemas"]["versions_V2ResultRenditionsByVersion"];
    };
    versions_V2ResultRenditionsByVersion: {
      /** @description Renditions information for each version */
      "<version_number>"?: components["schemas"]["versions_RenditionInfo"][];
    };
    versions_V2ResultRenditions: {
      /** @description Data */
      data?: components["schemas"]["versions_RenditionInfo"][];
    };
    versions_V2ResponseRenditions: {
      /** @description Results */
      results?: components["schemas"]["versions_V2ResultRenditions"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResponseRenditionsAdd: {
      /** @description Results */
      results?: components["schemas"]["versions_V2ResultRenditionsAdd"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResultRenditionsAdd: {
      /** @description Data */
      data?: components["schemas"]["versions_RenditionInfo"][];
    };
    versions_V2ResponseRenditionsReplace: {
      /** @description Results */
      results?: components["schemas"]["versions_V2ResultRenditionsReplace"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_V2ResultRenditionsReplace: {
      /** @description Data */
      data?: components["schemas"]["versions_RenditionInfo"][];
    };
    versions_RenditionInfo: {
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The rendition's creation date
       */
      create_date?: string;
      /**
       * Format: date
       * @description External create date. This property will not be returned if the node is a Category.
       */
      external_create_date?: string;
      /** @description External identity. This property will not be returned if the node is a Category. */
      external_identity?: string;
      /** @description External identity type. This property will not be returned if the node is a Category. */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date. This property will not be returned if the node is a Category.
       */
      external_modify_date?: string;
      /** @description External source. This property will not be returned if the node is a Category. */
      external_source?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The creation date of the file used for the rendition. This property will not be returned if the node is a Category.
       */
      file_create_date?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The modification date of the file used for the rendition. This property will not be returned if the node is a Category.
       */
      file_modify_date?: string;
      /** @description The name of the file used for the rendition */
      file_name?: string;
      /** @description The data size of the file used for the rendition */
      file_size?: number;
      /** @description The extension from the name of the file used for the rendition */
      file_type?: string;
      /** @description The ID of the rendition */
      id?: number;
      /** @description The MIME type for the rendition */
      mime_type?: string;
      /**
       * Format: date-time
       * @description (Can be time-zone aware) The modification date of the rendition
       */
      modify_date?: string;
      /** @description The type of the rendition */
      rendition_type?: string;
      /** @description The ID of the owner of the rendition */
      owner_id?: number;
      /** @description The version number of the rendition */
      version_number?: number;
      /** @description The major version number. This property will not be returned if the node is a Category. */
      version_major_number?: number;
      /** @description The minor version number. This property will not be returned if the node is a Category. */
      version_minor_number?: number;
      /** @description The name of the version number. This property will not be returned if the node is a Category. */
      version_number_name?: string;
    };
    versions_V2ResponseRenditionsDelete: {
      /** @description Results */
      results?: components["schemas"]["versions_V2EmptyResults"][];
      /** @description Links */
      links?: components["schemas"]["versions_V2Links"][];
    };
    versions_CategoryInfoData: {
      /** @description Attribute value */
      "{attribute_key}"?: string;
    };
    versions_DescriptionMultilingual: {
      /** @description Description in English */
      en?: string;
      /** @description Beschreibung in Deutsch */
      de?: string;
    };
    versions_NameMultilingual: {
      /** @description Name in English */
      en?: string;
      /** @description Name auf Deutsch */
      de?: string;
    };
    volumes_NodeInfo: {
      /** @description ID of the volume to which this item belongs */
      volume_id?: number;
      /** @description Unique identifier of this item */
      id?: number;
      /** @description ID of the parent container */
      parent_id?: number;
      /** @description Item name */
      name?: string;
      /** @description Item type, as a number */
      type?: number;
      /** @description Item description */
      description?: string;
      /**
       * Format: date-time
       * @description Date of creation
       */
      create_date?: string;
      /**
       * Format: date-time
       * @description Date of last modification
       */
      modify_date?: string;
      /** @description Is this item reserved */
      reserved?: boolean;
      /** @description ID of user that reserved this item */
      reserved_user_id?: number;
      /**
       * Format: date-time
       * @description Date this item was reserved
       */
      reserved_date?: string;
      /** @description Path to the icon for the type of this item */
      icon?: string;
      /** @description Mime type of the object */
      mime_type?: string;
      /** @description ID of original item - used when this item is a shortcut */
      original_id?: number;
      /** @description ID of user who is this item's owner */
      wnd_owner?: number;
      /** @description ID of user who created this item */
      wnd_createdby?: number;
      /**
       * Format: date-time
       * @description Date item was created
       */
      wnd_createdate?: string;
      /** @description ID of user who last modified this item */
      wnd_modifiedby?: number;
      /** @description Version of this item */
      wnd_version?: number;
      /** @description Item type, as a word */
      type_name?: string;
      /** @description Is this item a container */
      container?: boolean;
      /** @description Size of this item */
      size?: number;
      perm_see?: boolean;
      perm_see_contents?: boolean;
      perm_modify?: boolean;
      perm_modify_attributes?: boolean;
      perm_modify_permissions?: boolean;
      perm_create?: boolean;
      perm_delete?: boolean;
      perm_delete_versions?: boolean;
      perm_reserve?: boolean;
      perm_add_major_version?: boolean;
      cell_metadata?: components["schemas"]["volumes_CellMetadata"];
      menu?: string;
      /** @description Size of this item with an appropriate units based on type (i.e. 11 items or 7 KB) */
      size_formatted?: string;
      reserved_user_login?: string;
      /** @description URL for getting available actions on this item */
      action_url?: string;
      /** @description URL for getting metadata about this item's parent container */
      parent_id_url?: string;
      /** @description Actions possible on this node (only with query-parameter actions=true) */
      actions?: components["schemas"]["volumes_ActionInfo"][];
    };
    volumes_CellMetadata: {
      data?: components["schemas"]["volumes_CellMetadataData"];
      definitions?: components["schemas"]["volumes_CellMetadataDefinitions"];
    };
    volumes_InfoResults: {
      data?: components["schemas"]["volumes_Data"][];
      definitions?: components["schemas"]["volumes_InfoDefinitions"][];
      definitions_map?: components["schemas"]["volumes_DefinitionsMap"];
      /** @description The suggested order in which data for each item should be displayed */
      definitions_order?: string[];
      /** @description The maximum number of records that can be returned */
      limit?: number;
      /** @description Number of the current page */
      page?: number;
      /** @description Order by named column. Format can be sort=name, or sort=asc_name, or sort=desc_name. */
      sort?: string;
      /** @description Facets on which results are filtered */
      where_facet?: string[];
      /** @description Name on which results are filtered */
      where_name?: number;
      /** @description Types on which results are filtered */
      where_type?: number[];
    };
    volumes_DefinitionsMap: Record<string, any>;
    volumes_InfoResult: {
      addable_types?: components["schemas"]["volumes_AddableTypes"][];
      available_actions?: components["schemas"]["volumes_AvailableActions"][];
      available_roles?: components["schemas"]["volumes_AvailableRoles"][];
      data?: components["schemas"]["volumes_Data"][];
      definitions?: components["schemas"]["volumes_InfoDefinitions"][];
      /** @description The definitions that are common to all nodes */
      definitions_base?: string[];
      /** @description The suggested order in which data for each item should be displayed */
      definitions_order?: string[];
      /** @description An id representing the type of the object */
      type?: number;
      type_info?: components["schemas"]["volumes_TypeInfo"];
      /** @description The name of the type of object */
      type_name?: string;
    };
    volumes_AddableTypes: {
      /** @description A relative URL to the object's icon */
      icon?: string;
      /** @description An ID representing the type of the object */
      type?: number;
      /** @description The name of the type of object */
      type_name?: string;
    };
    volumes_AvailableActions: {
      /** @description TRUE if this action has parameters, FALSE otherwise */
      parameterless?: boolean;
      /** @description TRUE if this action does not modify data, FALSE otherwise */
      read_only?: boolean;
      /** @description The type of action */
      type?: string;
      /** @description The name of action */
      type_name?: string;
      /** @description A unique name for this action */
      webnode_signature?: string;
    };
    volumes_AvailableRoles: {
      /** @description The type of role */
      type?: string;
      /** @description The name of role */
      type_name?: string;
    };
    volumes_Data: {
      /** @description Creation date of this object */
      create_date?: string;
      /** @description The id of the user */
      create_user_id?: number;
      /** @description Description of the object */
      description?: string;
      /** @description Locale specific item description */
      description_multilingual?: components["schemas"]["volumes_DescriptionMultilingual"][];
      /** @description Global unique identifier */
      guid?: string;
      /** @description Path to the type specific icon */
      icon?: string;
      /** @description Path to the type specific large icon */
      icon_large?: string;
      /** @description A unique id for this object */
      id?: number;
      /** @description Date when this object was modified */
      modify_date?: string;
      /** @description The id of the user who modified this object */
      modify_user_id?: number;
      /** @description Name of the object */
      name?: string;
      /** @description Locale specific item name */
      name_multilingual?: components["schemas"]["volumes_NameMultilingual"][];
      /** @description The id of the group to which the owner of this object belongs */
      owner_group_id?: number;
      /** @description The id of the user who owns this object */
      owner_user_id?: number;
      /** @description The id of the parent object of which this object is a child */
      parent_id?: number;
      /** @description TRUE if this object is reserved, FALSE otherwise */
      reserved?: boolean;
      /** @description Date when this object was reserved */
      reserved_date?: string;
      /** @description The id of the user who has reserved this object */
      reserved_user_id?: number;
      /** @description An ID representing the type of the object */
      type?: number;
      /** @description The name of the type of object */
      type_name?: string;
      /** @description True if Advanced Versioning is enabled on this object, false otherwise */
      versions_control_advanced?: boolean;
      /** @description The ID of the volume */
      volume_id?: number;
    };
    volumes_VolumeBrowse: {
      data?: components["schemas"]["volumes_NodeInfo"][];
      definitions?: components["schemas"]["volumes_InfoDefinitions"][];
      definitions_map?: components["schemas"]["volumes_DefinitionsMap"];
      /** @description The suggested order in which data for each item should be displayed */
      definitions_order?: string[];
      /** @description Maximum number of items returned per page */
      limit?: number;
      /** @description Number of the current page */
      page?: number;
      /** @description Total number of pages available */
      page_total?: number;
      /** @description Number of the ending item for this page */
      range_max?: number;
      /** @description Number of the starting item for this page */
      range_min?: number;
      /** @description Direction and column name on which the results are sorted */
      sort?: string;
      /** @description Total number of items available */
      total_count?: number;
      /** @description Facets on which results are filtered */
      where_facet?: number[];
      /** @description Name on which results are filtered */
      where_name?: number;
      /** @description Types on which results are filtered */
      where_type?: number[];
    };
    volumes_ActionInfo: {
      /** @description The action's name (as shown in UI representation) */
      name?: string;
      /** @description The url to be called on the action's execution */
      url?: string;
      /** @description List of sub-actions available.  This appears when the action is a sub-menu */
      children?: components["schemas"]["volumes_ActionInfoChild"][];
      signature?: string;
    };
    volumes_ActionInfoChild: {
      /** @description The action's name (as shown in UI representation) */
      name?: string;
      /** @description The url to be called on the action's execution */
      url?: string;
      signature?: string;
    };
    volumes_TypeInfo: {
      /** @description True if this document has advanced versioning, false otherwise */
      advanced_versioning?: boolean;
      /** @description True if this object is a container */
      container?: boolean;
    };
    volumes_InfoDefinitions: Record<string, any>;
    volumes_V2ResponseElement: {
      /** @description Results */
      results?: components["schemas"]["volumes_V2Result"][];
      /** @description Links */
      links?: components["schemas"]["volumes_V2DataLinks"][];
    };
    volumes_V2BrowseRecycleBinResult: {
      /** @description Data */
      data?: components["schemas"]["volumes_V2BrowseRecycleBinData"][];
    };
    volumes_V2BrowseRecycleBinData: {
      /** @description Properties */
      properties?: components["schemas"]["volumes_V2BrowseRecycleBinProperties"][];
    };
    volumes_V2Result: {
      /** @description Data */
      data?: components["schemas"]["volumes_V2Data"][];
    };
    volumes_V2Data: {
      /** @description columns */
      columns?: components["schemas"]["volumes_V2Columns"][];
      /** @description Properites */
      properties?: components["schemas"]["volumes_V2Properties"][];
    };
    volumes_V2Columns: {
      /** @description data type */
      data_type?: number;
      /** @description key */
      key?: string;
      /** @description name */
      name?: string;
      /** @description sort_key */
      sort_key?: string;
    };
    volumes_V2DataLinks: {
      data?: components["schemas"]["volumes_V2Links"][];
    };
    volumes_V2Links: {
      /** @description Self link */
      self?: components["schemas"]["volumes_V2Link"][];
    };
    volumes_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    volumes_V2Properties: {
      /** @description Whether or not this item is a container */
      container?: boolean;
      /** @description The number of items in this container */
      container_size?: number;
      /** @description The date that the item was created */
      create_date?: string;
      /** @description The id of the user who created the item */
      create_user_id?: number;
      /** @description Description of the item */
      description?: string;
      description_multilingual?: components["schemas"]["volumes_DescriptionMultilingual"];
      /**
       * Format: date
       * @description External create date
       */
      external_create_date?: string;
      /** @description External identity */
      external_identity?: string;
      /** @description External identity type */
      external_identity_type?: string;
      /**
       * Format: date
       * @description External modify date
       */
      external_modify_date?: string;
      /** @description External source */
      external_source?: string;
      /** @description Indicates if this item has been favorited by the current user */
      favorite?: boolean;
      /** @description The item's unique object ID */
      id?: number;
      /** @description Mime type of the object */
      mime_type?: string;
      /**
       * Format: date
       * @description The date on which the item was last modified
       */
      modify_date?: string;
      /** @description The id of the user who modified the item */
      modify_user_id?: number;
      /** @description The name of the item */
      name?: string;
      name_multilingual?: components["schemas"]["volumes_NameMultilingual"];
      /** @description The name of the owner of this item */
      owner?: string;
      /** @description The group id of the owner of this item */
      owner_group_id?: number;
      /** @description The user id of the owner of this item */
      owner_user_id?: number;
      /** @description The object id of the item's parent */
      parent_id?: number;
      /** @description Whether or not this item has been reserved */
      reserved?: boolean;
      /** @description The date on which the item was reserved */
      reserved_date?: string;
      /** @description The id of the user who has this item reserved */
      reserved_user_id?: number;
      /** @description Size of this item */
      size?: number;
      /** @description Size of this item with an appropriate units based on type (i.e. 11 items or 7 KB) */
      size_formatted?: string;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The item's type */
      type_name?: string;
      /** @description Whether or not newly added items to this item are added as advanced versioning (major/minor versioning) */
      versions_control_advanced?: boolean;
      /** @description The id of the volume to which this item belongs */
      volume_id?: number;
    };
    volumes_V2BrowseRecycleBinProperties: {
      /** @description The item's unique object ID */
      id?: number;
      /** @description The item's type (unique number) */
      type?: number;
      /** @description The name of the item */
      name?: string;
      /** @description The ID of the user who deleted the item */
      deleted_user_id?: number;
      /**
       * Format: date
       * @description The date when the item will be purged (default setting is 60 days from the deleted_date, but can be changed in Content Server Admin settings to any other value)
       */
      purged_date?: string;
      /**
       * Format: date
       * @description The date on which the item was deleted
       */
      deleted_date?: string;
      /** @description The object ID of the item's parent (before it was deleted, a.k.a. the location) */
      parent_id?: number;
    };
    volumes_BrowseResult2: {
      /** @description Collection */
      collection?: components["schemas"]["volumes_V2Collection"][];
      /** @description Links */
      links?: components["schemas"]["volumes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["volumes_V2Result"][];
    };
    volumes_BrowseRecyleBinResult2: {
      /** @description Collection */
      collection?: components["schemas"]["volumes_BrowseRecycleBinV2Collection"][];
      /** @description Links */
      links?: components["schemas"]["volumes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["volumes_V2BrowseRecycleBinResult"][];
    };
    volumes_BrowseRecycleBinV2Collection: {
      /** @description Filtering information */
      filtering?: {
        filter?: components["schemas"]["volumes_V2FilterObj"][];
      };
      /** @description Paging Information */
      paging?: components["schemas"]["volumes_V2Paging"][];
      /** @description Sorting information */
      sorting?: components["schemas"]["volumes_V2Sorting"][];
    };
    volumes_V2Collection: {
      /** @description Paging Information */
      paging?: components["schemas"]["volumes_V2Paging"][];
      /** @description Sorting information */
      sorting?: components["schemas"]["volumes_V2Sorting"][];
    };
    volumes_V2Paging: {
      /** @description limit */
      limit?: number;
      /** @description links */
      links?: string[];
      /** @description page */
      page?: number;
      /** @description page total */
      page_total?: number;
      /** @description range max */
      range_max?: number;
      /** @description range min */
      range_min?: number;
      /** @description total count */
      total_count?: number;
    };
    volumes_V2FilterObj: {
      key?: string;
      value?: string;
    };
    volumes_V2Mode: {
      mode?: components["schemas"]["volumes_V2ModeObj"][];
    };
    volumes_V2ModeObj: Record<string, any>;
    volumes_V2Sorting: {
      sort?: components["schemas"]["volumes_V2Sort"][];
    };
    volumes_V2Sort: Record<string, any>;
    volumes_BrowseVolumes2: {
      /** @description Links */
      links?: components["schemas"]["volumes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["volumes_V2Result"][];
    };
    volumes_CellMetadataData: Record<string, any>;
    volumes_CellMetadataDefinitions: Record<string, any>;
    volumes_NameMultilingual: {
      /** @description Name in English */
      en?: string;
      /** @description Name auf Deutsch */
      de?: string;
    };
    volumes_DescriptionMultilingual: {
      /** @description Description in English */
      en?: string;
      /** @description Beschreibung in Deutsch */
      de?: string;
    };
    volumes_PurgeRestoreRecycleBinResult: {
      /** @description Links */
      links?: components["schemas"]["volumes_V2DataLinks"][];
      /** @description results */
      results?: components["schemas"]["volumes_V2PurgeRecycleBinResults"][];
    };
    volumes_V2PurgeRecycleBinResults: {
      /** @description Failure */
      failure?: components["schemas"]["volumes_V2PurgeRecycleBinFailure"][];
      /** @description Success */
      success?: components["schemas"]["volumes_V2PurgeRecycleBinSuccess"][];
    };
    volumes_V2PurgeRecycleBinFailure: {
      /** @description Failure error messages */
      errors?: components["schemas"]["volumes_V2PurgeRecycleBinFailureMessage"][];
      /** @description Failure IDs */
      ids?: number[];
    };
    volumes_V2PurgeRecycleBinFailureMessage: {
      /** @description Failure error messages */
      "<ID>"?: string[];
    };
    volumes_V2PurgeRecycleBinSuccess: {
      /** @description Success IDs */
      ids?: number[];
    };
    webreports_ParametersListing: {
      /** @description Parameter data */
      data?: components["schemas"]["webreports_ParameterData"][];
    };
    webreports_ParameterData: {
      /** @description The type of parameter field. Possible types are: 'User', 'ObjectID', 'Number', 'Object', 'String', 'Date', 'Custom' */
      type?: string;
      /** @description The unique name for the parameter */
      parm_name?: string;
      /** @description The display name associated with parm_name */
      display_text?: string;
      /** @description Whether the parameter is set to prompt or not */
      prompt?: boolean;
      /** @description The defined order for the parameter relative to other parameters */
      prompt_order?: number;
      /** @description A default value for the parameter */
      default_value?: unknown;
      /** @description The parameter description */
      description?: string;
      /** @description Whether the parameter is mandatory or not */
      mandatory?: boolean;
      /** @description Additional data which is not common to all parameter types */
      type_specific?: components["schemas"]["webreports_TypeSpecificData"][];
    };
    webreports_TypeSpecificData: {
      /** @description Whether groups are enabled for the field. Supported only for the 'User' field type */
      groups_enabled?: boolean;
      /** @description Whether users are enabled for the field. Supported only for the 'User' field type */
      users_enabled?: boolean;
      /** @description The display name for the default_value user, if defined. Supported only for the 'User' field type */
      user_name?: string;
      /** @description The display name for the default_value node, if defined. Supported only for the 'ObjectID' field type */
      node_name?: string;
      /** @description The path display name for the default_value node, if defined. Supported only for the 'ObjectID' field type */
      node_path?: string;
      /** @description A list of all subtypes in the system. Supported only for the 'ObjectID' field type */
      subtype_list?: components["schemas"]["webreports_SubTypeData"][];
      /** @description A list of subtypes defined as valid for this parameter. Supported only for the 'ObjectID' field type */
      valid_subtype_list?: components["schemas"]["webreports_SubTypeData"][];
      /** @description The display name for the default_value subtype, if defined. Supported only for the 'Object' field type */
      subtype_name?: string;
      /** @description Whether time is enabled for the date field. Supported only for the 'Date' field type */
      time_enabled?: boolean;
      /** @description Whether the current time should be used for the date field. Supported only for the 'Date' field type */
      use_current?: boolean;
      /** @description A string of HTML code representing the custom form element. Supported only for the 'Custom' field type */
      content?: string;
    };
    webreports_SubTypeData: {
      /** @description The name of the subtype in the list */
      name?: string;
      /** @description The unique ID for the subtype in the list */
      subtype?: number;
    };
    webreports_OutputResponse: {
      /** @description Destination data */
      destination_data?: components["schemas"]["webreports_OutputData"][];
      /** @description (Content Server Node destination only) The node ID of the output */
      node_id?: number;
      /** @description (Workflow destination only) The work ID of the initiated workflow */
      work_id?: number;
    };
    webreports_DestinationResponse: {
      /** @description Destination data */
      data?: components["schemas"]["webreports_DestinationData"][];
    };
    webreports_DestinationData: {
      /** @description Destination-specific data. Note that the keys in this object will vary based on the Destination tab and permission settings for the WebReport */
      destination_specific?: components["schemas"]["webreports_DestinationSpecific"][];
      /** @description Whether the WebReport is set to export if there is no data */
      export_if_no_data?: boolean;
      /** @description The MIMEType that the WebReport output is written in */
      export_mime_type?: string;
      /** @description The http method that should be used to run the WebReport based on the destination type */
      http_method?: string;
      /** @description The WebReport destination type */
      output_destination?: string;
      /** @description Whether the WebReport is set to run in the background */
      run_in_background?: boolean;
      /** @description Schedule data */
      schedule_data?: components["schemas"]["webreports_ScheduleData"][];
      /** @description Whether the WebReport is set to display a status page after it is run */
      show_status_screen?: boolean;
      /** @description Whether the conversion engine is set to be used */
      use_conversion_engine?: boolean;
      /** @description ID of the XML job ticket */
      xml_job_ticket_id?: string;
    };
    webreports_OutputData: {
      /** @description Destination-specific data. Note that the keys in this object will vary based on the Destination tab and permission settings for the WebReport */
      destination_specific?: components["schemas"]["webreports_OutputSpecific"][];
      /** @description Whether the WebReport is set to export if there is no data */
      export_if_no_data?: boolean;
      /** @description The MIMEType that the WebReport output is written in */
      export_mime_type?: string;
      /** @description The http method that should be used to run the WebReport based on the destination type */
      http_method?: string;
      /** @description The WebReport destination type */
      output_destination?: string;
      /** @description Whether the WebReport is set to run in the background */
      run_in_background?: boolean;
      /** @description Schedule data */
      schedule_data?: components["schemas"]["webreports_ScheduleData"][];
      /** @description Whether the WebReport is set to display a status page after it is run */
      show_status_screen?: boolean;
      /** @description Whether the conversion engine is set to be used */
      use_conversion_engine?: boolean;
      /** @description ID of the XML job ticket */
      xml_job_ticket_id?: number;
    };
    webreports_DestinationSpecific: {
      /** @description (Content Server Node destination only): The names of the categories that will be applied to the output node */
      category_names?: string;
      /** @description (Content Server Node destination only): The node ID of the container that the WebReport output will be created in */
      "create_in_id (*)"?: string;
      /** @description (Content Server Node destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found in the destination container */
      duplicate_name_action?: string;
      /** @description (Content Server Node destination only): Whether the WebReport is set to output to a new node or add a version to an existing node */
      export_type?: string;
      /** @description (Content Server Node destination only): The description of the output node */
      "node_description (*)"?: string;
      /** @description (Content Server Node destination only): The name of the output node */
      "node_name (*)"?: string;
      /** @description (Content Server Node destination only): Whether the node type of the output is set to Document or Custom View */
      node_type?: string;
      /** @description (Content Server Version destination only): The node to add a version to */
      add_version_to_id?: string;
      /** @description (Content Server Version destination only): Setting used to determine whether the WebReport output should be appended into the text of an existing document */
      append_data?: string;
      /** @description (Content Server Version destination only): The end tag if the WebReport output is set to be appended into the text of an existing document between tags */
      end_tag?: string;
      /** @description (Content Server Version destination only): Whether the output should overwrite tags in the destination text if the WebReport output is set to be appended into the text of an existing document between tags */
      overwrite_tags?: string;
      /** @description (Content Server Version destination only): The start tag if the WebReport output is set to be appended into the text of an existing document between tags */
      start_tag?: string;
      /** @description (Content Server Version destination only): The description of the output version */
      "version_description (*)"?: string;
      /** @description (Content Server Version destination only): Whether the output should be added as a major or minor version */
      version_handling?: string;
      /** @description (Content Server Version destination only): The name of the output version */
      "version_name (*)"?: string;
      /** @description (Desktop destination only): The name of the file that the WebReport output is written to */
      "download_file_name (*)"?: string;
      /** @description (E-mail destination only): The name of the file attached to the e-mail */
      "attachment_name (*)"?: string;
      /** @description (E-mail destination only): Whether the WebReport output should be attached to the e-mail */
      attach_results_to_email?: boolean;
      /** @description (E-mail destination only): The e-mail address that the e-mail is being sent to */
      "email_address (*)"?: string;
      /** @description (E-mail destination only): The User ID of the Content Server user that the e-mail is being sent to */
      "email_address_user_id (*)"?: string;
      /** @description (E-mail destination only): The body text of the e-mail */
      "email_body_text (*)"?: string;
      /** @description (E-mail destination only): The node ID of the Content Server node containing the mailing list that the e-mail is being sent to */
      "email_mailing_list (*)"?: string;
      /** @description (E-mail destination only): The Subject of the e-mail */
      "email_subject (*)"?: string;
      /** @description (Form destination only): Setting used to determine how the WebReport output affects existing form data */
      append_form?: string;
      /** @description (Form destination only): The node ID of the Form being used as the destination of the WebReport */
      "form_id (*)"?: string;
      /** @description (FTP destination only): Whether the WebReport is set to login to the FTP Server anonymously */
      ftp_anonymous?: boolean;
      /** @description (FTP destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found on the destination FTP server */
      ftp_copy_options?: string;
      /** @description (FTP destination only): The relative path to the destination file from the FTP root folder */
      "ftp_file_path (*)"?: string;
      /** @description (FTP destination only): The port on the FTP server to connect to */
      ftp_port?: number;
      /** @description (FTP destination only): The IP Address or machine name of the FTP server */
      ftp_server?: string;
      /** @description (FTP destination only): The user name used for authentication on the FTP server */
      ftp_user_name?: string;
      /** @description (FTP destination only): Whether the password has been set for the FTP user yet */
      ftp_password_set?: boolean;
      /** @description (Server destination only): The file path that the output will be written to on the destination server */
      "server_file_path (*)"?: string;
      /** @description (Workflow destination only): Whether the WebReport output is attached to the initiated workflow */
      workflow_attach_output?: boolean;
      /** @description (Workflow destination only): The node description of the WebReport output to be attached to the initiated workflow */
      "workflow_attachment_description (*)"?: boolean;
      /** @description (Workflow destination only): The node name of the WebReport output to be attached to the initiated workflow */
      "workflow_attachment_name (*)"?: boolean;
      /** @description (Workflow destination only): The names of the categories that will be applied to the output node to be attached to the initiated workflow */
      workflow_category_names?: boolean;
      /** @description (Workflow destination only): The description of the initiated workflow */
      "workflow_description (*)"?: string;
      /** @description (Workflow destination only): Setting used to determine whether the workflow will become due for completion */
      workflow_due?: string;
      /** @description (Workflow destination only): Number of days from initiation that the workflow will become due for completion */
      workflow_due_in?: string;
      /** @description (Workflow destination only): Date that the workflow will become due for completion */
      workflow_due_on?: string;
      /** @description (Workflow destination only): The node ID of the Workflow map being used as the destination of the WebReport */
      "workflow_map_id (*)"?: string;
      /** @description (Workflow destination only): The title of the initiated workflow */
      "workflow_title (*)"?: string;
    };
    webreports_OutputSpecific: {
      /** @description (Content Server Node destination only): The names of the categories that will be applied to the output node */
      category_names?: string;
      /** @description (Content Server Node destination only): The node ID of the container that the WebReport output will be created in */
      create_in_id?: number;
      /** @description (Content Server Node destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found in the destination container */
      duplicate_name_action?: string;
      /** @description (Content Server Node destination only): Whether the WebReport is set to output to a new node or add a version to an existing node */
      export_type?: string;
      /** @description (Content Server Node destination only): The description of the output node */
      node_description?: string;
      /** @description (Content Server Node destination only): The name of the output node */
      node_name?: string;
      /** @description (Content Server Node destination only): Whether the node type of the output is set to Document or Custom View */
      node_type?: string;
      /** @description (Content Server Version destination only): The node to add a version to */
      add_version_to_id?: number;
      /** @description (Content Server Version destination only): Setting used to determine whether the WebReport output should be appended into the text of an existing document */
      append_data?: string;
      /** @description (Content Server Version destination only): The end tag if the WebReport output is set to be appended into the text of an existing document between tags */
      end_tag?: string;
      /** @description (Content Server Version destination only): Whether the output should overwrite tags in the destination text if the WebReport output is set to be appended into the text of an existing document between tags */
      overwrite_tags?: string;
      /** @description (Content Server Version destination only): The start tag if the WebReport output is set to be appended into the text of an existing document between tags */
      start_tag?: string;
      /** @description (Content Server Version destination only): Whether the output should be added as a major or minor version */
      version_handling?: string;
      /** @description (Content Server Version destination only): The name of the output node */
      version_name?: string;
      /** @description (Desktop destination only): The name of the file that the WebReport output is written to */
      download_file_name?: string;
      /** @description (E-mail destination only): The name of the file attached to the e-mail */
      attachment_name?: string;
      /** @description (E-mail destination only): Whether the WebReport output should be attached to the e-mail */
      attach_results_to_email?: boolean;
      /** @description (E-mail destination only): The e-mail address that the e-mail is being sent to */
      email_address?: string;
      /** @description (E-mail destination only): The User ID of the Content Server user that the e-mail is being sent to */
      email_address_user_id?: number;
      /** @description (E-mail destination only): The body text of the e-mail */
      email_body_text?: string;
      /** @description (E-mail destination only): The node ID of the Content Server node containing the mailing list that the e-mail is being sent to */
      email_mailing_list?: number;
      /** @description (E-mail destination only): The Subject of the e-mail */
      email_subject?: string;
      /** @description (Form destination only): Setting used to determine how the WebReport output affects existing form data */
      append_form?: string;
      /** @description (Form destination only): The node ID of the Form being used as the destination of the WebReport */
      form_id?: number;
      /** @description (Form destination only): The number of rows of form data affected when the WebReport is run */
      rows_affected?: number;
      /** @description (FTP destination only): Whether the WebReport is set to login to the FTP Server anonymously */
      ftp_anonymous?: boolean;
      /** @description (FTP destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found on the destination FTP server */
      ftp_copy_options?: string;
      /** @description (FTP destination only): The relative path to the destination file from the FTP root folder */
      ftp_file_path?: string;
      /** @description (FTP destination only): The port on the FTP server to connect to */
      ftp_port?: number;
      /** @description (FTP destination only): The IP Address or machine name of the FTP server */
      ftp_server?: string;
      /** @description (FTP destination only): The user name used for authentication on the FTP server */
      ftp_user_name?: string;
      /** @description (FTP destination only): The password used for authentication on the FTP server */
      ftp_user_password?: string;
      /** @description (Server destination only): The file path that the output will be written to on the destination server */
      server_file_path?: string;
      /** @description (Workflow destination only): Whether the WebReport output is attached to the initiated workflow */
      workflow_attach_output?: boolean;
      /** @description (Workflow destination only): The node description of the WebReport output attached to the initiated workflow */
      workflow_attachment_description?: boolean;
      /** @description (Workflow destination only): The node name of the WebReport output attached to the initiated workflow */
      workflow_attachment_name?: boolean;
      /** @description (Workflow destination only): The names of the categories applied to the output node attached to the initiated workflow */
      workflow_category_names?: boolean;
      /** @description (Workflow destination only): The description of the initiated workflow */
      workflow_description?: string;
      /** @description (Workflow destination only): Setting used to determine whether the workflow will become due for completion */
      workflow_due?: string;
      /** @description (Workflow destination only): Number of days from initiation that the workflow will become due for completion */
      workflow_due_in?: string;
      /**
       * Format: date
       * @description (Workflow destination only): Date that the workflow will become due for completion
       */
      workflow_due_on?: string;
      /** @description (Workflow destination only): The node ID of the Workflow map being used as the destination of the WebReport */
      workflow_map_id?: number;
      /** @description (Workflow destination only): The title of the initiated workflow */
      workflow_title?: string;
    };
    webreports_ScheduleData: {
      /** @description Whether the '5-minute-increments' setting is set */
      five_minute_increments?: boolean;
      /**
       * Format: date
       * @description The date that the WebReport is scheduled to be next run
       */
      next_run?: string;
      /** @description The repeat interval number of days that the WebReport is scheduled for */
      repeat_day?: number;
      /** @description The repeat interval number of hours that the WebReport is scheduled for */
      repeat_hour?: number;
      /** @description The repeat interval number of minutes that the WebReport is scheduled for */
      repeat_minute?: number;
      /** @description The repeat interval number of weeks that the WebReport is scheduled for */
      repeat_week?: number;
      /** @description 'intervals' if the schedule is set to run using repeat intervals or 'specific' if the schedule is set to run on specific days of the month */
      run_condition?: string;
      /** @description List containing the dates of the month that the report is scheduled to run on */
      run_on_dates?: string;
      /** @description List containing the weeks of the month that the report is scheduled to run on */
      run_on_weeks_month?: string;
      /** @description List containing the days of the month that the report is scheduled to run on */
      run_on_days_month?: string;
      /** @description List containing the days of the week that the report is scheduled to run on */
      run_on_days_week?: string;
      /** @description The specific number of times that the WebReport will run, or -1 for forever */
      run_times?: number;
      /** @description Whether the schedule is enabled */
      schedule_enabled?: boolean;
      /** @description The User ID of the user that created the schedule */
      user_id?: number;
    };
    xmlimport_response_200: {
      /** @description Nested json with content-type, href, request-method, etc. */
      links?: Record<string, any>;
      results?: {
        data?: {
          /** @description Successful import message: {filename} successfully imported */
          message?: string;
          restart?: boolean;
        };
      };
    };
    xmlimport_response_400: {
      /** @description Error message */
      error?: string;
    };
    xmlimport_response_500: {
      /** @description Error message - {filename} import failed: system error */
      error?: string;
      /** @description List of errors as a string */
      errorDetail?: string;
    };
    V2FollowUps: {
      /** @description Results */
      results?: Record<string, any>;
      /** @description Links */
      links?: Record<string, any>;
    };
    V2FollowUpInfo: {
      /** @description Results */
      results?: Record<string, any>;
      /** @description Links */
      links?: Record<string, any>;
    };
    V2FollowUpsResults: {
      /** @description FollowUps */
      followups?: components["schemas"]["V2FollowUpsFollowups"][];
    };
    V2FollowUpsFollowups: {
      /** @description Data */
      data?: Record<string, any>;
    };
    V2FollowUpsData: {
      /** @description FollowUp */
      followup?: Record<string, any>;
    };
    V2FollowUpsFollowup: {
      /** @description Move Follow Up activation date to the previous business day, if it falls on a weekend; 0: Don't move the date. 1: Move the date to the previous business day. */
      activation_by_day?: number;
      /**
       * Format: date
       * @description The calculated activation date
       */
      activation_date?: string;
      /** @description list of integer assignee id values */
      assignees?: number[];
      /**
       * Format: date
       * @description The date and time the Follow Up was created
       */
      create_date?: string;
      /** @description ID of the user who created the Follow Up */
      create_user_id?: number;
      /** @description Data Id of the node */
      data_id?: number;
      /** @description Description of the folloup */
      description?: string;
      /**
       * Format: date
       * @description The date on which the Follow Up must be executed
       */
      due_date?: string;
      /**
       * Format: date
       * @description End date of the period in which the resubmission has to be executed. Valid only if RSRULE = 2
       */
      end_sequence_date?: string;
      /** @description Unique identifier representing a Follow Up client */
      followup_client?: number;
      /** @description Name of the Follow Up client */
      followup_client_name?: string;
      /** @description Follow Up handler 1: Normal Follow Up handler , 2: Follow Up handler with escalation data, 100: cmbase-specific for automaticrenewal */
      followup_handler?: number;
      /** @description Follow Up ID */
      followup_id?: number;
      /** @description Follow Up Type ID */
      followup_type?: number;
      /** @description Follow Up Type Name */
      followup_type_name?: string;
      /** @description Follow Up Parent Node ID */
      parent_id?: number;
      /** @description Type of rule to apply; 0: Follow Up on specific data 1: Follow Up in specific days, weeks, or months 2: Periodic Follow Up */
      rule?: number;
      /**
       * Format: date
       * @description Start date of the period in which the Follow Up has to be executed. Valid only if RSRULE = 2.
       */
      start_sequence_date?: string;
      /** @description Follow Up Status */
      status?: number;
      /** @description Follow Up Status Updated By */
      status_by?: number;
    };
    V1ReminderView: {
      /** @description forms */
      forms?: Record<string, any>;
    };
    V1ReminderViewForms: {
      data?: components["schemas"]["V1ReminderViewData"];
      form?: components["schemas"]["V1ReminderViewForm"];
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for creating the node */
      schema?: Record<string, any>;
    };
    V1ReminderViewData: {
      /** @description activation_alert */
      activation_alert?: Record<string, any>;
      /** @description list of integer assignee id values */
      assignees?: number[];
      /** @description descrption of the follow up */
      description?: string;
      /**
       * Format: date
       * @description duein
       */
      duein?: string;
      /** @description escalation_alert */
      escalation_alert?: Record<string, any>;
      /** @description Name of the Follow Up client */
      followup_client_name?: number;
      /** @description Follow Up Type Name */
      followup_type_name?: number;
      /** @description general */
      general?: Record<string, any>;
      /** @description priority */
      priority?: number;
      /** @description schedule */
      schedule?: Record<string, any>;
    };
    V1ReminderViewActivationAlert: {
      /** @description send_in */
      send_in?: Record<string, any>;
    };
    V1ReminderViewActivationSendIn: {
      /** @description activation_period */
      activation_period?: number;
      /** @description activation_unit */
      activation_unit?: number;
    };
    V1ReminderViewEscalationAlert: {
      /** @description escalation_enabled */
      escalation_enabled?: boolean;
      /** @description send_in */
      send_in?: Record<string, any>;
    };
    V1ReminderViewEscalationSendIn: {
      /** @description escalation_period */
      escalation_period?: number;
      /** @description escalation_when */
      escalation_when?: number;
    };
    V1ReminderViewGeneral: {
      /** @description Created_by */
      Created_by?: number;
      /**
       * Format: date
       * @description Created_on
       */
      Created_on?: string;
      /** @description Modified_by */
      Modified_by?: number;
      /** @description Modified_on */
      Modified_on?: number;
    };
    V1ReminderViewSchedule: {
      /** @description due */
      due?: number;
      /** @description Due In */
      due_in?: Record<string, any>;
      /**
       * Format: date
       * @description Due On
       */
      due_on?: string;
      /**
       * Format: date
       * @description End Date
       */
      end_date?: string;
      /** @description Month Recursive */
      month_recursive?: number;
      /** @description Predefined */
      predefined?: boolean;
      /** @description Recurring */
      Recurring?: boolean;
      /** @description Repeat Month */
      repeat_month?: Record<string, any>;
      /** @description Repeat On */
      repeat_on?: string;
      /** @description Repeat Week */
      repeat_week?: number;
      /** @description Repeat Year */
      repeat_year?: Record<string, any>;
      /**
       * Format: date
       * @description Start Date
       */
      start_date?: string;
      /** @description Week Recursive */
      week_recursive?: number;
      /** @description Year Recursive */
      year_recursive?: number;
    };
    V1ReminderViewDueIn: {
      /** @description Due In Period */
      due_in_period?: number;
      /** @description Due In Unit */
      due_in_unit?: number;
    };
    V1ReminderViewRepeatMonth: {
      /** @description Month Day */
      month_day?: number;
      /** @description Month Unit */
      month_unit?: string;
      /** @description Month Weekday */
      month_weekday?: number;
    };
    V1ReminderViewRepeatYear: {
      /** @description Year On Month */
      year_on_month?: number;
      /** @description Year On Month Day */
      year_on_month_day?: number;
      /** @description Year On Month Unit */
      year_on_month_unit?: string;
      /** @description Year On Month Weekday */
      year_on_month_weekday?: number;
    };
    V1ReminderViewForm: {
      /** @description Attributes */
      attributes?: Record<string, any>;
      /** @description renderForm */
      renderForm?: boolean;
    };
    V1ReminderViewAttributes: {
      /** @description action */
      action?: string;
      /** @description method */
      method?: string;
    };
    V1FollowupClientTypes: {
      /** @description forms */
      forms?: Record<string, any>;
    };
    V1FollowupClientTypesForms: {
      /** @description data */
      data?: Record<string, any>;
      form?: components["schemas"]["V1ReminderViewForm"];
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for creating the node */
      schema?: Record<string, any>;
    };
    V1FollowupClientTypesData: {
      /** @description Follow Up Type Name */
      followup_type_name?: number;
      /** @description Name of the Follow Up client */
      followup_client_name?: number;
      /**
       * Format: date
       * @description Due On
       */
      due_on?: string;
      /** @description description */
      description?: string;
      /** @description assignees */
      assignees?: string;
      /** @description Activation Alert */
      activation_alert?: Record<string, any>;
    };
    V1FollowupClientTypesActivationAlert: {
      /** @description send_in */
      send_in?: Record<string, any>;
    };
    V1FollowupClientTypesActivationAlertSendIn: {
      /** @description activationAlert1 */
      activationAlert1?: number;
      /** @description activationAlert2 */
      activationAlert2?: number;
    };
    V1ReminderCreateForm: {
      /** @description forms */
      forms?: Record<string, any>;
    };
    V1ReminderCreateData: {
      /** @description data */
      data?: Record<string, any>;
      /** @description form */
      form?: Record<string, any>;
      /** @description Basic data about the alpaca form */
      options?: Record<string, any>;
      /** @description Properties of the parameters being used for creating the node */
      schema?: Record<string, any>;
    };
    V2PostReminder: {
      /** @description Results */
      results?: Record<string, any>;
      /** @description Links */
      links?: Record<string, any>;
    };
    resubmission_V2EmptyResults: Record<string, any>;
    resubmission_V2DataLinks: {
      data?: Record<string, any>;
    };
    resubmission_V2Links: {
      self?: components["schemas"]["resubmission_V2Link"];
    };
    resubmission_V2Link: {
      /** @description Body */
      body?: string;
      /** @description Content Type */
      content_type?: string;
      /** @description URL */
      href?: string;
      /** @description HTTP Method */
      method?: string;
      /** @description Name */
      name?: string;
    };
    syndication_response_200: {
      /** @description Nested json with content-type, href, request-method, etc. */
      links?: Record<string, any>;
      results?: {
        /** @description Whether user has the document level syndication privilege or not */
        canUserEditTheSiteMappings?: boolean;
        /** @description Document level syndication value of a given node */
        DLS?: boolean;
        /** @description Is syndication enabled on a given node */
        enabled?: boolean;
        /** @description Whether DLS can be enabled on a given node */
        hideDLS?: boolean;
      };
    };
    signaturerequests_create: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["signature_V2Results"][];
    };
    signature_V2Results: {
      data?: components["schemas"]["signature_V2Data"][];
    };
    signature_V2Data: {
      /** @description Signature Request URL */
      url?: string;
      /** @description A unique identifier for the Signature Request */
      request_id?: number;
    };
    signaturerequests_get: {
      /** @description Collection */
      collection?: components["schemas"]["members_V2Collection_BrowseMembers"][];
      /** @description Results */
      results?: components["schemas"]["signaturerequests_V2GetResult"][];
      /** @description Links */
      links?: components["schemas"]["members_V2Links"][];
    };
    signaturerequests_V2GetResult: {
      /** @description Data */
      data?: components["schemas"]["signaturerequests_V2Data"][];
    };
    signaturerequests_V2Data: {
      /** @description Properties */
      properties?: components["schemas"]["signaturerequests_V2Properties"][];
    };
    signaturerequests_V2Properties: {
      /** @description Signature Request Id */
      request_id?: string;
      /** @description Provider Name */
      provider_name?: string;
      /** @description Signature Request Modified date */
      modified_date?: number;
      /** @description Signature Request Created date */
      created_date?: number;
      /** @description Signature Request URL */
      status?: string;
      /** @description Total no of Documents */
      total_documents?: number;
      /** @description documents */
      documents?: components["schemas"]["signaturerequests_DocumentsData"][];
    };
    signaturerequests_DocumentsData: {
      /** @description Document Id */
      doc_id?: number;
      /** @description Document Name */
      doc_name?: string;
      /** @description The mime type of the original document sent for signature */
      mime_type?: string;
      /** @description The version of the document sent for signature */
      version_num?: number;
    };
    signaturerequests_getbyId: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["signatureRequestDetails_V2Results"][];
    };
    signatureRequestDetails_V2Results: {
      data?: components["schemas"]["signatureRequestDetails_V2Data"][];
    };
    signatureRequestDetails_V2Data: {
      /** @description Signature Request Id */
      request_id?: string;
      /** @description Provider Name */
      provider_name?: string;
      /** @description Signature Request Created date */
      created_date?: number;
      /** @description Signature Request modified date */
      modified_date?: number;
      /** @description Signature Request status */
      status?: string;
      /** @description Total no of Documents */
      total_documents?: number;
      /** @description documents */
      documents?: components["schemas"]["signaturerequests_DocumentsData"][];
      /** @description signers */
      signers?: components["schemas"]["signaturerequests_SignersData"][];
      /** @description Decides if activity information needs to be included. This activity information is created by parsing the signer data */
      activities?: components["schemas"]["signaturerequests_ActivitiesData"][];
    };
    signaturerequests_SignersData: {
      /** @description Name of the signer */
      full_name?: string;
      /** @description Email Id of the signer */
      email_id?: string;
      /** @description Signing order */
      signing_order?: number;
      /** @description Signer status */
      cssigner_status?: number;
    };
    signaturerequests_ActivitiesData: {
      /** @description Activity description */
      full_name?: string;
      /** @description Event date */
      event_date?: number;
      /** @description Type of the event */
      event_type?: string;
      /** @description Event performer */
      performer_name?: string;
    };
    signaturerequests_sendnotification: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["signatureRequestsNotification_V2Results"][];
    };
    signatureRequestsNotification_V2Results: {
      data?: components["schemas"]["signaturerequestsNotification_V2Data"][];
    };
    signaturerequestsNotification_V2Data: Record<string, any>;
    signaturerequests_cancel: {
      links?: components["schemas"]["categories_V2DataLinks"][];
      results?: components["schemas"]["signatureRequestsCancel_V2Results"][];
    };
    signatureRequestsCancel_V2Results: {
      data?: components["schemas"]["signatureRequestsCancel_V2Data"][];
    };
    signatureRequestsCancel_V2Data: Record<string, any>;
  };
  responses: never;
  parameters: {
    /** @description Forces the server to always return a HTTP Response of '200 OK'. The data returned from the call will have an additional integer feature named 'statusCode', which will contain the actual status code (the 'statusCode' feature will be added regardless of whether the REST API call was successful or not).<br><br>NOTE: This parameter does not require a value, so it should be specified as <ul><li><b>[Query String]:</b><code>?suppress_response_codes</code></li><li><b>[Form Body (where the value is an empty string)]</b>: <code>suppress_response_codes = </code></li></ul> */
    suppress_response_codes?: string | null;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, any>;

export interface operations {
  /**
   * Get API Info
   * @description Provides the GET, POST, PUT and DELETE methods for the given resource.
   */
  GetAPIInfo: {
    parameters: {
      query?: {
        /** @description The REST API url to get information on (ex. api/v1/nodes/2000/nodes) */
        resource?: string;
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["apiinfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'resource' is required</li><li>No action information found for resource {resource}</li><li>The resource {resource} was not found in the mappings registry or the mappings entry was malformed</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Not Implemented */
      404: never;
    };
  };
  /**
   * Get Current User Info
   * @description Gets information on the currently authenticated user.
   */
  GetCurrentUserInfo: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        /** @description Determines if the perspective for the node will be included in the response. */
        perspective?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["auth_UserInfo"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Authenticate user
   * @description Authenticates user with the given credentials, returning an OTCS ticket if authorized.
   */
  authenticate: {
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Login name */
          username: string;
          /**
           * Format: password
           * @description Login password
           */
          password: string;
          /** @description Login domain */
          domain?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["auth_AuthenticationInfo"];
        };
      };
      /** @description Invalid parameter value */
      400: never;
      /** @description <ul><li>Invalid username/password specified</li><li>Unable to login. Domain support is disabled</li></ul> */
      401: never;
      /** @description <ul><li>Argument username is required</li><li>Argument password is required</li></ul> */
      500: never;
    };
  };
  /**
   * Delete Current User Session
   * @description Terminates the session of the currently authenticated user.
   */
  DeleteCurrentUserSession: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["auth_AuthenticationDelete"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Cannot get session data.</li><li>No session data found.</li><li>Error removing session data.</li></ul> */
      500: never;
    };
  };
  /**
   * Bulk node actions
   * @description Gets the list of actions that can be performed on multiple nodes. <ul><b>NOTE: </b>This call only lists the actions and does not perform them. Bulk actions (ie. deleting multiple nodes, copying multiple nodes, reserving multiple nodes) are not yet supported in REST API.</ul>
   */
  bulk_actions: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["bulkactions"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * List categories on a node
   * @description Get the categories applied to the specified node
   */
  getCategories: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_CategoriesInfo"];
        };
      };
      /** @description <ul><li>Could not process object, invalid action 'categories-list'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Apply a category to a node
   * @description Applies an existing category to a node. Only one category (and its values) may be applied at a time<br><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Apply the category and use the default values for its attributes:<br><code>{"category_id":9830}</code><br><br>Apply the category and change the value of the Textfield:<br><code>{"category_id":9830,"9830_2":"new value"}</code><br><br>Apply the category and change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"category_id":9830,"9830_3_2_4":["","","new value"]}</code>
   */
  addCategory: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Category ID */
          category_id?: number;
          /** @description Attribute key in the format {category_id}_[{set_id}_{set_row}]_{attribute_id}.  See the <a href=#implementation-notes open><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. */
          "{attribute_key}"?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_AddCategoryResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>No permissions to access the attribute definition node</li><li>Could not process object, invalid action 'categories-add'</li><li>The attribute group '{category_name}' already exists</li><li>Error retrieving the version of the attribute definition node.</li><li>Invalid specification. Invalid attribute entry found.</li><li>Body parameter is invalid.</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * List categories on a node
   * @description Get the categories applied to the specified node
   */
  getCategories2: {
    parameters: {
      query?: {
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2CategoriesResponse"];
        };
      };
      /** @description <ul><li>Could not process object, invalid action 'categories-list'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Apply a category to a node
   * @description Applies an existing category to a node. Only one category (and its values) may be applied at a time<br><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Apply the category and use the default values for its attributes:<br><code>{"category_id":9830}</code><br><br>Apply the category and change the value of the Textfield:<br><code>{"category_id":9830,"9830_2":"new value"}</code><br><br>Apply the category and change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"category_id":9830,"9830_3_2_4":["","","new value"]}</code>
   */
  addCategory2: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Category ID */
          category_id?: string;
          /** @description Attribute key in the format {category_id}_[{set_id}_{set_row}]_{attribute_id}.  See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. */
          "{attribute_key}"?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>No permissions to access the attribute definition node</li><li>Could not process object, invalid action 'categories-add'</li><li>The attribute group '{category_name}' already exists</li><li>Body parameter is invalid.</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Invalid specification. Invalid attribute entry found.</li><li>Error retrieving the version of the attribute definition node.</li></ul> */
      500: never;
    };
  };
  /**
   * Apply categories to sub-nodes of a node
   * @description Apply categories to sub-nodes of a node (i.e. Apply Down).<br><br>The following examples will assume that there are two categories (ID 9830, ID 6740) that have one TextField attribute each.<br><br>Apply category 9830 with default action (add_upgrade) and category 6740 with 'replace' action:<br><code>{"categories": [{ "id": 9830, "action": null },{ "id": 6740, "action": "replace" } ], "add_version" : false, "clear_existing_categories" : false}</code><br><br>Only clear existing categories:<br><code>{"categories": [{ "id": 9830, "action": "none" },{ "id": 6740, "action": "none" } ], "add_version" : false, "clear_existing_categories" : true}</code><br><br>Apply category 9830 with default action (add_upgrade) and category 6740 with 'replace' action, and adding a new version:<br><code>{"categories": [{ "id": 9830, "action": null },{ "id": 6740, "action": "replace" } ], "add_version" : true, "clear_existing_categories" : false}</code>
   */
  applyDownCategories: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Array with objects with a category id and an action to apply down for that category. See examples. <br> Note that the actions can only be from the following list: "add", "add_upgrade", "upgrade", "replace", "delete", "none", null. */
          categories?: string[];
          /** @description True if a new version of document sub-nodes is to be added, False otherwise. */
          add_version?: boolean;
          /** @description True if all existing categories on the sub-nodes are to be deleted, False otherwise */
          clear_existing_categories?: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2CategoriesApplyResponse"];
        };
      };
      /** @description <ul><li>No permissions to access the attribute definition node</li><li>Could not process object, invalid action 'categories-apply'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Body parameter is invalid.</li><li>Could not find category ID '{node id}' on the node</li><li>Could not set feature {feature}, value must be a {expected type}</li><li>Could not get a node for {id}</li><li>Invalid specification. Invalid attribute entry found.</li><li>Error retrieving the version of the attribute definition node.</li></ul> */
      500: never;
    };
  };
  /**
   * Get category-related actions for a node
   * @description Get the available category-related actions for a node
   */
  getCategoriesActions: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_ActionsCategoriesInfo"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get category-related actions for a category on a node
   * @description Get the available category-related actions for a category on a node
   */
  getCategoriesActions2: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_ActionsCategoriesInfo"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Enable category inheritance for the node's children
   * @description Enable inheritance of the given category (which is on the node) by the node's children. When child nodes are added under the node, this category will be inherited.
   */
  enableCategoryInheritance: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not find category ID {id} on the node</li></ul> */
      500: never;
    };
  };
  /**
   * Disable category inheritance for the node's children
   * @description Disable inheritance of the given category (which is on the node) by the node's children. When child nodes are added under the node, this category will not be inherited.
   */
  disableCategoryInheritance: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not find category ID {id} on the node</li></ul> */
      500: never;
    };
  };
  /**
   * Get category info for a node
   * @description Get details for the given category applied to the specified node
   */
  getCategory: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_CategoryInfo"];
        };
      };
      /** @description <ul><li>Category ID '{category_id}' is not a category on node '{id}'</li><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-get'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Update a category on a node
   * @description Updates an existing category on a node. Only one category (and its values) may be updated at a time.<br><br>The <b>optional</b> 'metadata_token' parameter may be specified if there is a need to avoid edit conflicts. There are two ways to retrieve the current metadata_token(s):<ol start="1"><li>Pass in the current metadata_token when updating the category (see the example below). If the update is successful, metadata_token(s) will be generated and returned under state.categories and these will be valid for the next category update call.</li><li>If you want the current metadata_tokens before performing a category update, use the call 'GET /v2/nodes/{id}?state'. The current metadata_token(s) will be displayed under results.state.categories</li></ol><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Change the value of the Textfield:<br><code>{"9830_2":"new value"}</code><br><br>Change the value of the Textfield while using the metadata_token to avoid edit conflicts:<br><code>{"9830_1":{"metadata_token":"9ec9bcab09f9963db044ff6749e5c5c2"},"9830_2":"new value"}</code><br><br>Change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"9830_3_2_4":["","","new value"]}</code><br><br>Remove the Set's second row:<br><code>{"9830_3_2":""}</code>
   */
  updateCategory: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The JSON object containing the metadata state token (for edit conflict resolution), See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. <br><br>NOTE: if this is specified and the call is successful, the most recent metadata token will be returned in the result. */
          "{category_id}_1"?: string;
          /** @description The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time.<br><br>NOTE: If this is specified and the call is successful, the most recent metadata token will be returned in the result. */
          metadata_token?: string;
        };
      };
    };
    responses: {
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Category ID '{category_id}' was specified for Categories Update, but a non-matching attribute ('{attribute_key}') was found</li><li>Could not process object, invalid action 'categories-update'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not update metadata (edit conflict). */
      409: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Remove a category from a node
   * @description Removes the given category from the specified node.
   */
  deleteCategory: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-remove'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get category info for a node
   * @description Get details for the given category applied to the specified node
   */
  getCategory2: {
    parameters: {
      query?: {
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2CategoriesResponseSingle"];
        };
      };
      /** @description <ul><li>Category ID '{category_id}' is not a category on node '{id}'</li><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-get'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Update a category on a node
   * @description Updates an existing category on a node. Only one category (and its values) may be updated at a time.<br><br>The <b>optional</b> 'metadata_token' parameter may be specified if there is a need to avoid edit conflicts. There are two ways to retrieve the current metadata_token(s):<ol start="1"><li>Pass in the current metadata_token when updating the category (see the example below). If the update is successful, metadata_token(s) will be generated and returned under results.state.categories and these will be valid for the next category update call.</li><li>If you want the current metadata_tokens before performing a category update, use the call 'GET /v2/nodes/{id}?state'. The current metadata_token(s) will be displayed under results.state.categories</li></ol><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Change the value of the Textfield:<br><code>{"9830_2":"new value"}</code><br><br>Change the value of the Textfield while using the metadata_token to avoid edit conflicts:<br><code>{"9830_1":{"metadata_token":"9ec9bcab09f9963db044ff6749e5c5c2"},"9830_2":"new value"}</code><br><br>Change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{"9830_3_2_4":["","","new value"]}</code><br><br>Remove the Set's second row:<br><code>{"9830_3_2":""}</code>
   */
  updateCategory2: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The JSON object containing the metadata state token (for edit conflict resolution), See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. <br><br>NOTE: if this is specified and the call is successful, the most recent metadata token will be returned in the result. */
          "{category_id}_1"?: string;
          /** @description The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time.<br><br>NOTE: If this is specified and the call is successful, the most recent metadata token will be returned in the result. */
          metadata_token?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Category ID '{category_id}' was specified for Categories Update, but a non-matching attribute ('{attribute_key}') was found</li><li>Could not process object, invalid action 'categories-update'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not update metadata (edit conflict). */
      409: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Remove a category from a node
   * @description Removes the given category from the specified node.
   */
  deleteCategory2: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Category ID */
        category_id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-remove'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Upgrade categories on a node
   * @description Upgrade categories on a node to the latest category definitions. If the upgrade operation fails (because of insufficient permissions, or a category is already the latest version, etc) then nothing will happen to any of the categories on the node (ie. none of them will be upgraded).<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Upgrade the category 8479 on the node:<br><code>body = { "category_id":[8479] }</code><br><br>Upgrade the categories 8479 and 7534 on the node:<br><code>body = { "category_id":[8479,7534] }</code>
   */
  upgradeCategory: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The list of category IDs to upgrade on the node, separated by commas (see the examples above). */
          category_id?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["categories_V2EmptyResponse"];
        };
      };
      /** @description Invalid datatype specified for argument "id". */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not upgrade category '{category_id}' on node '{id}', it is already the latest version</li><li>Category ID '{category_id}' is not a category on node '{id}'.</li><li>Insufficient permissions to perform that action</li><li>The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      500: never;
    };
  };
  /**
   * Perform an action against a staged or installed Content Server Application
   * @description Allows for the installation, upgrade, uninstall or deletion of a Content Server Application by name.
   */
  CSApplicationAPICommand: {
    parameters: {
      path: {
        /** @description Install, Uninstall, Upgrade or Delete. */
        action: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The name of the application you wish to install, uninstall, upgrade or delete, e.g. OTRMReports. */
          appName?: string;
        };
      };
    };
    responses: {
      /** @description Server response to action performed on the specified Content Server Application. */
      200: {
        content: {
          "application/json": components["schemas"]["csapplications_V2ResponseCSApplicationsPost"];
        };
      };
      /** @description Invalid datatype specified for argument "appname" or invalid {action} specified. */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Unable to perform the action. Please read the server response or Content Server logs for more detail. */
      500: never;
    };
  };
  /**
   * Creates a Instance for Document Template
   * @description Creates a Instance for selected Document Template. The body must contain information about the parent_id and the template_id. You can provide information about the name, name_multilingual, description, description_multilingual, roles.
   */
  createDocumentTemplateInstance: {
    parameters: {
      query: {
        /** @description The body. Example: {"template_id":139327,"parent_id":15082,"name":"Name","type":144,"description":"","roles":{"categories":{},"classifications":{"create_id":[7052,7053],"id":[]}}} */
        Body: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["doctemplates_DocumentTemplateInstanceInfo"];
        };
      };
      /** @description <ul><li>Could not read object ID {parent_id}</li><li>The instance of the template is not allowed in this location. template id {template_id}, location {parent_id}</li><li>An item with the name {name} already exists.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Error in fetching template node information */
      404: never;
      /** @description Could not create instance from template. {template_id} */
      500: never;
    };
  };
  /**
   * Insertable Properties
   * @description Gets list of Insertable Properties and the associated value.
   */
  insertableProperties: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description The data ID of the document */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["documentproperties_InsertablePropertiesRow"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Initiates a process from a draft process
   * @description Initiates or updates a workflow based on the provided action.<br><br> If action is initiate ,workflow intance will be created based on the draftprocess_id passed in the path with comment as optional filed .<br> if action is formupate , data passed via values body parameters will be set to form data prior initiating the workflow . <br><br>Examples <ul><li>To initiating the workflow with comment as optional.</li><br><code>body:{"action":"Initiate","comment":"start"} </code> <li><br> To prepare the workflow with empty values before initiating the workflow </li> <br> <code> body : {"action":"formUpdate","values":{"WorkflowForm":{}}} </code> <br><br> <li> To update the form of workflow before initiating the workflow </li> <br> <code> body : {"action":"formUpdate","values":{"WorkflowForm_1x4x1x2":"ABC"}} </code>
   */
  initiateProcess: {
    parameters: {
      path: {
        /** @description Draft process id. */
        draftprocess_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Standard action to be executed.Allowed actions 'initiate','formupdate'. */
          action?: string;
          /** @description Workflow comment. */
          comment?: string;
          /** @description The JSON object containing the WorkflowForm values {"WorkflowForm_1x4x1x2":"ABC"} .  See the [IMPLEMENTATION NOTES] for a more detailed explanation. */
          values?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["draftprocesses_DraftProcess_PutV2EmptyResponse"];
        };
      };
      /** @description Following error scenarios might occur while using the service <br><ul><li>Could not retrieve action.</li><li>The requested action is unknown. Allowed actions 'initiate','formupdate'.</li><li>Could not Loadmap .</li><li>Could not GetNodeByID.</li></ul> */
      400: {
        content: {
          "application/json": components["schemas"]["draftprocesses_DraftProcess_NodeNotFound"];
        };
      };
      /** @description Authentication Required */
      401: {
        content: {
          "application/json": components["schemas"]["draftprocesses_DraftProcess_Authentication"];
        };
      };
    };
  };
  /**
   * Creates a draft process.
   * @description Creates a draft process and optional custom data can be set.<br><br>When request has only workflow_id ,it creates temporary workflow based on the workflow_id .<br>If request is having optional form param doc_ids ,api sets the custom data to process created by workflow_id .<br><br>The following examples will assume that there is a workflow_id 6686 and doc_ids 384,9684 <ul><li>Creating the process with workflow_id</li><br><code>{"workflow_id":6686}</code><br><br><li>Creating the process with workflow_id and setting custom data via doc_ids ( Note : Multiple doc ids to be separated with coma) </li><br> <code>{"workflow_id":6686,"doc_ids":"384,9684"}</code><br>
   */
  createDraftProcess: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Integer .See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. */
          workflow_id?: number;
          /** @description To set any custom data to the workflow </br>its JSON string.See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. */
          doc_ids?: string;
        };
      };
    };
    responses: {
      /** @description OK <br> Note : workflow_type will be in the result only for the setting up the custom data to the process , i.e when request having doc_ids */
      200: {
        content: {
          "application/json": components["schemas"]["draftprocesses_DraftProcess_V2EmptyResponse"];
        };
      };
      /** @description Following error scenarios might occur while using the service <br><ul><li>Could not Loadmap.</li><li>Workflow Map has no versions.</li><li>Error getting node from ID</li> <li>Could not retrieve specified version from map.</li></ul> */
      400: {
        content: {
          "application/json": components["schemas"]["draftprocesses_DraftProcess_NodeNotFound"];
        };
      };
      /** @description Authentication Required */
      401: {
        content: {
          "application/json": components["schemas"]["draftprocesses_DraftProcess_Authentication"];
        };
      };
    };
  };
  /**
   * Export System Settings to a report file
   * @description Export System Settings to a report file
   */
  Export: {
    parameters: {
      query?: {
        /** @description Indicates report should include default values */
        includeDefaults?: boolean;
        /** @description Extension of report format */
        fileFormat?: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["export_Export"];
        };
      };
      /** @description {file} export failed */
      400: never;
      /** @description {file} export failed: system error */
      500: never;
    };
  };
  /**
   * List facets on a node
   * @description Gets facet information for the specified node ID.  <br><br>NOTE: If the node is a Virtual Folder the facets used to generate this object will be returned by default.
   */
  GetFacets: {
    parameters: {
      query?: {
        /** @description Specify facets that will alter the available facets for this node using the following syntax: <br>{facetID}:{value1}|{value2} <br><br>NOTE: If your value contains a '|', it must be escaped as '{|}'<br><br>For example: <br>&where_facet=2100:re09<br>&where_facet=2095:0|144<br>&where_facet=2100:dy20160504<br>&where_facet=2109:this{|}that|other */
        where_facet?: string[];
        /** @description Limit the number of available facet values to the top values only (ie. maximum values to display).<br><br> If specified with a value (ie. top_values_limit=5), the number of returned facet values will be set to that.<br><br> If specified without a value (ie. top_values_limit), then the default maximum values to display (as configured on Content Server) will be used.<br><br>NOTE: Relative date facets such as 'Modified Date' are not affected by this parameter at all, also selected facets are similarly unaffected */
        top_values_limit?: string[];
        /** @description Limit the output of the available facets and their values to the specified facet ID(s). This can be specified multiple times (ex. ?facet_id=5880&facet_id=5885)<br><br>NOTE: results.data.facets will always show the selected facet(s) (if any). */
        facet_id?: number;
        /** @description Filter the values of the available facets that match (including case-insensitive partial matches) the specified value<br><br>For example: <br><code>&find_more=ABC123</code> will return all facet values in available facets that match 'ABC123'. It also returns partial matches like 'AB1C23', 'ABC132', 'ABC213', etc. <br><br>NOTE: find_more must be specified with at least 3 or more Latin characters, or at least one non-Latin character. */
        find_more?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["facets_FacetResponse"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>The 'top_values_limit' parameter contains invalid value(s) '{<non-available facet ID>}'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Alpaca form for creating a category on a node
   * @description Gets the Alpaca form for creating a category on a node.
   */
  categoriescreateform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The ID of the category to create on the node */
        category_id?: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_CategoriesCreateFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Category {category_id} has no version</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form for updating a category on a node
   * @description Gets the Alpaca form for updating a single category applied to a node. The metadata state tokens (for edit conflict resolution) will be under data.{category ID}_1.metadata_token
   */
  categoriesupdateform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The ID of the category */
        category_id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_CategoriesUpdateFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Argument 'category_id' is required</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for arguement 'category_id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Category ID {category_id} is not a category on node {id}</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form for copying a node
   * @description Gets the Alpaca form for copying a node.  If adding categories, the following must be specified:  'parent_id', 'id' (only one id - adding categories during a bulk copy is not supported), 'inheritance', 'category_id' (can be specified multiple times). Example: ?parent_id=2000&id=1234&inheritance=0&category_id=4444&category_id=5555. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation.
   */
  copyform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The ID of the destination node */
        parent_id?: number;
        /** @description The requested category inheritance model. 0 = 'Original' (the original node's categories), 1 = 'Destination' (the destination node's categories), 2 = 'Merged' (a merge of the original and destination nodes' categories) */
        inheritance?: 0 | 1 | 2;
        /** @description The ID of the category to be added (can be specified multiple times, ex. category_id=4321&category_id=7878).  In order to use this parameter we need to specify 'parent_id', 'id', and 'inheritance' (ex. ?parent_id=2000&id=1111&inheritance=0&category_id=3948) */
        category_id?: string[];
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_CopyFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>The {type} type does not support the 'Copy' action</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form for creating a node
   * @description Gets the Alpaca form for creating a node.
   */
  createform: {
    parameters: {
      query: {
        /** @description The subtype of the node to be created */
        type: number;
        /** @description The ID of the parent node for the node that will be created */
        parent_id: number;
        /** @description The ID of the category to add to the node (this parameter can be called multiple times, ex. category_id=111&category_id=222) */
        category_id?: string[];
        /** @description Value for the Additional Node Attribute */
        "{attribute_name}"?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_CreateFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'parent_id' is required</li><li>Argument 'type' is required</li><li>Invalid datatype specified for argument 'parent_id'</li><li>Invalid datatype specified for argument 'type'</li><li>Invalid datatype specified for argument 'category_id'</li><li>Category ID {category_id} is not a valid category.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Subtype {type} not registered</li><li>Could not get a node for {id}</li><li>Could not process object, type {type} has no action 'create'</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form for filing a node
   * @description Gets the Alpaca form for filing a node.
   */
  GetFormFileNode: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_GetFormFileNodeInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>The Intelligent Filing Feature is not enabled</li><li>Error getting CS node</li><li>Invalid node type</li><li>Error getting form</li><li>Error creating form</li></ul>" */
      500: never;
    };
  };
  /**
   * Alpaca form for moving a node
   * @description Gets the Alpaca form for moving a node.  If adding categories, the following must be specified:  'parent_id', 'id' (only one id - adding categories during a bulk move is not supported), 'inheritance', 'category_id' (can be specified multiple times).  Example: ?parent_id=2000&id=1234&inheritance=0&category_id=4444&category_id=5555
   */
  moveform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The ID of the destination node */
        parent_id?: number;
        /** @description The requested category inheritance model. 0 = 'Original' (the original node's categories), 1 = 'Destination' (the destination node's categories), 2 = 'Merged' (a merge of the original and destination nodes' categories) */
        inheritance?: 0 | 1 | 2;
        /** @description The ID of the category to be added (can be specified multiple times, ex. category_id=4321&category_id=7878).  This parameter requires 'parent_id', only one of 'id', and 'inheritance' (ex. ?parent_id=2000&id=1111&inheritance=0&category_id=...) */
        category_id?: string[];
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_MoveFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>The {type} type does not support the 'Copy' action</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form detailing the general properties of a node
   * @description Gets the Alpaca form detailing the general properties of a node. The metadata state token (for edit conflict resolution) will be under data.metadata_token
   */
  generalpropertiesform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_GeneralPropertiesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Alpaca form for renaming node
   * @description Gets the Alpaca form for renaming a node.
   */
  renameform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_RenameFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Alpaca form for running a WebReport
   * @description Returns the Alpaca form for running a WebReport. (*) against a field name denotes that the field supports tag replacement.
   */
  runform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_RunPropertiesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Alpaca form detailing the specific properties of a node
   * @description Gets the Alpaca form detailing the specific properties of a node.
   */
  specificpropertiesform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_SpecificPropertiesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Alpaca form(s) for updating a node
   * @description Gets the Alpaca form(s) for updating a node. The metadata state token (for edit conflict resolution) on the node data will be under data.metadata_token. The category-specific metadata state tokens will be on the categories form (role_name: categories) under data.{category ID}.{category ID}_1.metadata_token
   */
  updateforminfo: {
    parameters: {
      query: {
        /** @description The ID of the node that will be updated */
        id: number;
        /** @description If roles are specified then only forms for these roles are returned (e.g. role=categories&role=versionscontrol). */
        role?: string[];
        /** @description Value for the Additional Node Attribute */
        "{attribute_name}"?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_UpdateFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not process object, type {type} has no action 'update'</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form for displaying the categories on a version
   * @description Gets the Alpaca form for displaying the categories on a version.
   */
  versionscategoriesform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The version number of the node */
        version_number: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_VersionsCategoriesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Argument 'version_number' is required.</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Error getting version for node.</li><li>Could not process object, type {type} has no role 'VersionCategories'.</li><li>Could not get a node for {id}</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form for creating a version on a node
   * @description Gets the Alpaca form for creating a version on a node.
   */
  versionscreateform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_VersionsCreateFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>The {type} type does not support the 'Versions-add' action</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form for updating a version on a node
   * @description Gets the Alpaca form for updating a version on a node.
   */
  versionsupdateform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The version number to update */
        version_number: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_VersionsUpdateFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li><li>Attribute 'version_number' is required</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>The version number {version_number} is not a version on the node {id}</li><li>The {type} type does not support the 'Versions-update' action</li></ul> */
      500: never;
    };
  };
  /**
   * Alpaca form detailing the general properties of a version
   * @description Gets the Alpaca form detailing the general properties of a version.
   */
  versiongeneralpropertiesform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The version number of the node */
        version_number: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_VersionGeneralPropertiesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Argument 'version_number' is required</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Alpaca form detailing the specific properties of a version
   * @description Gets the Alpaca form detailing the specific properties of a version.
   */
  versionspecificpropertiesform: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The version number of the node */
        version_number: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_VersionSpecificPropertiesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Argument 'version_number' is required</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Alpaca forms detailing the specific properties of a workflow
   * @description Gets the Alpaca forms for displaying a workflow item.
   */
  workflowpropertiesform: {
    parameters: {
      query: {
        /** @description The ID of the workflow */
        process_id: number;
        /** @description The ID of the sub workflow */
        subprocess_id: number;
        /** @description The ID of the task in the workflow */
        task_id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_WorkflowPropertiesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'process_id' is required</li><li>Argument 'subprocess_id' is required</li><li>Argument 'task_id' is required</li><li>Invalid datatype specified for argument 'process_id'</li><li>Invalid datatype specified for argument 'subprocess_id'</li><li>Invalid datatype specified for argument 'task_id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a workflow for {process_id}, {subprocess_id}, {task_id} */
      500: never;
    };
  };
  /**
   * Alpaca forms detailing the specific properties of a workflow
   * @description Gets the Alpaca forms for displaying a draft workflow item.
   */
  workflowpropertiesform2: {
    parameters: {
      query: {
        /** @description The ID of the draft workflow */
        draftprocess_id: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_WorkflowPropertiesFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'draftprocess_id' is required</li><li>Invalid datatype specified for argument 'draftprocess_id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a draft workflow for {draftprocess_id} */
      500: never;
    };
  };
  /**
   * Alpaca form for a user
   * @description Gets the Alpaca form for a user.
   */
  getuserform: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description The id of the user */
        user_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_UserFormInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'user_id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a member for {id} */
      500: never;
    };
  };
  /**
   * Alpaca Forms for instance creation from template
   * @description Fetches the meta data for document templates to render the create form while creating an instance to a selected template
   */
  GetCreateForm: {
    parameters: {
      query: {
        /** @description Parent ID */
        parent_id: number;
        /** @description Template ID */
        template_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["forms_DoctemplatesCreateResponse"];
        };
      };
      /** @description Authentication is required. */
      401: never;
      /** @description Could not get create form for {id} */
      500: never;
    };
  };
  /**
   * Autofile a document
   * @description Files a document from an Intelligent Filing Folder.
   */
  AutofileDocument: {
    parameters: {
      query?: {
        /** @description The Business Workspace instance to add the document to */
        filing_destination_id?: number;
        /** @description The classification ID for the Document Type to use to choose the sub-folder */
        filing_classification_id?: number;
        /** @description The parent container to add the document to */
        parent_id?: number;
      };
      path: {
        /** @description The ID of the document */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["intelligentfiling_V2ResponseIntelligentFilingPost"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>The Intelligent Filing Feature is not enabled</li><li>Error getting document node</li><li>Invalid node type</li><li>Error filing document</li></ul>" */
      500: never;
    };
  };
  /**
   * Create/check status of an Admin Server
   * @description Checks on the status of an existing Admin Server or creates it if it doesn't exist
   */
  lladmin: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The Admin Server name (in the form of 'AdminServer-XX', where XX is a 2 digit number (01, 02, 10, 11....)) */
          alias: string;
          /** @description Hostname or IP of the Admin Server */
          hostName: string;
          /** @description Port number of the Admin Server */
          portNumber: number;
          /**
           * Format: password
           * @description The password set on the Admin Server
           */
          password: string;
          /** @description A description for the Admin Server */
          Description?: string;
          /** @description Whether to mark the Admin Server as a default server */
          defaultServer?: boolean;
          /** @description Whether to setup the Admin Server as a File Cache server */
          FileCacheEnabled?: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["lladmin_setup"];
        };
      };
      /** @description An internal error occured */
      500: never;
    };
  };
  /**
   * Search for user | Search for group
   * @description Search for a user or group
   */
  SearchMember: {
    parameters: {
      query?: {
        /** @description Specify 0 for a user, and 1 for a group */
        where_type?: number;
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column (Using prefixes such as sort=asc_name or sort=desc_name ). Format can be sort = id, sort = name, sort = first_name, sort = last_name, sort = group_id, sort = mailaddress. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string;
        /** @description Filters the results, returning the users with the specified query string in their log-in name, last name or first name, and returning the groups with the specified query string in their group name. <br><br>The query value will be used to perform a search within the log-in name, first name and last name properties for users and group name for groups to see if that value is contained within any of those properties. This differs from the user search that is performed in Classic UI where it searches for a specific property that begins with the value provided by the user.<br><br>Note: The query value cannot have wildcard characters (*, #, etc) as wildcard characters are not supported.<br><br>Add '?query=value' to the end of the URL string to use this parameter: <code>/v1/members?query=value</code> */
        query?: string;
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_SearchMember"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'where_type'</li><li>Invalid datatype specified for argument 'limit'</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Create group | Create user
   * @description Creates a user or group.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Example to create a user:<br><br><code>body : { "type": 0, "name": "new_user", "group_id": 1001 }</code><br><br>Example to create a group:<br><br><code>body : { "type": 1, "name": "new_group" }</code><br><br><b>The parameters for creating a user or group are listed below:</b><hr></hr>
   *
   * Create user
   * - <b>required fields</b>: type, name, group_id
   * - defaults: type = **0**
   *
   * Create group
   * - <b>required fields</b>: type, name
   * - defaults: type = **1**
   */
  CreateMember: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The type of member to create (e.g. 0 for a user, and 1 for a group). */
          type?: number;
          /** @description Name of the user or group */
          name?: string;
          /** @description The group ID of the user's base group. This is a required field if type is set to 0 (user) */
          group_id?: number;
          /** @description First name of the user */
          first_name?: string;
          /** @description Last name of the user */
          last_name?: string;
          /** @description Middle name of the user */
          middle_name?: string;
          /** @description The user's title */
          title?: string;
          /** @description The user's business email address */
          business_email?: string;
          /** @description The user's business phone number */
          business_phone?: string;
          /** @description The user's business fax number */
          business_fax?: string;
          /** @description The user's office location */
          office_location?: string;
          /** @description The time zone the user is in */
          time_zone?: number;
          /** @description The language code of the user's preferred display language */
          display_language?: string;
          privilege_content_manager?: boolean;
          privilege_login?: boolean;
          privilege_public_access?: boolean;
          privilege_modify_users?: boolean;
          privilege_modify_groups?: boolean;
          privilege_user_admin_rights?: boolean;
          privilege_grant_discovery?: boolean;
          privilege_system_admin_rights?: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_CreateMember"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'type'</li><li>Error creating a new user</li><li>Could not create group {name}: Specified name already exists</li><li>Error retrieving information for the base group</li><li>Member type {type} not registered</li><li>Could not set feature Group. The value must be an integer</li><li>Missing required parameter 'Group'</li><li>Missing required parameter 'Name'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Search for user | Search for group
   * @description Search for a user or group
   */
  SearchMember2: {
    parameters: {
      query?: {
        /** @description Specify 0 for a user, and 1 for a group */
        where_type?: number;
        /** @description Filters the results, returning the users where the business email matches the specified string */
        where_business_email?: string;
        /** @description Filters the results, returning the users where the login name matches the specified string */
        where_name?: string;
        /** @description Filters the results, returning the users where the first name matches the specified string */
        where_first_name?: string;
        /** @description Filters the results, returning the users where the last name matches the specified string */
        where_last_name?: string;
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column (Using prefixes such as sort=asc_name or sort=desc_name ). Format can be sort = id, sort = name, sort = first_name, sort = last_name, sort = group_id, sort = mailaddress. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string;
        /** @description Filters the results, returning the users with the specified query string in any of the following fields: log-in name, first name, last name, email address, and groups with the specified query string in the group name. <br> NOTE: query cannot be used together with any combination of: where_name, where_first_name, where_last_name, where_business_email.<br><br>The query value will be used to perform a search within the log-in name, first name, last name and email address properties for users and group name for groups to see if that value is contained within any of those properties. This differs from the user search that is performed in Classic UI where it searches for a specific property that begins with the value provided by the user<br><br>Note: The query value cannot have wildcard characters (*, #, etc) as wildcard characters are not supported.<br><br>Add '?query=value' to the end of the URL string to use this parameter: <code>/v2/members?query=value</code> */
        query?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseMembersSearch"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'where_type'</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid limit</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li><li>The parameter(s) 'query' cannot be used together with parameter(s) 'where_business_email, where_name, where_first_name, where_last_name '</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Create user | Create group
   * @description Creates a user or group.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Example to create a user:<br><br><code>body : { "type": 0, "name": "new_user", "group_id": 1001 }</code><br><br>Example to create a group:<br><br><code>body : { "type": 1, "name": "new_group" }</code><br><br><b>The parameters for creating a user or group are listed below:</b><hr></hr>
   *
   * Create user
   * - <b>required fields</b>: type, name, group_id
   * - defaults: type = **0**
   *
   * Create group
   * - <b>required fields</b>: type, name
   * - defaults: type = **1**
   */
  CreateMember2: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The type of member to create */
          type?: number;
          /** @description Name of the group */
          name?: string;
          /** @description The group ID of the user's base group (if creating a group, this parameter is not required). */
          group_id?: number;
          /** @description The user's password */
          password?: string;
          /** @description First name of the user */
          first_name?: string;
          /** @description Last name of the user */
          last_name?: string;
          /** @description Middle name of the user */
          middle_name?: string;
          /** @description The user's title */
          title?: string;
          /** @description The user's business email address */
          business_email?: string;
          /** @description The user's business phone number */
          business_phone?: string;
          /** @description The user's business fax number */
          business_fax?: string;
          /** @description The user's office location */
          office_location?: string;
          /** @description The time zone the user is in */
          time_zone?: number;
          /**
           * Format: date
           * @description The user's birthday
           */
          birth_date?: string;
          /** @description The user's personal mobile phone number */
          cell_phone?: string;
          /** @description The user's bookmarked url link 1 */
          personal_url_1?: string;
          /** @description The user's bookmarked url link 2 */
          personal_url_2?: string;
          /** @description The user's bookmarked url link 3 */
          personal_url_3?: string;
          /** @description The user's personal email address */
          personal_email?: string;
          /** @description The user's personal interests and hobbies */
          personal_interests?: string;
          /** @description The user's personal home page */
          personal_website?: string;
          /** @description The user's home address 1 */
          home_address_1?: string;
          /** @description The user's home address 2 */
          home_address_2?: string;
          /** @description The user's home address 3 */
          home_address_3?: string;
          /** @description The user's personal fax number */
          home_fax?: string;
          /** @description The user's personal home phone number */
          home_phone?: string;
          /** @description The user's gender */
          gender?: string;
          /** @description The user's office mobile phone number */
          pager?: string;
          /** @description The ID of the node for the user's profile photo */
          photo_id?: number;
          /** @description The language code of the user's preferred display language */
          display_language?: string;
          privilege_content_manager?: boolean;
          privilege_login?: boolean;
          privilege_public_access?: boolean;
          privilege_modify_users?: boolean;
          privilege_modify_groups?: boolean;
          privilege_user_admin_rights?: boolean;
          privilege_grant_discovery?: boolean;
          privilege_system_admin_rights?: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseMembersCreate"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not process object, invalid action 'create'</li><li>Invalid datatype specified for argument 'type'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Member type {type} not registered</li><li>Missing required parameter 'Group'</li><li>Missing required parameter 'Name'</li></ul> */
      500: never;
    };
  };
  /**
   * Get user info | Get group info | Get restricted privilege info
   * @description Gets user's information | Gets group's information | Gets restricted privilege's information
   */
  GetMemberInfo: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description The ID of the user, group, or privilege */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_MemberInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li><li>Could not get a member for {id}</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Insufficient privileges. */
      500: never;
    };
  };
  /**
   * Update user | Update group
   * @description Updates user's information | Updates group's information
   */
  UpdateMemberGroup: {
    parameters: {
      path: {
        /** @description The ID of the user or group */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of the user */
          name?: string;
          /** @description The group ID of the user's base group */
          group_id?: number;
          /** @description Exclude all fields except the one that is specified */
          fields?: string;
          /** @description Expand all fields that belong to the specified person */
          expand?: string;
          /** @description Expand specified field (ex. 'id').  Note: field must belong to a persona */
          expand_fields?: string;
          /** @description User's password */
          password?: string;
          /** @description User's first name */
          first_name?: string;
          /** @description User's middle name */
          middle_name?: string;
          /** @description User's last name */
          last_name?: string;
          /** @description User's title */
          title?: string;
          /** @description User's business email */
          business_email?: string;
          /** @description User's business phone number */
          business_phone?: string;
          /** @description User's business fax number */
          business_fax?: string;
          /** @description User's office location */
          office_location?: string;
          /** @description User's time zone */
          time_zone?: number;
          /**
           * Format: date
           * @description The user's birthday
           */
          birth_date?: string;
          /** @description The user's personal mobile phone number */
          cell_phone?: string;
          /** @description The user's gender */
          gender?: number;
          /** @description The user's home address 1 */
          home_address_1?: string;
          /** @description The user's home address 2 */
          home_address_2?: string;
          /** @description The user's personal fax number */
          home_fax?: string;
          /** @description The user's personal home phone number */
          home_phone?: string;
          /** @description The user's office mobile phone number */
          pager?: string;
          /** @description The user's personal email address */
          personal_email?: string;
          /** @description The user's personal interests and hobbies */
          personal_interests?: string;
          /** @description The user's bookmarked url link 1 */
          personal_url_1?: string;
          /** @description The user's bookmarked url link 2 */
          personal_url_2?: string;
          /** @description The user's bookmarked url link 3 */
          personal_url_3?: string;
          /** @description The user's personal home page */
          personal_website?: string;
          /** @description The ID of the node for the user's profile photo */
          photo_id?: number;
          /** @description The language code of the user's preferred display language */
          display_language?: string;
          /** @description TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_content_manager?: boolean;
          /** @description TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_login?: boolean;
          /** @description TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_public_access?: boolean;
          /** @description TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_modify_users?: boolean;
          /** @description TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_modify_groups?: boolean;
          /** @description TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_user_admin_rights?: boolean;
          /** @description TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_system_admin_rights?: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_UpdateMemberGroup"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Could not process object, invalid request</li><li>Could not set feature Leader, value must be an Integer</li><li>Could not set feature Group, value must be an Integer</li><li>Could not set feature TimeZone, value must be an Integer</li><li>Could not set feature Public Access, value must be a Boolean</li><li>Could not set feature Create/Modify Users, value must be a Boolean</li><li>Could not set feature Create/Modify Groups, value must be a Boolean</li><li>Could not set feature User Administration Rights, value must be a Boolean</li><li>Could not set feature System Administration Rights, value must be a Boolean</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Delete user | Delete Group
   * @description Delete user or group.
   */
  DeleteMember: {
    parameters: {
      path: {
        /** @description The ID of the user or group */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_DeleteMember"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not process object, invalid request</li><li>Could not get a member for {id}</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get profile photo
   * @description Gets the specified member's profile photo. If the user does not have permission to the profile photo no content and a status code of 500 will be returned.
   */
  GetMemberInfo2: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description The ID of the user or group */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description Not modified. */
      304: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li><li>Could not get a member for {id}</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description No profile photo is available. */
      404: never;
    };
  };
  /**
   * Get user info | Get group info | Get restricted privilege info
   * @description Gets a user's information | Gets a group's information | Gets a restricted privilege's information
   */
  GetMemberInfo4: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
      };
      path: {
        /** @description The ID of the user, group, or restricted privilege */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseMembersGet"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a member for {id}</li><li>Insufficient privileges.</li></ul> */
      500: never;
    };
  };
  /**
   * Update user | Update group
   * @description Updates a user's information | Updates a group's information
   */
  UpdateMember: {
    parameters: {
      path: {
        /** @description The ID of the user or group */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of the user or group */
          name?: string;
          /** @description The group ID of the user's base group */
          group_id?: number;
          /** @description [Group only] The user ID of the group leader */
          leader_id?: number;
          /** @description [User only] User's password */
          password?: string;
          /** @description [User only] User's first name */
          first_name?: string;
          /** @description [User only] User's middle name */
          middle_name?: string;
          /** @description [User only] User's last name */
          last_name?: string;
          /** @description [User only] User's title */
          title?: string;
          /** @description [User only] User's business email */
          business_email?: string;
          /** @description [User only] User's business phone number */
          business_phone?: string;
          /** @description [User only] User's business fax number */
          business_fax?: string;
          /** @description [User only] User's office location */
          office_location?: string;
          /** @description [User only] User's time zone */
          time_zone?: number;
          /**
           * Format: date
           * @description [User only] The user's birthday
           */
          birth_date?: string;
          /** @description [User only] The user's personal mobile phone number */
          cell_phone?: string;
          /** @description [User only] The user's bookmarked url link 1 */
          personal_url_1?: string;
          /** @description [User only] The user's bookmarked url link 2 */
          personal_url_2?: string;
          /** @description [User only] The user's bookmarked url link 3 */
          personal_url_3?: string;
          /** @description [User only] The user's personal email address */
          personal_email?: string;
          /** @description [User only] The user's personal interests and hobbies */
          personal_interests?: string;
          /** @description [User only] The user's personal home page */
          personal_website?: string;
          /** @description [User only] The user's home address 1 */
          home_address_1?: string;
          /** @description [User only] The user's home address 2 */
          home_address_2?: string;
          /** @description [User only] The user's home address 3 */
          home_address_3?: string;
          /** @description [User only] The user's personal fax number */
          home_fax?: string;
          /** @description [User only] The user's personal home phone number */
          home_phone?: string;
          /** @description [User only] The user's gender */
          gender?: number;
          /** @description [User only] The user's office mobile phone number */
          pager?: string;
          /** @description [User only] The ID of the node for the user's profile photo */
          photo_id?: number;
          /** @description The language code of the user's preferred display language */
          display_language?: string;
          /** @description [User only] TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_content_manager?: boolean;
          /** @description [User only] TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_login?: boolean;
          /** @description [User only] TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_public_access?: boolean;
          /** @description [User only] TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_modify_users?: boolean;
          /** @description [User only] TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_modify_groups?: boolean;
          /** @description [User only] TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_user_admin_rights?: boolean;
          /** @description [User only] TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators */
          privilege_system_admin_rights?: boolean;
          /** @description Exclude all fields except the one that is specified */
          fields?: string;
          /** @description Expand all fields that belong to the specified person */
          expand?: string;
          /** @description Expand specified field (ex. 'id').  Note: field must belong to a persona */
          expand_fields?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2UpdateMember"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Could not process object, invalid request</li><li>Could not set feature Group, value must be an Integer</li><li>Could not set feature Leader, value must be an Integer</li><li>Could not set feature TimeZone, value must be an Integer</li><li>Could not set feature Public Access, value must be a Boolean</li><li>Could not set feature Create/Modify Users, value must be a Boolean</li><li>Could not set feature Create/Modify Groups, value must be a Boolean</li><li>Could not set feature User Administration Rights, value must be a Boolean</li><li>Could not set feature System Administration Rights, value must be a Boolean</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Delete user | Delete group
   * @description Delete user or group.
   */
  DeleteMember2: {
    parameters: {
      path: {
        /** @description The ID of the user or group to delete. */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseEmpty"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a member for {id}</li><li>Could not delete member {id}, already deleted</li></ul> */
      500: never;
    };
  };
  /**
   * Lists the members of a group | Lists the members of a restricted privilege
   * @description Lists the members of a group or restricted privilege and returns their information.
   */
  ListMembers: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Ascending order by named column.  Format can be sort=name or sort=first_name or sort=last_name or sort=mailaddress. */
        sort?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description The ID of the group or restricted privilege */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseBrowseMembersSearch"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li><li>Invalid datatype specified for argument 'where_type'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a member for {id}</li><li>Invalid group {id}</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li><li>Could not set feature limit, the value 0 is less than the minimum value (1)</li><li>Insufficient privileges</li></ul> */
      500: never;
    };
  };
  /**
   * Add members to a group | Add members to a restricted privilege
   * @description Add members to a group. | Add members to a restricted privilege.
   */
  AddMember: {
    parameters: {
      path: {
        /** @description The ID of the group or restricted privilege */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The IDs of the users and/or groups to add. */
          member_id?: string[];
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseEmpty"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not add a member: 'Could not locate specified child name.'</li><li>Could not set feature Member ID, value must be a Integer</li><li>Could not get a member for {id}</li><li>Insufficient privileges</li></ul> */
      500: never;
    };
  };
  /**
   * Remove members from a group | Remove members from a restricted privilege
   * @description Remove members from a group. | Remove members from a restricted privilege.
   */
  RemoveMember: {
    parameters: {
      query: {
        /** @description The IDs of the users and/or groups to remove. */
        member_id: string[];
      };
      path: {
        /** @description The ID of the group or restricted privilege. */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseEmpty"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not delete a member: 'Could not locate specified child name.'</li><li>Could not set feature Member ID, value must be a Integer</li><li>Could not get a member for {id}</li><li>Insufficient privileges</li></ul> */
      500: never;
    };
  };
  /**
   * Search for groups where currently logged in user is a member
   * @description Get list of groups where currently logged in user is a member.
   */
  SearchGroups: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseGroupsSearch"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li><li>Could not set feature Limit, the value 0 is less than the minimum value (1)</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * List the Object Types that can be created by the authenticated user
   * @description Get the list of Object Types that can be created by the authenticated user.
   */
  ObjectTypes: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseObjectTypes"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li><li>Could not set feature Limit, the value 0 is less than the minimum value (1)</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get recently accessed list
   * @description Gets a member's recently accessed list. This call will return a maximum of 25 items.
   */
  GetAccessed: {
    parameters: {
      query?: {
        /** @description View class to filter on. */
        class_mask?: number;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        /** @description Filters the results, returning the recently accessed items with the specified filter string in their name */
        where_name?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
        /** @description Specify subtype(s) which should be returned (144 for document, 749 for email and so on). Multiple where_type parameters can be specified. */
        where_type?: string[];
        /** @description Specify container ID (parent ID) which the recent items belong to. Items directly in the parent and in any sub-folders will be returned. */
        where_parent_id?: number;
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column (Using prefixes such as sort=asc_name or sort=desc_name ). */
        sort?: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseAccessed"];
        };
      };
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get recent targets
   * @description Get the current user's list of recently targeted containers. This call will return a maximum of 15 items.
   */
  GetTargets: {
    parameters: {
      query?: {
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseCollection"];
        };
      };
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get assignments
   * @description Gets a user's Assignments.
   */
  GetAssignments: {
    parameters: {
      query?: {
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseAssignments"];
        };
      };
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get Favorites
   * @description Gets a user's Favorites.
   */
  GetFavorites: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column (name, order, tab_id). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.  Up to two columns can be specified. */
        sort?: string[];
        /** @description Filters the results, returning the favorites with the specified filter string in their name */
        where_name?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseCollectionFavorites"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Invalid value for sort</li><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul> */
      500: never;
    };
  };
  /**
   * Get Favorites Tab
   * @description Gets a user's Favorites Tabs.
   */
  GetFavoritesTab: {
    parameters: {
      query?: {
        /** @description Order by named column (name, order). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseCollectionFavoritesTab"];
        };
      };
      /** @description Authentication Required */
      401: never;
      /** @description Invalid value for sort */
      500: never;
    };
  };
  /**
   * Add a Favorites Tab
   * @description Adds a Favorites Tab for the current user.
   */
  AddFavoritesTabs: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The Name of the tab */
          name?: string;
          /** @description The Order of the tab */
          order?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResultFavoritesTab"];
        };
      };
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Argument 'name' is required</li><li>Invalid value for order</li></ul> */
      500: never;
    };
  };
  /**
   * Get Favorites in a Tab
   * @description Gets a user's Favorites in a Tab.
   */
  GetFavoritesInTab: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column (name, order). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string[];
        /** @description Filters the results, returning the favorites with the specified filter string in their name */
        where_name?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description The ID of the tab for the favorites to list */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseCollectionFavorites"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Invalid value for tabID</li><li>Invalid value for sort</li><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul> */
      500: never;
    };
  };
  /**
   * Get unsorted Favorites
   * @description Gets a user's Unsorted Favorites.
   */
  GetUnsortedFavorites: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column (name, order). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string[];
        /** @description Filters the results, returning the favorites with the specified filter string in their name */
        where_name?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseCollectionFavorites"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Invalid value for sort</li><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul> */
      500: never;
    };
  };
  /**
   * Update a Favorite
   * @description Updates a favorite
   */
  UpdateFavorite: {
    parameters: {
      path: {
        /** @description The ID of the favorite to update */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The favorite's new name */
          name?: string;
          /** @description The favorite's new order */
          order?: number;
          /** @description The favorite's new tab id (NOTE: Enter 0 (zero) to untab the favorite) */
          tab_id?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseEmpty"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Invalid value for order</li><li>Invalid value for node ID</li></ul> */
      500: never;
    };
  };
  /**
   * Add a Favorite
   * @description Adds a Favorite for the current user.
   */
  AddFavorite: {
    parameters: {
      path: {
        /** @description The ID of the favorite to add */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_AddFavorite"];
        };
      };
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not set feature Node ID, value must be a Integer</li></ul> */
      500: never;
    };
  };
  /**
   * Remove a Favorite
   * @description Removes a Favorite for the current user.
   */
  RemoveFavorite: {
    parameters: {
      path: {
        /** @description The ID of the favorite to remove */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseEmpty"];
        };
      };
      /** @description Authentication Required */
      401: never;
      /** @description Could not set feature Node ID, value must be a Integer */
      500: never;
    };
  };
  /**
   * Update a Favorites Tab
   * @description Updates a favorites tab
   */
  UpdateFavoritesTab: {
    parameters: {
      path: {
        /** @description The ID of the tab to update */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The tab's new name */
          name?: string;
          /** @description The tab's new order */
          order?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseEmpty"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Invalid value for order</li><li>Invalid value for tab ID</li></ul> */
      500: never;
    };
  };
  /**
   * Remove a Favorites Tab
   * @description Remove a Favorites Tab and the Favorites associated with it for the current user.
   */
  RemoveFavoritesdTab: {
    parameters: {
      path: {
        /** @description The ID of the tab to remove */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseEmpty"];
        };
      };
      /** @description Authentication Required */
      401: never;
      /** @description Invalid Value For tab ID */
      500: never;
    };
  };
  /**
   * Get Reserved Items
   * @description Get the objects reserved by the authenticated user.
   */
  GetReservedItems: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string;
        /** @description Filters the results, returning the objects with the specified filter string in their name */
        where_name?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2ResponseCollectionReserved"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul> */
      500: never;
    };
  };
  /**
   * Get Large File Upload settings
   * @description Gets the current settings for Large File Upload.
   */
  multipartUploadSettings: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["multipart_GetSettings"];
        };
      };
      /**
       * @description <ul>
       *   <li>Bad Request - Invalid URL</li>
       *   <li>The REST API URL could not be found in the mappings registry</li>
       * </ul>
       */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Start a Large File Upload
   * @description Starts a Large File Upload session.
   */
  multipartUploadStart: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of file being uploaded (non-empty) */
          file_name?: string;
          /** @description Size of file being uploaded (in bytes) */
          file_size?: number;
          /** @description MIME type of file being uploaded (non-empty) */
          mime_type?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["multipart_StartUpload"];
        };
      };
      /**
       * @description <ul>
       *   <li>Bad Request - Invalid URL</li>
       *   <li>The REST API URL could not be found in the mappings registry</li>
       *   <li>Pattern of argument was not recognized.</li>
       * </ul>
       */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Invalid block size: File size must be between {min_size} and {max_size} bytes. */
      500: never;
    };
  };
  /**
   * Upload a Large File part
   * @description Upload a file part to a Large File Upload session.
   */
  multipartUploadPart: {
    parameters: {
      path: {
        /** @description The key to identify the Large File Upload session. */
        upload_key: string;
        /** @description The number of the part being uploaded. */
        part_number: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * Format: binary
           * @description The part being uploaded
           */
          part_content?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": Record<string, any>;
        };
      };
      /**
       * @description <ul>
       *   <li>Bad Request - Invalid URL</li>
       *   <li>The REST API URL could not be found in the mappings registry</li>
       *   <li>Pattern of argument was not recognized.</li>
       * </ul>
       */
      400: never;
      /** @description Authentication Required */
      401: never;
      /**
       * @description <ul>
       *   <li>Failed to complete request. Either the UploadKey is invalid, or you do not have permission to access this upload session.</li>
       *   <li>Multipart Upload session expired.</li>
       *   <li>Invalid BlockID: Expected BlockID between 1 and {n}.</li>
       *   <li>Invalid BlockID: BlockID {n} has already been uploaded.</li>
       * </ul>
       */
      500: never;
    };
  };
  /**
   * Complete a Large File Upload
   * @description Complete and close a Large File Upload session.
   */
  multipartUploadComplete: {
    parameters: {
      path: {
        /** @description The key to identify the Large File Upload session. */
        upload_key: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": Record<string, any>;
        };
      };
      /**
       * @description <ul>
       *   <li>Bad Request - Invalid URL</li>
       *   <li>The REST API URL could not be found in the mappings registry</li>
       *   <li>Pattern of argument was not recognized.</li></ul>
       */
      400: never;
      /** @description Authentication Required */
      401: never;
      /**
       * @description <ul>
       *   <li>Failed to complete request. Either the UploadKey is invalid, or you do not have permission to access this upload session.</li>
       *   <li>Invalid status. Cannot close an empty or already closed upload.</li>
       * </ul>
       */
      500: never;
    };
  };
  /**
   * Cancel a Large File Upload
   * @description Cancel and remove a Large File Upload session.
   */
  multipartUploadRemove: {
    parameters: {
      path: {
        /** @description The key to identify the Large File Upload session. */
        upload_key: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": Record<string, any>;
        };
      };
      /**
       * @description <ul>
       *   <li>Bad Request - Invalid URL</li>
       *   <li>The REST API URL could not be found in the mappings registry</li>
       *   <li>Pattern of argument was not recognized.</li>
       * </ul>
       */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Failed to complete request. Either the UploadKey is invalid, or you do not have permission to access this upload session. */
      500: never;
    };
  };
  /**
   * Get current user's session info
   * @description Get list of session information of the currently logged in user.
   */
  GetSessions: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["members_V2GetSessions"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get a node by nickname
   * @description Gets the data about a node's properties for the node with the specified nickname.
   */
  getNodeNickname: {
    parameters: {
      path: {
        /** @description Nickname of the node. */
        nickname: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nicknames_V2ResponseElement"];
        };
      };
      /** @description <ul><li>Bad Request - Invalid URL</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, no exact match was found for an item with the Nickname {nickname}. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      404: never;
    };
  };
  /**
   * Update a node's nickname
   * @description Updates a node's nickname.
   */
  updateNickname: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The updated nickname of the node.<br><ul><li>The nickname cannot be empty</li><li>The nickname cannot be the same as another node's nickname</li><li>The nickname cannot be a number <b>unless</b> it is the ID of the node</li><li>The nickname cannot contain a space or any of the following characters: <code>!%()-{}[]";'<>?,./\#</code></li><li>The nickname cannot exceed 248 characters in length</li></ul> */
          nickname?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nicknames_V2Empty"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Nickname cannot be a number</li><li>Nicknames must be unique.</li><li>Nickname not in valid format, 'nickname' contains one or more of the following bad characters or a space <code>!%()-{}[]";'<>?,./\#</code></li><li>Could not set feature Nickname, the length of '' is less than the minimum length (1)</li><li>Could not set feature Nickname, the length of 'nickname' is greater than the maximum length (248)</li></ul> */
      500: never;
    };
  };
  /**
   * Create node | Copy a node
   * @description Creates a node OR Copies a node.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will assume that there is are two categories available:<br><br>Category1 (ID 9830)<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul>Category2 (ID 6228)<ul><li>TextField (Attribute ID 2)</li></ul><br>Create a Folder:<br><br><code>{"type":0, "parent_id":2000, "name":"New Folder"}</code><br><br>Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br><code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830":{"9830_1":{}}, "6228":{"6228_1":{}}}}}</code><br><br>Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br><code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830":{"9830_3_2_4":["","","aaa"]}, "6228":{"6228_2":"bbb"}}}}</code><br><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br><code>{"original_id":12345, "parent_id":5678}</code><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br><code>{"original_id":12345, "parent_id":5678, "roles":{"categories":{"6228":{"6228_1":{}}}}}</code><br><br><br>Create a node
   * - <b>required fields</b>: type, name, parent_id
   *
   * Copy a node
   * - <b>required fields</b>: original_id, parent_id
   * - NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to
   *
   * <br><b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr>
   *
   * Create category
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **131**
   *
   * Create channel
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **207**
   *
   * Create document
   * - <b>required fields</b>: type, parent_id, name, file
   * - defaults: type = **144**
   *
   * Create compound document
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **136**
   *
   * Create folder
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **0**
   *
   * Create news
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **208**
   *
   * Create project
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **202**
   *
   * Create shortcut
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **1**
   *
   * Create generation
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **2**
   *
   * Create task
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **206**
   *
   * Create task group
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **205**
   *
   * Create task list
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **204**
   *
   * Create task milestone
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **212**
   *
   * Create URL
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **140**
   *
   * Create virtual folder
   * - <b>required fields</b>: type, parent_id, name
   * - defaults: type = **899**
   */
  createNode: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Subtype of the node. This is not required when copying a node. */
          type?: number;
          /** @description The parent ID of the new node */
          parent_id?: number;
          /** @description The name of the new node */
          name?: string;
          /** @description Description of the node */
          description?: string;
          /**
           * Format: date
           * @description External create date
           */
          external_create_date?: string;
          /**
           * Format: date
           * @description External modify date
           */
          external_modify_date?: string;
          /**
           * @description External source
           * @enum {string}
           */
          external_source?:
            | "file_system"
            | "mobile_device"
            | "scanner"
            | "fax"
            | "ftp"
            | "shared_drive"
            | "removable_disk"
            | "backup_media"
            | "optical_disk"
            | "onedrive"
            | "cloud_storage"
            | "camera"
            | "email_server"
            | "elink"
            | "opentext_core"
            | "edocs"
            | "sap"
            | "document_management"
            | "exchange_mailbox"
            | "notes_mailbox"
            | "outlook_pst"
            | "file_stream"
            | "mailbox_other";
          /** @description External identity */
          external_identity?: string;
          /**
           * @description External identity type
           * @enum {string}
           */
          external_identity_type?:
            | "email_address"
            | "domain_userid"
            | "generic_userid"
            | "name"
            | "last_name"
            | "windows_sid"
            | "guid"
            | "phone_number"
            | "ldap_name"
            | "exchange_mailboxid";
          /** @description Node ID */
          original_id?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_CreateResponse"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Could not create a new [node type, e.g. 'Folder']</li><li>Missing required parameter '[parameter name]'</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Subtype {type} not registered</li><li>External source not found</li><li>Error getting identity type id</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Create node | Copy a node
   * @description Creates a node OR Copies a node.<br><br> <b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br> The following examples will assume that there is are two categories available:<br><br> Category1 (ID 9830) <ul>
   *   <li>TextField (Attribute ID 2)</li>
   *   <li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li>
   * </ul> Category2 (ID 6228) <ul>
   *   <li>TextField (Attribute ID 2)</li>
   * </ul><br> Create a Folder:<br><br> <code>{"type":0, "parent_id":2000, "name":"New Folder"}</code><br><br> Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br> <code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830_1":{}, "6228_1":{}}}}</code><br><br> Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br> <code>{"type":0, "parent_id":2000, "name":"New Folder", "roles":{"categories":{"9830_3_2_4":["","","aaa"], "6228_2":"bbb"}}}</code><br><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br> <code>{"original_id":12345, "parent_id":5678}</code><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br> <code>{"original_id":12345, "parent_id":5678, "roles":{"categories":{"6228_1":{}}}}</code><br><br><br> Create a node<br> <ul>
   *   <li><b>required fields</b>: type, name, parent_id</li>
   * </ul> Copy a node<br> <ul>
   *   <li><b>required fields</b>: original_id, parent_id</li>
   *   <li>NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to<br></li>
   * </ul> <b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr><br> Create category<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>131</b></li>
   * </ul> Create channel<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>207</b></li>
   * </ul> Create document<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name, (file <i>or</i> upload_key)</li>
   *   <li>defaults: type = <b>144</b></li>
   * </ul> Create compound document<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>136</b></li>
   * </ul> Create folder<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>0</b></li>
   * </ul> Create news<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>208</b></li>
   * </ul> Create project<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>202</b></li>
   * </ul> Create shortcut<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>1</b></li>
   * </ul> Create generation<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>2</b></li>
   * </ul> Create task<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>206</b></li>
   * </ul> Create task group<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>205</b></li>
   * </ul> Create task list<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>204</b></li>
   * </ul> Create task milestone<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>212</b></li>
   * </ul> Create URL<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>140</b></li>
   * </ul> Create virtual folder<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name</li>
   *   <li>defaults: type = <b>899</b></li>
   * </ul> Create search query<br> <ul>
   *   <li><b>required fields</b>: type, parent_id, name, search_cache_id</li>
   *   <li>defaults: type = <b>258</b></li>
   * </ul> Create workbench<br> <ul>
   *   <li><b>required fields</b>: type, name</li>
   *   <li>defaults: type = <b>528</b></li>
   * </ul> Create transport package<br> <ul>
   *   <li><b>required fields</b>: type, name, file (not part of the body parameter)</li>
   *   <li>defaults: type = <b>531</b></li>
   * </ul> Create search template<br> <ul>
   *   <li><b>required fields</b>: type, name, search_cache_id</li>
   *   <li>defaults: type = <b>292</b></li>
   * </ul>
   */
  createNode2: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Subtype of the node. This is not required when copying a node. */
          type?: number;
          /** @description The parent ID of the new node */
          parent_id?: number;
          /** @description The name of the new node */
          name?: string;
          /** @description Indicates if this is the user's default search template. */
          default_template?: boolean;
          /** @description Description of the node */
          description?: string;
          /**
           * Format: date
           * @description External create date
           */
          external_create_date?: string;
          /**
           * Format: date
           * @description External modify date
           */
          external_modify_date?: string;
          /**
           * @description External source
           * @enum {string}
           */
          external_source?:
            | "file_system"
            | "mobile_device"
            | "scanner"
            | "fax"
            | "ftp"
            | "shared_drive"
            | "removable_disk"
            | "backup_media"
            | "optical_disk"
            | "onedrive"
            | "cloud_storage"
            | "camera"
            | "email_server"
            | "elink"
            | "opentext_core"
            | "edocs"
            | "sap"
            | "document_management"
            | "exchange_mailbox"
            | "notes_mailbox"
            | "outlook_pst"
            | "file_stream"
            | "mailbox_other";
          /** @description External identity */
          external_identity?: string;
          /**
           * @description External identity type
           * @enum {string}
           */
          external_identity_type?:
            | "email_address"
            | "domain_userid"
            | "generic_userid"
            | "name"
            | "last_name"
            | "windows_sid"
            | "guid"
            | "phone_number"
            | "ldap_name"
            | "exchange_mailboxid";
          /** @description Data ID of the image to be displayed in the news item */
          image_id?: number;
          /** @description The alt text for the above image */
          image_alt_text?: string;
          /**
           * Format: binary
           * @description The file to be added as an attachment
           */
          file?: string;
          /** @description The key to identify a Large File Upload session. */
          upload_key?: string;
          /** @description Allow advanced versioning (standard versioning by default) */
          advanced_versioning?: boolean;
          /**
           * Format: date
           * @description (Can be time-zone aware) The effective date for this news item (e.g. 2015-10-16T13:00:00)
           */
          effective_date?: string;
          /**
           * Format: date
           * @description (Can be time-zone aware) The expiration date for this news item
           */
          expiration_date?: string;
          /** @description The headline for this news item */
          headline?: string;
          /** @description The highlights for this news item */
          highlights?: string;
          /** @description The story for this news item */
          story?: string;
          /** @description The data ID of the object to attach to this news item */
          attachments?: number;
          /** @description The status of the task */
          status?: number;
          /**
           * Format: date-time
           * @description (Can be time-zone aware) Due date of the milestone (e.g. 2015-10-16T13:00:00)
           */
          due_date?: string;
          /**
           * Format: date
           * @description (Can be time-zone aware) Start date of the milestone
           */
          start_date?: string;
          /** @description The project mission */
          mission?: string;
          /** @description The project goals */
          goals?: string;
          /** @description The project objectives */
          objectives?: string;
          /** @description The project initiatives */
          initiatives?: string;
          /** @description Node ID */
          original_id?: number;
          /** @description The Version Number of the node to create the generation to */
          version_number?: string;
          /** @description The assigned member ID */
          assigned_member_id?: number;
          /** @description The priority for the task */
          priority?: number;
          /** @description The milestone for the task group */
          milestone_id?: number;
          /** @description The instructions for the task */
          instructions?: string;
          /** @description The data ID for the item to attach to the task */
          attachment_id?: string;
          /**
           * Format: date
           * @description (Can be time-zone aware) Date the milestone was completed
           */
          complete_date?: string;
          /** @description URL */
          url?: string;
          /** @description Location ID. This value can only be set during create. */
          location_id?: number;
          /** @description Facets that make up the virtual folder. Each facet is a 2-element List where the first element is the facet ID (String) and the second element is a List of values (String) for that facet. For example: [['2100',['re09']],['2095',['0','144']]] */
          selected_facets?: string;
          /** @description Show location column */
          location_column_visible?: boolean;
          /** @description Show selected facets */
          selected_facets_visible?: boolean;
          /** @description Show selected location */
          selected_location_visible?: boolean;
          /** @description Search cache ID to be used to create the Search Query or Search Template item. */
          search_cache_id?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseElementPost"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not create a new [node type, e.g. 'Folder']</li><li>Missing required parameter '[parameter name]'</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Subtype {type} not registered</li><li>External source not found</li><li>Error getting identity type id</li><li>Error: File could not be found within the upload directory.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>An item with the name '{name}' already exists.</li></ul> */
      500: never;
    };
  };
  /**
   * Get a node
   * @description Gets info on the node.
   */
  getNode: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        /** @description Determines if the perspective for the node will be included in the response. */
        perspective?: boolean;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_InfoResult"];
        };
      };
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Update a node | Move a node | Change the Versions Control setting for a Folder
   * @description Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { "name":"New Name", "description":"New Description" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { "name":"New Name", "description":"New Description", "metadata_token":"f0c0701a58c2cb03a955deb1ab2af306" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { "parent_id":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { "versions_control_advanced":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { "versions_control_advanced":true, "apply_to":2 }</code>
   */
  updateNode: {
    parameters: {
      path: {
        /** @description Node ID. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The updated description of the node. */
          description?: string;
          /** @description The multilingual descriptions of the node in key-value pairs (see example below). The parameter 'description' <b>must also</b> be specified in the body parameter, but the value in 'description' will be ignored and the values in 'description_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) descriptions of a node where the preferred language is English (en)<br><code>body : { "description":"newEnglishDescription", "description_multilingual":{"de":"newGermanDescription","en":"newEnglishDescription","fr":"newFrenchDescription"} }</code> */
          description_multilingual?: string;
          /** @description The updated name of the node. */
          name?: string;
          /** @description The multilingual names of the node in key-value pairs (see example below). The parameter 'name' <b>must also</b> be specified in the body parameter, but the value in 'name' will be ignored and the values in 'name_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) names of a node where the preferred language is English (en)<br><code>body : { "name":"newEnglishName", "name_multilingual":{"de":"newGermanName","en":"newEnglishName","fr":"newFrenchName"} }</code> */
          name_multilingual?: string;
          /** @description If set to TRUE then the objects added to the folder will use Advanced Versioning by default. If set to FALSE then the objects added to the folder will use Standard Versioning by default. */
          versions_control_advanced?: boolean;
          /**
           * @description Apply version control settings to: <ol start="0"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li></ol>
           * @enum {integer}
           */
          apply_to?: 0 | 1 | 2;
          /** @description The updated parent ID of the node. */
          parent_id?: number;
          /** @description The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time.<br><br>NOTE: If this is specified and the call is successful, the most recent metadata token will be returned in the result. */
          metadata_token?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not update metadata (edit conflict). */
      409: never;
    };
  };
  /**
   * Delete a node
   * @description Deletes the node.
   */
  deleteNode: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Could not get node for {id}</li><li>Could not process object, invalid action 'delete'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get a node | Get a virtual folder
   * @description Gets information about a node.
   */
  getNode2: {
    parameters: {
      query?: {
        /** @description Retrieve actions for the node. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested.<br><br>Example to get the delete and open actions<br><code>?actions=delete&actions=open</code> */
        actions?: string;
        /** @description Determines if the perspective for the node will be included in the response. */
        perspective?: boolean;
        /** @description The 'fields' parameter can be used to filter the results even further, if necessary.<br><br>Show the 'properties' field (which contains node information such as name, description, parent_id, etc.)<br><code>?fields=properties</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively)<br><code>?fields=properties&fields=categories</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively) but only the parent_id and description from 'properties'<br><code>?fields=properties{parent_id,description}&fields=categories</code><br><br>Show the 'versions' field (version information) but only the latest version<br><code>?fields=versions.element(0)</code><br><br>Show the 'permissions' field (node permissions) but only the first 5 permissions (includes Default Access and ACLs)<br><code>?fields=permissions.limit(5)</code> */
        fields?: string;
        /** @description Resolve individual fields<br><br>Expand the id and parent_id of 'properties' (resolving the id to extra node information, and resolving the parent_id to extra node information about the parent)<br><code>?expand=properties{id,parent_id}</code> */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata).<br><br>Example to get metadata<br><code>?metadata</code> */
        metadata?: string | null;
        /** @description Returns the metadata state token for data (used for edit conflict resolution), which will be returned under results.state. This is an empty parameter, thus no value is required (e.g. ?state).<br><br>Example to get the metadata state token<br><code>?state</code> */
        state?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
        /** @description Reference node ID */
        reference_id?: number;
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseElement"];
        };
      };
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Update a node | Move a node | Change the Versions Control setting for a Folder | Reserve/Unreserve a node | Collect/Uncollect a node
   * @description Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder<br>Reserves/Unreserves a node<br>Collects/Uncollects a node<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { "name":"New Name", "description":"New Description" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { "name":"New Name", "description":"New Description", "metadata_token":"f0c0701a58c2cb03a955deb1ab2af306" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { "parent_id":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { "versions_control_advanced":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { "versions_control_advanced":true, "apply_to":2 }</code><br><br>Reserve a document<br><br><code>body : { "reserved_user_id":1000 }</code><br><br>Unreserve a document<br><br><code>body : { "reserved_user_id":"null" }</code><br><br>Collect a node to a Collection with ID 5678<br><br><code>body : { "collection_id":5678 }</code><br><br>Uncollect a node from the Collection with ID 5678<br><br><code>body : { "collection_id":5678, "operation":"remove" }</code>
   */
  updateNode2: {
    parameters: {
      path: {
        /** @description Node ID. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Indicates if this is the user's default search template. */
          default_template?: boolean;
          /** @description The updated description of the node. */
          description?: string;
          /** @description The multilingual descriptions of the node in key-value pairs (see example below). The parameter 'description' <b>must also</b> be specified in the body parameter, but the value in 'description' will be ignored and the values in 'description_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) descriptions of a node where the preferred language is English (en)<br><code>body : { "description":"newEnglishDescription", "description_multilingual":{"de":"newGermanDescription","en":"newEnglishDescription","fr":"newFrenchDescription"} }</code> */
          description_multilingual?: string;
          /** @description The updated name of the node. */
          name?: string;
          /** @description The multilingual names of the node in key-value pairs (see example below). The parameter 'name' <b>must also</b> be specified in the body parameter, but the value in 'name' will be ignored and the values in 'name_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) names of a node where the preferred language is English (en)<br><code>body : { "name":"newEnglishName", "name_multilingual":{"de":"newGermanName","en":"newEnglishName","fr":"newFrenchName"} }</code> */
          name_multilingual?: string;
          /** @description If set to TRUE then the objects added to the folder will use Advanced Versioning by default. If set to FALSE then the objects added to the folder will use Standard Versioning by default. */
          versions_control_advanced?: boolean;
          /**
           * @description apply version control settings to, 0 - This Item, 1-Sub Items, 2- This Item and Sub Items
           * @enum {integer}
           */
          apply_to?: 0 | 1 | 2;
          /** @description The id of the user the node is being reserved to (null to unreserve) */
          reserved_user_id?: number;
          /** @description The updated parent ID of the node. */
          parent_id?: number;
          /** @description ID of Collection node */
          collection_id?: number;
          /** @description Keyword remove will remove item from collection */
          operation?: string;
          /** @description The metadata state token (for edit conflict resolution). <br><br>NOTE: if this is specified and the call is successful, the most recent metadata token will be returned in the result. */
          metadata_token?: string;
          /** @description Search cache ID to be used to update the Search Query or Search Template item. */
          search_cache_id?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Invalid datatype specified for argument "id".</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not update metadata (edit conflict). */
      409: never;
    };
  };
  /**
   * Delete a node
   * @description Deletes the node.
   */
  deleteNode2: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description <ul><li>Could not get node for {id}</li><li>Could not process object, invalid action 'delete'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get actions
   * @description Gets available actions on the node.
   */
  getActions: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_ActionsInfo"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      404: never;
    };
  };
  /**
   * Get info on addable node types
   * @description Gets info on the types of child nodes which can be added to this node, if the node is a container (ie. a Folder). The info will be returned as a set of (relative) REST API links which can be used to retrieve forms detailing how to create the desired node within the node container.
   */
  getAddableTypesInfo: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_AddableTypesInfo"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get ancestors
   * @description Gets the ancestors of the node.
   */
  getAncestors: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_AncestorsInfo"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get audit
   * @description Gets node audit info.
   */
  getAudit: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        /** @description Sort order of audit results. Format can be sort=desc_audit_date or sort=asc_audit_date. Results are sorted in descending order by default. */
        sort?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_AuditInfo"];
        };
      };
      /** @description <ul><li>Could not process object, invalid action 'audit-list'</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get audit
   * @description Gets node audit info.
   */
  getAudit2: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        /** @description Sort order of audit results. Format can be sort=desc_audit_date or sort=asc_audit_date. Results are sorted in descending order by default. */
        sort?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        /** @description Filter by the event type. */
        where_type?: number;
        /** @description Filter events so that the results occurred after the supplied date. Can be used with where_audit_date_end. */
        where_audit_date_start?: string;
        /** @description Filter events so that the results occurred before the supplied date. Can be used with where_audit_date_start. */
        where_audit_date_end?: string;
        /** @description Filter by User ID. */
        where_user_id?: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_AuditResult2"];
        };
      };
      /** @description <ul><li>Could not process object, invalid action 'audit-list'</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get columns
   * @description Gets the columns for the node.
   */
  getColumns: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_ColumnsInfo"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Browse action is not supported for this type</li></ul> */
      500: never;
    };
  };
  /**
   * Update collection
   * @description Add or Remove items from a collection.
   */
  updateCollection: {
    parameters: {
      path: {
        /** @description Node ID of a collection node */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The id(s) of the nodes to add to the collection. This parameter can be specified multiple times up to a limit of 30 node IDs. */
          ids?: string[];
          /** @description Specify 'add' or 'remove' to update items in the collection. */
          operation?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_v2ResponseUpdateCollection"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument "id".</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get content
   * @description Downloads the content (latest published version) on the node.
   */
  getContent: {
    parameters: {
      query?: {
        /** @description Change the MIME type to 'application/octet-stream' by specifying 'download'. Ignoring this parameter or specifying 'open' will preserve the MIME type. */
        action?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not locate node: {id} */
      500: never;
    };
  };
  /**
   * Get content with a specified filename
   * @description Downloads the content (latest published version) for the node.
   */
  getContent2: {
    parameters: {
      query?: {
        /** @description Change the MIME type to 'application/octet-stream' by specifying 'download'. Ignoring this parameter or specifying 'open' will preserve the MIME type. */
        action?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Name to give downloaded file */
        filename: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not locate node: {id} */
      500: never;
    };
  };
  /**
   * Get content
   * @description Downloads the content (latest published version) on the node.
   */
  getContent3: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Get content with a specified filename
   * @description Downloads the content (latest published version) for the node.
   */
  getContent4: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Name to give downloaded file */
        filename: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * List the templates
   * @description Fetches the list of templates to create an item/instance in the specified folder.
   */
  getDocTemplates: {
    parameters: {
      query?: {
        /** @description The subtypes list, where the templates of these subtypes are to be showcased in add item menu, e.g. {0} */
        subtypes?: string;
        /** @description The subtypes list, where the templates of these subtypes are to be showcased in side panel, e.g. {144} */
        sidepanel_subtypes?: string;
        /** @description grouped by classification e.g. group_by=classification ( only works with side-panel subtype templates ) */
        group_by?: string;
        /** @description Recently used templates required or not. (Default false) e.g. recent_templates=true ( only works with side-panel subtype templates ) */
        recent_templates?: boolean;
        /** @description Recently used templates prior to no of days. (Default 180) e.g. recent_history_days=180 ( only works with side-panel subtype templates ) */
        recent_history_days?: number;
        /** @description Limit the recently used templates fetching. (Default 4) e.g. recent_templates_limit=4 ( only works with side-panel subtype templates ) */
        recent_templates_limit?: number;
      };
      path: {
        /** @description Folder ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_DoctemplatesInfo"];
        };
      };
      /** @description Authentication is required. */
      401: never;
      /** @description Could not get the templates for the specified folder. */
      404: never;
      /** @description <ul><li>Could not get the templates for the specified folder</li><li>Parameter validation failed. group_by</li></ul> */
      500: never;
    };
  };
  /**
   * Get facets
   * @description Gets facets for the node.
   */
  getFacetss: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
        /** @description Specify selected facets using the following template '{facet id}:{value1}|{value2}|...'  e.g. where_facet=2100:23|9|17|20&where_facet=2101:331 */
        where_facet?: string;
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_FacetsInfo"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get subnodes
   * @description Browses the node, returning info on its child nodes.
   */
  getSubnodes: {
    parameters: {
      query?: {
        /** @description Filter on node type. <br> Use -1 to get all containers. <br> Use -2 to get all searchable objects. <br> Use -3 to get all non-containers. */
        where_type?: number;
        /** @description Filter on node name */
        where_name?: string;
        /** @description Filter on facet values. There will be one instance of this parameter for each facet selected. The values are combined using | character. E.g. where_facet=2095:144|0|-1 (note that -1 is a special value that denotes containers). */
        where_facet?: string;
        /** @description Retrieve commands for nodes. There will be multiple instances of this parameter for each command requested. E.g. commands=delete&commands=default. */
        commands?: string;
        /** @description Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        /** @description Show hidden objects (default False) */
        show_hidden?: boolean;
        /** @description Return additional data for each item (default True). Disabling this will improve performance. */
        extra?: boolean;
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_BrowseResult"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not process object, invalid action 'browse'</li></ul> */
      500: never;
    };
  };
  /**
   * Get subnodes
   * @description Browses the node, returning info on its child nodes.
   */
  getSubnodes2: {
    parameters: {
      query?: {
        /** @description Filter on node type. <ul><li>-1 : get all containers</li><li>-2 : get all searchable objects</li><li>-3 : get all non-containers</li></ul>Example to get all non-containers<br><code>?where_type=-3</code> */
        where_type?: string[];
        /** @description Filter on node name<br><br>Example to filter on 'abc' name<br><code>?where_name=abc</code> */
        where_name?: string;
        /** @description Filter on facet values. Can be specified multiple times in the query string using the '&' separator (?where_facet=....&where_facet=...)<br><br>Example to apply the Content Type facet with ID 2095, for documents (144), folders (0) and all containers (-1)<br><code>?where_facet=2095:144|0|-1</code> */
        where_facet?: string;
        /** @description Filter on status of the node. */
        where_status?: string[];
        /** @description Retrieve actions for the node. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested.<br><br>Example to get the delete and open actions<br><code>?actions=delete&actions=open</code> */
        actions?: string;
        /** @description Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.<br><br>Example to sort by name (ascending by default)<br><code>?sort=name</code><br><br>Sort by name descending<br><code>?sort=desc_name</code> */
        sort?: string;
        /** @description Page number<br><br>Example to get page 2<br><code>?page=2</code> */
        page?: number;
        /** @description Page size<br><br>Example to get a page size of 5 results<br><code>?limit=5</code> */
        limit?: number;
        /** @description Show hidden objects (default False)<br><br>Example to show hidden objects<br><code>?show_hidden=true</code> */
        show_hidden?: boolean;
        /** @description The 'fields' parameter can be used to filter the results even further, if necessary.<br><br>Show the 'properties' field (which contains node information such as name, description, parent_id, etc.)<br><code>?fields=properties</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively)<br><code>?fields=properties&fields=categories</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively) but only the parent_id and description from 'properties'<br><code>?fields=properties{parent_id,description}&fields=categories</code><br><br>Show the 'versions' field (version information) but only the latest version<br><code>?fields=versions.element(0)</code><br><br>Show the 'permissions' field (node permissions) but only the first 5 permissions (includes Default Access and ACLs)<br><code>?fields=permissions.limit(5)</code> */
        fields?: string;
        /** @description Resolve individual fields<br><br>Expand the id and parent_id of 'properties' (resolving the id to extra node information, and resolving the parent_id to extra node information about the parent)<br><code>?expand=properties{id,parent_id}</code> */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata).<br><br>Example to get metadata<br><code>?metadata</code> */
        metadata?: string | null;
        /** @description Returns the metadata state token for data (used for edit conflict resolution), which will be returned under results.state. This is an empty parameter, thus no value is required (e.g. ?state).<br><br>Example to get the metadata state token<br><code>?state</code> */
        state?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_BrowseResult2"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not process object, invalid action 'browse'</li></ul> */
      500: never;
    };
  };
  /**
   * Get all subnodes
   * @description Returns information on all the children of the node*.<br><br> * Only Compound Documents are currently supported
   */
  getAllSubnodes: {
    parameters: {
      query?: {
        /** @description Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.<br><br>Example to sort by order (ascending by default)<br><code>?sort=order</code><br><br>Sort by order descending<br><code>?sort=desc_order</code> */
        sort?: string;
        /** @description The 'fields' parameter can be used to filter the results even further, if necessary.<br><br>Show the 'properties' field (which contains node information such as name, description, order, mime_type etc.)<br><code>?fields=properties</code><br><br>Show the 'properties' field but only include the id, name, mime_type, and order<br><code>?fields=properties{id, name, mime_type, order}</code> */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / properties. This is an empty parameter, thus no value is required (e.g. ?metadata).<br><br>Example to get metadata<br><code>?metadata</code> */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_ListContents"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get a node for {id}</li><li>List Contents action is not supported for this object type.</li><li>Invalid column name ({sort}) specified for sorting</li><li>The 'sort' parameter contains invalid value(s) '{sort}'</li></ul> */
      500: never;
    };
  };
  /**
   * Reorganize nodes
   * @description Reorganizes the children of the node*.<br><br> * Only Compound Documents are currently supported
   */
  reorganizeNodes: {
    parameters: {
      path: {
        /** @description Node ID. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The order array consists of objects with ID and order properties.<br><br>Example to set subnode with ID 3215 as Master document and subnode with ID 3216 with order 2:<br><code>body : { "order": [ { "id": 3215, "order": 0 }, { "id": 3216, "order": 2 } ] }</code> */
          order: {
            /** @description Subnode ID */
            id?: number;
            /** @description The order to reorganize subnode (order 0 = Master Document) */
            order?: number;
          }[];
          /** @description Sets if subnodes have to be renumbered sequentially (defaults to false).<br><br>Example to maintain relative order but renumber sequentially:<br><code>body: { "order": [], "compact": true }</code> */
          compact?: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Invalid datatype specified for argument 'id'.</li><li>Reorganize action is not supported for this object type.</li><li>Invalid datatype specified for argument "order".</li><li>Argument "order" is required.</li><li>The 'order' parameter contains invalid value(s) '{order array object}'</li><li>Compound Document Reorganize failed. Duplicate values found.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get node properties
   * @description Gets basic information about the node.
   */
  getNodeProperties: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        /** @description Returns the metadata state token for data (used for edit conflict resolution), which will be returned under results.state. This is an empty parameter, thus no value is required (e.g. ?state). */
        state?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseElement"];
        };
      };
      /** @description <ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * List releases and revisions
   * @description List all releases and revisions of the node.
   */
  listReleases: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_BrowseReleasesResult2"];
        };
      };
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Create release
   * @description Creates a release for the node.
   */
  CreateRelease: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of the release */
          name?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseElementPost"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Missing required parameter 'Name' */
      500: never;
    };
  };
  /**
   * Create revision
   * @description Creates a revision for the node.
   */
  CreateRevision: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of the revision */
          name?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseElementPost"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Missing required parameter 'Name' */
      500: never;
    };
  };
  /**
   * Update System Attributes
   * @description Update System Attributes of a given node
   */
  updatesystemattributes: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Value of the attribute */
          "{attribute_key}"?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseElementSystemAttributesPost"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not set feature {attribute name}, value cannot be undefined</li><li>Could not set feature {attribute name}, invalid value '{attribute value}'</li><li>Could not set feature {attribute name}, value must be a {data type}</li><li>Could not set feature {attribute name}, the length of '{attribute value}' is greater than the maximum length ({maximum length})</li></ul> */
      500: never;
    };
  };
  /**
   * Get thumbnail info
   * @description Gets thumbnails for the node.
   */
  thumbnailInfo: {
    parameters: {
      query?: {
        /** @description Version number of the node */
        version_number?: string;
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_ThumbnailInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get version {version_number} for node {id}</li><li>Thumbnail is not available</li><li>Thumbnail is not available in Content Server 10</li></ul> */
      404: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get thumbnail info according to size
   * @description Gets thumbnails in the specified size for the node.
   */
  thumbnailInfoBySize: {
    parameters: {
      query?: {
        /** @description Version number of the node */
        version_number?: string;
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description The size of the requested thumbnail (small, medium or large) */
        size: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_ThumbnailInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get version {version_number} for node {id}</li><li>Could not get the thumbnail for {size}</li><li>Thumbnail is not available</li><li>Thumbnail is not available in Content Server 10</li></ul> */
      404: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get thumbnail content according to size
   * @description Gets thumbnail content for the node.
   */
  thumbnailContentBySize: {
    parameters: {
      query?: {
        /** @description Version number of the node */
        version_number?: string;
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description The size of the requested thumbnail (small, medium or large) */
        size: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get version {version_number} for node {id}</li><li>Could not get the thumbnail for {size}</li><li>Thumbnail is not available</li><li>Thumbnail is not available in Content Server 10</li></ul> */
      404: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * Get actions
   * @description Gets the actions for the specified node IDs (up to 100 items) that the current user is able to perform. To get more than 100 items, use the POST api/v2/nodes/actions call below.
   */
  getNodeActions: {
    parameters: {
      query: {
        /** @description One or more node IDs. */
        ids: string[];
        /** @description Retrieve actions for the node. If not specified, all actions that the current user can perform will be returned. */
        actions?: string[];
        /** @description The reference ID associated with the given node IDs (ex. The Recycle Bin's ID, a Collection's ID, a Shortcut's ID, etc). */
        reference_id?: number;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseNodesActions"];
        };
      };
      /** @description <ul><li>The parameter 'ids' is not specified.</li><li>Invalid datatype specified for argument 'ids'.</li><li>Too many items specified for parameter 'ids'.</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get actions
   * @description Gets the actions for the specified node IDs (unlimited items) that the current user is able to perform. The parameters can be packaged into a single body parameter. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> at the top for details.<br><br>Get the actions for delete and copy for the nodes with IDs 5348 and 5569<br><code>body : { "ids":[5348,5569], "actions":["delete","copy"] }
   */
  getNodeActions2: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description One or more node IDs. */
          ids?: string[];
          /** @description (Optional) Retrieve actions for the node. If not specified, all actions that the current user can perform will be returned. */
          actions?: string[];
          /** @description (Optional) The reference ID associated with the given node IDs (ex. The Recycle Bin's ID, a Collection's ID, a Shortcut's ID, etc). */
          reference_id?: number;
          suppress_response_codes?: components["schemas"]["suppress_response_codes"];
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2ResponseNodesActions"];
        };
      };
      /** @description <ul><li>The parameter 'ids' is not specified.</li><li>Invalid datatype specified for argument 'ids'.</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Unpack transport package
   * @description Unpacks a transport package.
   */
  UnpackTransportPackage: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description ID of the workbench */
          workbench_id?: string;
          /** @description By default, duplicate handling is set to 'skip'.  This can be changed to 'replace'. */
          duplicate_handling?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Missing required parameter 'Workbench ID'</li><li>Invalid workbench ID.</li><li>Could not process object, invalid action 'unpack'</li></ul> */
      500: never;
    };
  };
  /**
   * Deploy workbench
   * @description Deploys a workbench.  If there are missing dependencies, the workbench cannot be deployed.
   */
  DeployWorkbench: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description By default, permissions will not be updated when the deployment is an update or add version operation (when possible).  This can be changed to true. */
          update_permissions?: boolean;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not deploy workbench, missing dependencies.</li><li>Could not process object, invalid action 'deploy'</li></ul> */
      500: never;
    };
  };
  /**
   * View the content of a node as HTML.
   * @description View the HTML rendering of a node.
   */
  viewHtmlNodes: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "text/html": unknown;
        };
      };
      /** @description <ul> <li>You do not have permission to view this document.</li> </ul> */
      403: never;
      /** @description <ul> <li>Node must be a document node.</li> <li>Could not find the original item.</li> <li>Error retrieving the specified version.</li> </ul> */
      404: never;
      /** @description <ul> <li>The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li> <li>Node must be a document node.</li> </ul> */
      500: never;
    };
  };
  /**
   * Get the notification interests on a node
   * @description Get the notification interest settings for a particular node.
   */
  notification_interests_node: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["notifications_notification_interests_node"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Set the notification interests on a node
   * @description Set the notification interest settings for a particular node. Any interests not specified will have their report value set to 0.
   */
  set_notification_interests_node: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["notifications_set_notification_interests_node"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get all node permissions
   * @description Gets all of the permissions on the node (Default Access and any Assigned Access). The results can be paginated if the request specifies parameters 'page' and 'limit' (e.g. ?page=2&limit=5).
   */
  getNodePermissions: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2ResponsePermissions"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>Could not set parameter {parameter name}, the value {parameter value} is less than/greater than the minimum/maximum value ({mininum/maximum value})</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Get owner permissions
   * @description Get owner permissions
   */
  getNodePermissionOwner: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2ResponsePermission"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Update or Restore the owner permissions
   * @description Update or Restore the owner permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Restore permissions for the user 15234, with 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"],"right_id":15234}</code><br><br>Change the owner to the user 15234 and set their permissions to none (NOTE: this is not the same as removing owner permissions):<br><code>body = {"permissions":[],"right_id":15234}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
   */
  updateNodePermissionOwner: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The permissions (see the examples above)<br><br>The allowable values are<ul><li>"see"</li><li>"see_contents"</li><li>"modify"</li><li>"edit_attributes"</li><li>"add_items"</li><li>"reserve"</li><li>"add_major_version"</li><li>"delete_versions"</li><li>"delete"</li><li>"edit_permissions"</li></ul> */
          permissions?: (
            | "see"
            | "see_contents"
            | "modify"
            | "edit_attributes"
            | "add_items"
            | "reserve"
            | "add_major_version"
            | "delete_versions"
            | "delete"
            | "edit_permissions"
          )[];
          /** @description The ID of the node's owner (see the examples above) */
          right_id?: number;
          /**
           * @description Apply permissions to:<ol start="0"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.
           * @enum {integer}
           */
          apply_to?: 0 | 1 | 2 | 3;
          /** @description Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer. */
          include_sub_types?: string[];
        };
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not process object, invalid request</li><li>Insufficient permissions to perform that action</li></ul> */
      500: never;
    };
  };
  /**
   * Get owner group permissions
   * @description Get owner group permissions
   */
  getNodePermissionGroup: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2ResponsePermission"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Update or Restore the owner group permissions
   * @description Update or Restore the owner group permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Restore permissions for the owner group 12111, with 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"],"right_id":12111}</code><br><br>Change the owner group to 12111 and set its permissions to none (NOTE: this is not the same as removing owner group permissions):<br><code>body = {"permissions":[],"right_id":12111}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
   */
  updateNodePermissionGroup: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The permissions (see the examples above)<br><br>The allowable values are<ul><li>"see"</li><li>"see_contents"</li><li>"modify"</li><li>"edit_attributes"</li><li>"add_items"</li><li>"reserve"</li><li>"add_major_version"</li><li>"delete_versions"</li><li>"delete"</li><li>"edit_permissions"</li></ul> */
          permissions?: (
            | "see"
            | "see_contents"
            | "modify"
            | "edit_attributes"
            | "add_items"
            | "reserve"
            | "add_major_version"
            | "delete_versions"
            | "delete"
            | "edit_permissions"
          )[];
          /** @description The ID of the node's owner group (see the examples above) */
          right_id?: number;
          /**
           * @description Apply permissions to:<ol start="0"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.
           * @enum {integer}
           */
          apply_to?: 0 | 1 | 2 | 3;
          /** @description Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer. */
          include_sub_types?: string[];
        };
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not process object, invalid request</li><li>Insufficient permissions to perform that action</li></ul> */
      500: never;
    };
  };
  /**
   * Get public access permissions
   * @description Get public access permissions
   */
  getNodePermissionPublic: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2ResponsePermission"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Update the public access permissions
   * @description Update the public access permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Set public access permissions to none (NOTE: this is not the same as removing public access permissions):<br><code>body = {"permissions":[]}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
   */
  updateNodePermissionPublic: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The permissions (see the examples above)<br><br>The allowable values are<ul><li>"see"</li><li>"see_contents"</li><li>"modify"</li><li>"edit_attributes"</li><li>"add_items"</li><li>"reserve"</li><li>"add_major_version"</li><li>"delete_versions"</li><li>"delete"</li><li>"edit_permissions"</li></ul> */
          permissions?: (
            | "see"
            | "see_contents"
            | "modify"
            | "edit_attributes"
            | "add_items"
            | "reserve"
            | "add_major_version"
            | "delete_versions"
            | "delete"
            | "edit_permissions"
          )[];
          /**
           * @description Apply permissions to:<ol start="0"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.
           * @enum {integer}
           */
          apply_to?: 0 | 1 | 2 | 3;
          /** @description Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer. */
          include_sub_types?: string[];
        };
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not process object, invalid request</li><li>Insufficient permissions to perform that action</li></ul> */
      500: never;
    };
  };
  /**
   * Update an Assigned Access permission for the specified user/group
   * @description Update an Assigned Access permission for the specified user/group.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions for the user/group to 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"]}</code><br><br>Update permissions for the user/group to no permissions (NOTE: this is not the same as deleting the user/group's permissions from the Assigned Access):<br><code>body = {"permissions":[]}</code><br><br>Update the user/group's permissions on a Folder to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"apply_to":0}</code><br><br>Update the user/group's permissions on a Folder to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"apply_to":2,"include_sub_types":[204,207]}</code>
   */
  updateNodePermissionCustom: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The permissions (see the examples above)<br><br>The allowable values are<ul><li>"see"</li><li>"see_contents"</li><li>"modify"</li><li>"edit_attributes"</li><li>"add_items"</li><li>"reserve"</li><li>"add_major_version"</li><li>"delete_versions"</li><li>"delete"</li><li>"edit_permissions"</li></ul> */
          permissions?: (
            | "see"
            | "see_contents"
            | "modify"
            | "edit_attributes"
            | "add_items"
            | "reserve"
            | "add_major_version"
            | "delete_versions"
            | "delete"
            | "edit_permissions"
          )[];
          /**
           * @description Apply permissions to:<ol start="0"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.
           * @enum {integer}
           */
          apply_to?: 0 | 1 | 2 | 3;
          /** @description Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer. */
          include_sub_types?: string[];
        };
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2EmptyResponse"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Insufficient permissions to perform that action</li></ul> */
      500: never;
    };
  };
  /**
   * Add an Assigned Access permission
   * @description Add an Assigned Access permission on the node.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions:<br><code>body = {"permissions":["see","see_contents"],"right_id":15234}</code><br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions and apply to 'This Item':<br><code>body = {"permissions":["see","see_contents"],"right_id":15234,"apply_to":0}</code><br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {"permissions":["see","see_contents"],"right_id":15234,"apply_to":2,"include_sub_types":[204,207]}</code>
   */
  addNodePermissions: {
    parameters: {
      query?: {
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The permissions (see the examples above)<br><br>The allowable values are<ul><li>"see"</li><li>"see_contents"</li><li>"modify"</li><li>"edit_attributes"</li><li>"add_items"</li><li>"reserve"</li><li>"add_major_version"</li><li>"delete_versions"</li><li>"delete"</li><li>"edit_permissions"</li></ul> */
          permissions?: (
            | "see"
            | "see_contents"
            | "modify"
            | "edit_attributes"
            | "add_items"
            | "reserve"
            | "add_major_version"
            | "delete_versions"
            | "delete"
            | "edit_permissions"
          )[];
          /** @description The ID of the user/group (see the examples above) */
          right_id?: number;
          /**
           * @description Apply permissions to:<ol start="0"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.
           * @enum {integer}
           */
          apply_to?: 0 | 1 | 2 | 3;
          /** @description Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer. */
          include_sub_types?: string[];
        };
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2ResponsePermission"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Get the effective permissions for the specified user/group
   * @description Get the effective permissions for the specified user/group on the node.<br><br>The effective permissions are an aggregation of the user's permissions on the node, as well as the permissions of any of the user's groups that have permissions on the node.
   */
  getNodePermissionEffective: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: number;
        /** @description The ID of the user/group */
        right_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["permissions_V2ResponsePermission"];
        };
      };
      /** @description <ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Personalize particular perspective for specific user
   * @description Personalize particular perspective for specific user
   */
  postPerspectivesPersonalization: {
    parameters: {
      path: {
        /** @description The perspective id of the container for which personalization should be done */
        perspective_id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The perspective version of the perspective */
          perspective_version?: number;
          /** @description The personalize Data of the perspective */
          personalizations?: string;
        };
      };
    };
    responses: {
      /** @description {personalizations} malformed Json */
      400: never;
      /** @description {personalizations} Unable to save: system error */
      500: never;
    };
  };
  /**
   * Get CS and REST API Info
   * @description Provides basic information about Content Server and the REST API.  This call does not require authentication.
   */
  rest_api: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["ping_rest_api"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
    };
  };
  /**
   * Sends on a process
   * @description Sends on a process based on the provided action / custom_action. The provided comment is added to the current task.
   */
  sendProcess: {
    parameters: {
      path: {
        /** @description Workflow ID. */
        process_id: number;
        /** @description Sub workflow ID. */
        subprocess_id: number;
        /** @description Workflow task ID. */
        task_id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Standard action to be executed. This parameter must not be send with the custom_action parameter. */
          action?: string;
          /** @description Custom action (disposition) to be executed. This parameter must not be sent with the action parameter. */
          custom_action?: string;
          /** @description Comment which should be set for the action. */
          comment?: string;
          /** @description The data required to create a perspective */
          authentication_info?: string;
        };
      };
    };
    responses: {
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>It is not allowed to execute an action and a custom action</li><li>Invalid username/password specified. This response contains additionally the parameter 'errorDetail' with the value '662306821'.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Reads workflow activities
   * @description Reads all available workflow activities based on the provided ids
   */
  WorkflowActivities: {
    parameters: {
      query?: {
        /** @description client  parameter is used to recognize from where the rest api is triggered, for mobile client = 1 */
        client?: number;
        /** @description limit parameter represents, the number of activities to be fetched from the available activities */
        limit?: number;
      };
      path: {
        /** @description Workflow ID to read activities from */
        process_id: number;
        /** @description Sub workflow ID to read activities from */
        subprocess_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["processes_WorkflowActivitiesResults"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Loads the workflow map definition
   * @description Loads the workflow map definition
   */
  WorkflowDefinition: {
    parameters: {
      path: {
        /** @description Workflow map ID to load */
        map_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["processes_WorkflowDefinitionInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Error getting node from ID</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Initiates a workflow
   * @description Initiates a workflow.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will provide Json Input format:<br><br><code>{"definition":{"workflow_id":30568,"role_info": {"Role1": 1000, "Role2": 1000}}}</code><br><br>
   */
  initiate: {
    requestBody: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["processes_ProcessInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Error getting node from ID</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Changes the process status
   * @description Changes the process status
   */
  changeStatus: {
    parameters: {
      path: {
        /** @description Process ID */
        process_id: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description New process status. Possible values depending on the current state are suspend, resume, stop, archive. */
          status?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>No permission to change the status of the process</li><li>Could not access task status</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Deletes the process
   * @description Deletes the process
   */
  deleteProcess: {
    parameters: {
      path: {
        /** @description Process ID */
        process_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not access task status</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Task List for a Workflow Instance
   * @description Gets the Tasks list of workflow categorized by Completed, In Progress and Next
   */
  getProcesses: {
    parameters: {
      path: {
        /** @description Process ID */
        process_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["workflow_Process_TaskListInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not access task status</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Workflows by status
   * @description Get workflows based on WF status, Kind, sort order, and completion dates
   */
  getWorkflowStatus: {
    parameters: {
      query?: {
        /** @description Filter on Workflow Completion Date */
        wfretention?: number;
        /** @description Filter Workflows based on kind, See valid values for more details */
        Kind?: "Managed" | "Initiated" | "Both";
        /** @description Sort based on Key and Order */
        sort?:
          | "status_key asc"
          | "status_key desc"
          | "due_date asc"
          | "due_date desc"
          | "wf_name asc"
          | "wf_name desc"
          | "date_initiated asc"
          | "date_initiated desc";
        /** @description Retrive Workflows based on the status passed */
        wstatus?: "workflowlate" | "ontime" | "completed" | "stopped";
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["workflow_StatusListInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not access task status</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get the reservation request status
   * @description Get the information of the given node including currently reserved user, when the node was reserved and how many users has requested for reservation
   */
  GetRequestStatus: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_GetRequestStatus"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not get the set of users that are part of the reserve queue.</li><li>This node is not reserved.</li><li>This node type does not support reserve management.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      404: never;
    };
  };
  /**
   * Request for the reservation
   * @description Add the current user into the reservation request queue of the given node
   */
  AddRequestReservation: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li> This node is not reserved.</li><li>Unable to request reservation, reservation request already exists.</li><li>This node type does not support reserve management.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      404: never;
    };
  };
  /**
   * Cancel the request for reservation
   * @description Remove the current user from the reservation request queue of the given node
   */
  DeleteRequestReservation: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Unable to delete reservation request, user is not in reservation queue.</li><li>This node type does not support reserve management.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      404: never;
    };
  };
  /**
   * Get Current Regions Info
   * @description Returns a list of regions.
   */
  GetRegionsInfo: {
    parameters: {
      query?: {
        /** @description Filter the results to show regions based on their queryable setting value */
        queryable?: boolean;
        /** @description Filter the results to show regions based on their displayable setting value */
        displayable?: boolean;
        /** @description Filter the results to show regions based on their search_by_default setting value */
        search_by_default?: boolean;
        /** @description Filter the results to show regions based on their facet setting value */
        facet?: boolean;
        /** @description Filter the results to show regions based on their sortable setting value */
        sortable?: boolean;
        /** @description Login name of the user to impersonate (available to users with system administration rights only) */
        user_login?: string;
        /** @description Domain of the user to impersonate (available to users with system administration rights only) */
        user_domain?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_RegionInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>You don't have the system administration rights to use user_login or user_domain</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Get Current Slices Info
   * @description Returns a list of slices.
   */
  GetSlicessInfo: {
    parameters: {
      query?: {
        /** @description Login name of the user to impersonate (available to users with system administration rights only) */
        user_login?: string;
        /** @description Domain of the user to impersonate (available to users with system administration rights only) */
        user_domain?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_SliceInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>You don't have the system administration rights permission to use user_login or user_domain</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Returns search results
   * @deprecated
   * @description Returns search results. This call is fully supported and functional, however it is recommended to use the POST method as it supports larger search queries and it is more secure.
   */
  none: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_SliceInfo"];
        };
      };
    };
  };
  /**
   * Returns search results
   * @description Returns search results.
   */
  GetRegionsInfo2: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description LQL where clause (complex query mode) e.g. 'test or OTSubType: 189'. */
          where?: string;
          /** @description ID of slice or list of slices. */
          slice?: number;
          /** @description Sort region and direction ( e.g. 'desc_OTObjectSize'. Ascending is default if not specified ). */
          sort?: string;
          /** @description Which page to start returning results from. */
          page?: number;
          /** @description Maximum number of items returned per page. */
          limit?: number;
          /** @description List of regions to return, e.g. { 'OTName','OTFileSize', ... }  Adding a value in the above list will add a 'regions' section in the return response. NOTE: The response structure under 'regions' will change depending on the regions used in the query. When not specified the list of regions returned will be those defined in the template or query that was used to run the query. If no template or query is specified, the user's default template is used. */
          select?: string;
          /** @description List of options for extra data to return. Available options are: { 'featured', 'facets', 'facets_raw', and 'highlight_summaries' }. If 'facets' or 'facets_raw' are included in the option list, a facet section will be added to the return response. */
          options?: string;
          /** @description ID of a saved search query. */
          query_id?: number;
          /** @description Login name of the user to impersonate (available to users with system administration rights only). */
          user_login?: string;
          /** @description Domain of the user to impersonate (available to users with system administration rights only). */
          user_domain?: string;
          /** @description ID of a saved search template. */
          template_id?: number;
          /** @description To be included if metadata/definitions are required (includes display names, etc.), else to be omitted. */
          metadata?: boolean;
          /** @description Search Mode options. Available options are: { 'allwords', 'anywords', 'exactphrase', and 'complexquery' }. If not specified, it defaults to 'complexQuery'. */
          lookfor?: string;
          /** @description Specify the kind of related terms included in the search. Available options are: { 'synonymsof', 'relatedto', 'soundslike', 'wordbeginswith', and 'wordendswith' }. If not specified or specify any value other than the available options, it will be ignored. */
          modifier?: string;
          /** @description Narrow the search by specifying whether search within the content or metadata of items, or both. Available options are: { 'content', 'metadata', and 'all' }. If not specified, it defaults to 'all'. */
          within?: string;
          /** @description Specify the boolean operator between multiple query clauses (such as between a saved search query and a specified where parameter). Valid values are: 'or', 'and', 'not'. Defaults to 'or' if not specified or an invalid entry is used. */
          boolean?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_SearchInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>You don't have the system administration rights permission to use user_login or user_domain</li><li>Error Evaluating Query</li><li>You have either not specified any search criterion at all, or one of your Livelink Query Language statements is incorrect. Edit the query by clicking an option in at least one list and/or correcting the statements that appear in the fields</li><li>Invalid datatype specified for argument {argumentName}</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Get information on available search Slices, Personal Search Forms, Recent Search Forms,  Search Bar Full Text settings, and System Search Forms for the user
   * @description Returns lists of Slices, Personal Search Forms, Recent Search Forms, Search Bar Full Text settings, and System Search Forms
   */
  GetSearchInfo: {
    parameters: {
      query?: {
        /** @description ID of container node for from here searches. */
        location?: number;
        /** @description Flag to return only certain slice types. */
        enterprise_slices?: boolean;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_MembersInfo"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Gets display options from the user's default template
   * @description Gets display options from the user's default template.
   */
  GetDisplayInfo: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_TemplateDisplayInfo"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Sets display options for the user's default template
   * @description Sets the display options for the user's default template
   */
  SetDisplayInfo: {
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The number of results for each search results page. Valid values are: 10, 25, 50, 100 */
          page_size?: number;
          /** @description A flag indicating if keywords are on. */
          show_keywords?: boolean;
          /** @description A flag indicating if the location path should be shown. */
          show_location_path?: boolean;
          /**
           * @description Specifies the layout style of the search results.
           * @enum {integer}
           */
          style_id?: 0 | 1 | 2 | 3;
          /**
           * @description Specifies how summaries and desctiptions are shown.
           * @enum {string}
           */
          summary_description?: "NONE" | "SD" | "SO" | "DO" | "SP" | "DP";
          /** @description List of sort key strings specifying the regions sort order. Keys are valid regions retrieved from the available list of sortable regions. */
          sort_regions?: (
            | "valid region name 1"
            | "valid region name 2"
            | "valid region name 3"
          )[];
          /** @description List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of displayable regions. */
          display_regions?: (
            | "valid region name 1"
            | "valid region name 2"
            | "valid region name 3"
          )[];
          /** @description List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of facet regions. */
          facet_regions?: (
            | "valid region name 1"
            | "valid region name 2"
            | "valid region name 3"
          )[];
          suppress_response_codes?: components["schemas"]["suppress_response_codes"];
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Gets the display options for the specified template ID
   * @description Gets the display options for the specified template ID.
   */
  GetDisplayInfo2: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Template ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_TemplateDisplayInfo"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Sets the display options for the specified template ID
   * @description Sets the display options for the specified template ID
   */
  SetDisplayInfo2: {
    parameters: {
      path: {
        /** @description ID of the template to update. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description The number of results for each search results page. Valid values are: 10, 25, 50, 100
           * @enum {integer}
           */
          page_size?: 10 | 25 | 50 | 100;
          /** @description A flag indicating if keywords are on. */
          show_keywords?: boolean;
          /** @description A flag indicating if the location path should be shown. */
          show_location_path?: boolean;
          /**
           * @description Specifies the layout style of the search results.
           * @enum {integer}
           */
          style_id?: 0 | 1 | 2 | 3;
          /**
           * @description Specifies how summaries and desctiptions are shown.
           * @enum {string}
           */
          summary_description?: "NONE" | "SD" | "SO" | "DO" | "SP" | "DP";
          /** @description List of sort key strings specifying the regions sort order. Keys are valid regions retrieved from the available list of sortable regions. */
          sort_regions?: string[];
          /** @description List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of displayable regions. */
          display_regions?: string[];
          /** @description List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of facet regions. */
          facet_regions?: string[];
          suppress_response_codes?: components["schemas"]["suppress_response_codes"];
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
    };
  };
  /**
   * Gets display options from the specified search cache ID
   * @description Gets display options from the specified search cache ID.
   */
  GetDisplayInfo3: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Search session cache ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["search_TemplateDisplayInfo"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /**
   * Sets the display options for the specified cache ID
   * @description Sets the display options for the specified cache ID
   */
  SetDisplayInfo3: {
    parameters: {
      path: {
        /** @description ID of the search session cache to update. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * @description The number of results for each search results page. Valid values are: 10, 25, 50, 100
           * @enum {integer}
           */
          page_size?: 10 | 25 | 50 | 100;
          /** @description A flag indicating if keywords are on. */
          show_keywords?: boolean;
          /** @description A flag indicating if the location path should be shown. */
          show_location_path?: boolean;
          /**
           * @description Specifies the layout style of the search results.
           * @enum {integer}
           */
          style_id?: 0 | 1 | 2 | 3;
          /**
           * @description Specifies how summaries and desctiptions are shown.
           * @enum {string}
           */
          summary_description?: "NONE" | "SD" | "SO" | "DO" | "SP" | "DP";
          /** @description List of sort key strings specifying the regions sort order. Keys are valid regions retrieved from the available list of sortable regions. */
          sort_regions?: string[];
          /** @description List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of displayable regions. */
          display_regions?: string[];
          /** @description List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of facet regions. */
          facet_regions?: string[];
          suppress_response_codes?: components["schemas"]["suppress_response_codes"];
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["nodes_V2Empty"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
    };
  };
  /**
   * Server Messages
   * @description Returns the System Messages that are currently active.
   */
  servermessagestab: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["servermessages_results"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Object Privileges
   * @description Returns the Object Privileges that are available in the system. User must be a member of the Web Admin privilege in order to view this information.
   */
  serverobjectprivileges: {
    parameters: {
      query?: {
        /** @description Filter on the name of the Object Privilege */
        where_name?: string;
        /** @description Filter on the object's subtype of the Object Privilege. If 'where_name' is also defined, that parameter will be ignored. */
        where_type?: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["server_PrivilegeV2Collection"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description <ul><li>Authentication Required</li><li>Insufficient privileges.</li></ul> */
      401: never;
    };
  };
  /**
   * Usage Privileges
   * @description Returns the Usage Privileges that are available in the system. User must be a member of the Web Admin privilege in order to view this information.
   */
  serverusageprivileges: {
    parameters: {
      query?: {
        /** @description Filter on the usage name or usage type of the Usage Privilege */
        where_name?: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["server_PrivilegeV2Collection"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description <ul><li>Authentication Required</li><li>Insufficient privileges.</li></ul> */
      401: never;
    };
  };
  /**
   * Update Object/Usage Privileges
   * @description Makes the supplied privilege restricted or unrestricted. User must be a member of the Web Admin privilege in order to perform this operation.
   */
  serverupdageprivileges: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The object_type (for an Object Privilege) or usage_id (for a Usage Privilege) value of the privilege */
          privilege_id?: string;
          /**
           * @description 'restrict' if you want to restrict the privilege, 'unrestrict' if you want to unrestrict the privilege
           * @enum {string}
           */
          action?: "restrict" | "unrestrict";
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["server_PrivilegeV2UpdateCollection"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description <ul><li>Authentication Required</li><li>Insufficient privileges.</li></ul> */
      401: never;
      /** @description <ul><li>Invalid value specified for argument 'action'</li><li>Could not create Object Factory {usage_name}</li><li>Could not delete the specified Object Factory.</li></ul> */
      500: never;
    };
  };
  /**
   * Server Information
   * @description Returns information related to Content Server and its configuration.
   */
  serverinfotab: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["serverinfo_results"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Categories tab
   * @description Gets the necessary data to render the contents of the Categories tab.
   */
  categoriestab: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
        /** @description The ID of the category that is being added to the node */
        category_id?: number;
        /** @description Exclude all fields except the one that is specified */
        fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["tabs_CategoriesTabInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Invalid datatype specified for argument 'id'</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get a node for {id} */
      500: never;
    };
  };
  /**
   * TKL Attribute Valid Values
   * @description List of Valid Values for a TKL Attribute based on the dependent attribute values if provided
   */
  ValidValues: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Node ID For which the category is applied. If the version_number parameter is specified, then this parameter is not required.In workflow scenario draftprocess id. */
          id?: number;
          /** @description attribute key for which list of valid values are required */
          attribute_key?: string;
          /** @description Category version number. If the id parameter is specified then this parameter is not needed. Category ID will be obtained from attribute_key parameter. */
          version_number?: number;
          /** @description List of key value pairs of attributes */
          attribute_values?: string;
          /** @description Sub Workflow ID. If subwork_id parameter is specified then the values of sub workflow will be fetched. */
          subwork_id?: number;
          /** @description Type ahead search. If typeAheadSearch parameter is specified then the tkl values searched with option like startwith, contains or none. */
          typeAheadSearch?: string;
          /** @description Filter data is a search data, which is entered by you. If typeAheadSearch parameter is specified then the tkl values searched with typeaheadsearch option like startwith or contains.For none option it won't be considered */
          FilterData?: string;
          /** @description Page index. it is used to retrieve specific page number values by considering global page size configuration value. */
          PageIndex?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["tklattribute_ValidValues"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Default Values of child TKL attributes
   * @description List of all child attribute values if the length of valid values is 1, depending on the parent attribute value
   */
  DefaultValues: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Node ID For which the category is applied. If the version_number parameter is specified, then this parameter is not required.In workflow scenario draftprocess id. */
          id?: number;
          /** @description attribute key for which list of valid values are required */
          attribute_key?: string;
          /** @description The possible values are TRUE/FALSE, Default Value is FALSE. If it is called from custom view search widget then value is TRUE else FALSE */
          is_search?: boolean;
          /** @description Category version number. If the id parameter is specified then this parameter is not needed. Category ID will be obtained from attribute_key parameter. */
          version_number?: number;
          /** @description List of key value pairs of attributes */
          attribute_values?: string;
          /** @description Sub Workflow ID. If subwork_id parameter is specified then the values of sub workflow will be fetched. */
          subwork_id?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["tklattribute_V2ResponseElement"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Check a list of names
   * @description For a list of names and a given parent node, check to see if there are name collisions (subject to database collation) between the list of names and the nodes in the parent node.
   */
  CheckNames: {
    requestBody: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["validation_CheckNodesInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Body Parameter 'parent_id' is invalid.</li><li>Body Parameter 'parent_id' is missing.</li><li>Body Parameter 'names' is invalid.</li><li>Body Parameter 'names' is missing.</li><li>Error retrieving nodes</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Check for enforced required attributes
   * @description Check if the given node IDs enforce required attributes.
   */
  CheckCategories: {
    requestBody: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["validation_CheckCategoriesInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Body Parameter 'ids' is invalid.</li><li>Body Parameter 'ids' is missing.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Check for name collisions
   * @description Check for name collisions in the specified node (container).  NOTE: The output of this call will contain ONLY the items with name collisions.  If there are no name collisions, the output will be empty.
   */
  CheckNames2: {
    requestBody: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["validation_CheckNamesInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Body Parameter 'parent_id' is invalid.</li><li>Body Parameter 'parent_id' is missing.</li><li>Body Parameter 'names' is invalid.</li><li>Body Parameter 'names' is missing.</li><li>Error retrieving nodes</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * List versions
   * @description Gets info on the versions on the node.
   */
  listVersions: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_VersionsInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Add version
   * @description Adds a new version on the node.
   */
  addVersion: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * Format: binary
           * @description The file
           */
          file?: string;
          /** @description Version description */
          description?: string;
          /** @description Indicates whether the added version is a major version */
          add_major_version?: boolean;
          /**
           * Format: date
           * @description External create date
           */
          external_create_date?: string;
          /**
           * Format: date
           * @description External modify date
           */
          external_modify_date?: string;
          /**
           * @description External source
           * @enum {string}
           */
          external_source?:
            | "file_system"
            | "mobile_device"
            | "scanner"
            | "fax"
            | "ftp"
            | "shared_drive"
            | "removable_disk"
            | "backup_media"
            | "optical_disk"
            | "onedrive"
            | "cloud_storage"
            | "camera"
            | "email_server"
            | "elink"
            | "opentext_core"
            | "edocs"
            | "sap"
            | "document_management"
            | "exchange_mailbox"
            | "notes_mailbox"
            | "outlook_pst"
            | "file_stream"
            | "mailbox_other";
          /** @description External identity */
          external_identity?: string;
          /**
           * @description External identity type
           * @enum {string}
           */
          external_identity_type?:
            | "email_address"
            | "domain_userid"
            | "generic_userid"
            | "name"
            | "last_name"
            | "windows_sid"
            | "guid"
            | "phone_number"
            | "ldap_name"
            | "exchange_mailboxid";
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_NewVersionInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not set feature Versioning, value must be a Boolean</li><li>Missing required parameter 'File'</li><li>External source not found</li><li>Error getting identity type id</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * List versions
   * @description Gets info on the versions on the node. <br><br>NOTE: if results.data.versions is an empty object (ie. results.data.version = []), the node has no versions.
   */
  listVersions2: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        /** @description Order of the results.<br><ul><li>asc = ascending order (from the earliest to latest version)</li><li>desc = descending order (from the latest to the earliest version)</li><ul> */
        order?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersions"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Add version
   * @description Adds a new version on the node. Must use `file` _or_ `upload_key` arguments.
   */
  addVersion2: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * Format: binary
           * @description The file
           */
          file?: string;
          /** @description The key to identify a Large File Upload session */
          upload_key?: string;
          /** @description Version description */
          description?: string;
          /** @description Indicates whether the added version is a major version */
          add_major_version?: boolean;
          /**
           * Format: date
           * @description External create date
           */
          external_create_date?: string;
          /**
           * Format: date
           * @description External modify date
           */
          external_modify_date?: string;
          /**
           * @description External source
           * @enum {string}
           */
          external_source?:
            | "file_system"
            | "mobile_device"
            | "scanner"
            | "fax"
            | "ftp"
            | "shared_drive"
            | "removable_disk"
            | "backup_media"
            | "optical_disk"
            | "onedrive"
            | "cloud_storage"
            | "camera"
            | "email_server"
            | "elink"
            | "opentext_core"
            | "edocs"
            | "sap"
            | "document_management"
            | "exchange_mailbox"
            | "notes_mailbox"
            | "outlook_pst"
            | "file_stream"
            | "mailbox_other";
          /** @description External identity */
          external_identity?: string;
          /**
           * @description External identity type
           * @enum {string}
           */
          external_identity_type?:
            | "email_address"
            | "domain_userid"
            | "generic_userid"
            | "name"
            | "last_name"
            | "windows_sid"
            | "guid"
            | "phone_number"
            | "ldap_name"
            | "exchange_mailboxid";
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsAdd"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not set feature Versioning, value must be a Boolean</li><li>Missing required parameter 'File'</li><li>External source not found</li><li>Error getting identity type id</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Purge versions
   * @description Purges the versions on the node. If the node is using advanced versioning, then it will only purge minor versions.
   */
  purgeVersion: {
    parameters: {
      query?: {
        /** @description Specifies the number of versions to keep ( must be a positive integer ). If the node is using advanced versioning, this parameter specifies the number of minor versions to keep. If this is not specified, the default value of 1 will be used. */
        number_to_keep?: number;
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsPurge"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not process object, type '<Node_Type>' has no role 'versions'</li><li>Missing required parameter 'Number to Keep'</li><li>Invalid value for NumberToKeep</li><li>Error purging versions.</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      500: never;
    };
  };
  /**
   * Get specified version
   * @description Gets info on the specified version on the node.
   */
  getVersion: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_OneVersionInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Update version
   * @description Updates the specified version on the node.
   */
  updateVersion: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The version description */
          description?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Delete version
   * @description Deletes the specified version on the node.
   */
  deleteVersion: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Error getting version for node</li><li>Could not process object, invalid action 'versions-delete'</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get specified version
   * @description Gets info on the versions on the node. <br><br>NOTE: if results.data.versions is an empty object (ie. results.data.version = []), the node has no versions.
   */
  getVersion2: {
    parameters: {
      query?: {
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsSingle"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Update version
   * @description Updates the specified version on the node.
   */
  updateVersion2: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The version description */
          description?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsSingle"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Delete version
   * @description Deletes the specified version on the node.
   */
  deleteVersion2: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsDelete"];
        };
      };
      /** @description <ul><li>Error getting version for node</li><li>Could not process object, invalid action 'versions-delete'</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get latest version
   * @description Gets info on the latest version on the node.
   */
  getLatestVersion: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_LatestVersionInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get actions for a version
   * @description Gets the available actions on the specified version on the node.
   */
  getVersionActions: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_VersionActionsInfo"];
        };
      };
      /** @description <ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance */
      500: never;
    };
  };
  /**
   * Get categories for specified version
   * @description Gets info on the categories on the specified version on the node.  If the specified version does not have categories, the return data structure(s) will be empty.
   */
  getVersionCategories: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_CategoryInfo"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get categories for specified version
   * @description Gets info on the categories on the specified version on the node. Use the metadata flag to get the category attribute ordering.<br>If the specified version does not have categories, the 'results' list will be empty. <br>If there are multiple categories on that version, they will be returned under the 'results' list in the order they were applied to that version.
   */
  getVersionCategories2: {
    parameters: {
      query?: {
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number. Use 0 to get the latest version. */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2CategoriesResponse"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Download version
   * @description Downloads contents of the specified version on the node.  The name of the downloaded file will be that of the version's file name.
   */
  DownloadVersion: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_DownloadVersion"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul> */
      500: never;
    };
  };
  /**
   * Download version in specified name
   * @description Downloads contents of the specified version on the node.  The name of the downloaded file will be set to the value in {document_name}.
   */
  DownloadNamedVersion: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
        /** @description The name of the downloaded version */
        document_name: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_DownloadNamedVersion"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul> */
      500: never;
    };
  };
  /**
   * Download version
   * @description Downloads contents of the specified version on the node. The name of the downloaded file will be that of the version's file name.
   */
  DownloadVersion2: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_DownloadVersion"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul> */
      500: never;
    };
  };
  /**
   * Download version in specified name
   * @description Downloads contents of the specified version on the node. The name of the downloaded file will be set to the value in {document_name}.
   */
  DownloadNamedVersion2: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
        /** @description The name of the downloaded version */
        document_name: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_DownloadNamedVersion"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul> */
      500: never;
    };
  };
  /**
   * List all renditions for all available versions
   * @description Lists all renditions for all available versions indexed by <strong>&lt;version_number&gt;</strong>.  <br><br>NOTE: if results.data[ <strong>&lt;version_number&gt;</strong> ] is an empty list, the version has no renditions.
   */
  listRenditions: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResultRenditionsListAll"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li><li>Could not get Renditions for object.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Add rendition
   * @description Adds a new rendition to the current version of a node.
   */
  addRendition: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Rendition type. NOTE: This must be a non-empty value (ie. not a zero-length String). */
          rendition_type?: string;
          /** @description File type (not to be confused with the mime type, which is automatically read from the file). */
          file_type?: string;
          /**
           * Format: binary
           * @description The file
           */
          file?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseRenditionsAdd"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Argument "file" is required</li><li>Argument "rendition_type" is required</li><li>Could not get Renditions for object.</li><li>Could not add Rendition '<b>{rendition_type}</b>' to version '<b>{version_number}</b>'</li><li>Could not set feature Rendition Type, the length of '' is less than the minimum length (1)</li></ul> */
      400: never;
      /** @description <ul><li>Authentication Required</li><li>Insufficient permissions to perform that action</li></ul> */
      401: never;
    };
  };
  /**
   * List/Get rendition(s) for a specified version
   * @description List/Get rendition(s) for a specified version depending on specified parameters.<ul><li>"rendition_type" not specified:<br>List available renditions for the specified version. If no renditions are available, results.data will be an empty list.</li><li>"rendition_type" specified:<br>Get the specified rendition of the version. If no such rendition exists, will return an error. results.data will be an object with the rendition information.</li></ul>
   */
  listRenditionsSpecific: {
    parameters: {
      query?: {
        /** @description Rendition type */
        rendition_type?: string;
      };
      path: {
        /** @description Node ID */
        id: number;
        /** @description Version number */
        version_number: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResultRenditions"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li><li>Could not get Renditions for object.</li><li>Invalid datatype specified for argument "version_number".</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Unable to get node rendition</li><li>Invalid version number '{version_number}'.</li></ul> */
      500: never;
    };
  };
  /**
   * Replace rendition
   * @description Replaces the specified rendition of a version on the node
   */
  replaceRendition: {
    parameters: {
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: number;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * Format: binary
           * @description The file
           */
          file?: string;
          /** @description Rendition type. NOTE: This must be a non-empty value (ie. not a zero-length String). */
          rendition_type?: string;
          /** @description File type (not to be confused with the mime type, which is automatically read from the file). */
          file_type?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseRenditionsReplace"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Argument "file" is required</li><li>Argument "rendition_type" is required</li><li>Invalid datatype specified for argument "version_number".</li><li>Could not get Renditions for object.</li><li>Could not replace Rendition '<b>{rendition_type}</b>' in version '<b>{version_number}</b>'</li></ul> */
      400: never;
      /** @description Authentication Required | Insufficient permissions to perform that action */
      401: never;
      /** @description Invalid version number '<b>{version_number}</b>'. | Error getting version for node: <b>{version_number}</b> */
      500: never;
    };
  };
  /**
   * Delete rendition
   * @description Deletes the specified rendition of a version on the node.
   */
  deleteRendition: {
    parameters: {
      query: {
        /** @description Rendition type */
        rendition_type: string;
      };
      path: {
        /** @description Node ID */
        id: number;
        /** @description Version number */
        version_number: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseRenditionsDelete"];
        };
      };
      /** @description <ul><li>Error getting version for node</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get Renditions for object.</li><li>Invalid version number '{version_number}'.</li><li>Insufficient permissions to perform that action</li><li>Invalid datatype specified for argument "version_number".</li><li>Error deleting the specified rendition.</li></ul> */
      500: never;
    };
  };
  /**
   * Download rendition
   * @description Download contents of the specified rendition of the specified version of the node. The name of the downloaded file will be that of the node or the node with the rendition type and the extension of the rendition if they are of different types.
   */
  DownloadRendition: {
    parameters: {
      query: {
        /** @description Rendition type */
        rendition_type: string;
      };
      path: {
        /** @description Node ID */
        id: number;
        /** @description Version number */
        version_number: number;
      };
    };
    responses: {
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'rendition_type' is required.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get the version of '{node}'</li><li>Unable to get node rendition</li></ul> */
      500: never;
    };
  };
  /**
   * Get info on available version thumbnails
   * @description Gets info on the version thumbnails on the node (available in Content Server 10.5).
   */
  VersionThumbnails: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_VersionThumbnails"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get node for ID {id}</li><li>Could not get version {version_number} for node {id}.</li><li>Thumbnail is not available.</li></ul> */
      404: never;
    };
  };
  /**
   * Get info on the specified size of a version thumbnail
   * @description Gets info on the specified size of version thumbnail on the node (available in Content Server 10.5).
   */
  VersionThumbnails2: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
        /** @description Thumbnail size, e.g medium */
        thumbnail_type: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_VersionThumbnails"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get node for ID {id}</li><li>Could not get version {version_number} for node {id}.</li><li>Thumbnail is not available.</li></ul> */
      404: never;
    };
  };
  /**
   * Download version thumbnail in specified size
   * @description Downloads the specified size of version thumbnail on the node (available in Content Server 10.5).
   */
  DownloadVersionThumbnail: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID */
        id: string;
        /** @description Version number */
        version_number: string;
        /** @description Thumbnail size, e.g medium */
        thumbnail_type: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_DownloadVersionThumbnail"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not get node for ID {id}</li><li>Could not get version {version_number} for node {id}.</li><li>Thumbnail is not available.</li></ul> */
      404: never;
    };
  };
  /**
   * Promote version
   * @description Promotes a version to the next Major version on the node.
   */
  promoteVersion: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
        /** @description The version_number of the version to promote */
        version_number: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The description of the newly promoted version */
          description?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsSingle"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>You cannot promote a version for {name} which is using standard versioning</li><li>Could not process object, type '{node_type}' has no role 'versions'</li><li>You do not have permission to promote a version for '{name}'.</li><li>Error getting version for node</li></ul> */
      500: never;
    };
  };
  /**
   * Lock version
   * @description Locks the specified version on the node, preventing it from being modified or deleted.<br><br>NOTE:This is not the same as <b>reserving</b> a node, which prevents the document and its versions from being modified. Locking a version only prevents that version from being modified - the rest of the node can still be modified by other users (ie. a user can lock a version, while another user can change the node's name or description at the same time).
   */
  lockVersion: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
        /** @description The version_number of the version to lock */
        version_number: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsSingle"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not lock version '{version_number}' for node '{id}'.</li><li>Error locking the specified version.</li><li>Error getting version for node</li></ul> */
      500: never;
    };
  };
  /**
   * Unlock version
   * @description Unlocks the specified version on the node.<br><br>NOTE: This is not the same as <b>unreserving</b> a node. Unlocking a version is specific to that version alone.
   */
  unlockVersion: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
        /** @description The version_number of the version to unlock */
        version_number: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["versions_V2ResponseVersionsSingle"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not unlock version '{version_number}' for node '{id}'.</li><li>Error unlocking the specified version.</li><li>Error getting version for node</li></ul> */
      500: never;
    };
  };
  /**
   * View the content of a version as HTML.
   * @description View the HTML rendering of a version.
   */
  viewHtmlVersions: {
    parameters: {
      path: {
        /** @description Node ID */
        id: number;
        /** @description Version number */
        version_number: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "text/html": unknown;
        };
      };
      /** @description <ul> <li>You do not have permission to view this document.</li> </ul> */
      403: never;
      /** @description <ul> <li>Node must be a document node.</li> <li>Could not find the original item.</li> <li>Error retrieving the specified version.</li> </ul> */
      404: never;
      /** @description <ul> <li>The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li> <li>Node must be a document node.</li> </ul> */
      500: never;
    };
  };
  /**
   * Get available volumes
   * @description Gets info on available system volumes.
   */
  getVolumes: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_InfoResults"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get volume objects */
      500: never;
    };
  };
  /**
   * Get available volumes
   * @description Gets info on available system volumes.
   */
  getVolumes2: {
    parameters: {
      query?: {
        /** @description Retrieve actions for the volume. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested. */
        actions?: string;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_BrowseVolumes2"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Could not get volume objects */
      500: never;
    };
  };
  /**
   * Get volume info
   * @description Gets info about the specified volume.
   */
  getVolume: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Subtype of the volume */
        type: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_InfoResult"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul> */
      500: never;
    };
  };
  /**
   * Get volume info
   * @description Gets info about the specified volume.
   */
  getVolume2: {
    parameters: {
      query?: {
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Subtype of the volume */
        type: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_V2ResponseElement"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul> */
      500: never;
    };
  };
  /**
   * Get subnodes of the specified volume
   * @description Browses the volume, returning info on its child nodes.
   */
  browseVolume: {
    parameters: {
      query?: {
        /** @description Filter on node type */
        where_type?: number;
        /** @description Filter on node name */
        where_name?: string;
        /** @description Filter on facet values.  There will be one instance of this parameter for each facet selected.  The values are combined using | character.  E.g. where_facet=2095:144|0|-1 (note that -1 is a special value that denotes containers). */
        where_facet?: string;
        /** @description Order by named column.  Format can be sort=name, or sort=asc_name, or sort=desc_name. */
        sort?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        /** @description Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions). */
        fields?: string;
        /** @description Expand all fields that belong to the specified persona (e.g. expand=node&expand=member). */
        expand?: string;
        /** @description Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id). */
        expand_fields?: string;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Subtype of the volume */
        type: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_VolumeBrowse"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul> */
      500: never;
    };
  };
  /**
   * Get subnodes of the specified volume
   * @description Browses the volume, returning info on its child nodes.
   */
  browseVolume2: {
    parameters: {
      query?: {
        /** @description Filter on node type */
        where_type?: number;
        /** @description Filter on node name */
        where_name?: string;
        /** @description Filter on facet values.  There will be one instance of this parameter for each facet selected.  The values are combined using | character.  E.g. where_facet=2095:144|0|-1 (note that -1 is a special value that denotes containers). */
        where_facet?: string;
        /** @description Retrieve actions for the node. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested. */
        actions?: string;
        /** @description Order by named column.  Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        /** @description Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)). */
        fields?: string;
        /** @description Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.). */
        expand?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Subtype of the volume */
        type: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_BrowseResult2"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul> */
      500: never;
    };
  };
  /**
   * Get subnodes of the Recycle Bin
   * @description Browses the Recycle Bin, returning info on its contents.
   */
  browseRecycleBin: {
    parameters: {
      query?: {
        /** @description Order by named column. Format can be sort=name or sort=asc_name (name ascending) or sort=desc_name (name descending). If the prefix of asc or desc is not used, then desc (descending) will be assumed.<ul><li>type : Sort by subtype<br>(NOTE: Containers such as Folders and Compound Documents (but not limited to those) will always be sorted to the top in their own grouping before the other non-container items in the Recycle Bin are sorted)</li><li>name : Sort by name</li><li>purged_date : Sort by purged date</li><li>deleted_date : Sort by deleted date</li></ul>The default is 'deleted_date' in descending order (ie. the latest deleted item will be at the top)<br><br>Example to sort by name in descending order<br><code>?sort=desc_name</code><br><br>Example to sort by purged date in the default descending order<br><code>?sort=purged_date</code> */
        sort?: string;
        /** @description Filter on which user had deleted the nodes, and when.<ul><li>user_deleted : Nodes that the current user has deleted</li><li>user_deleted_today : Nodes that the current user has deleted today</li><li>anyone_deleted : Nodes that any user has deleted</li><li>anyone_deleted_today : Nodes that any user has deleted today</li></ul>The default is 'user_deleted_today'.<br><br>Example to get all nodes that the current user has deleted (from any period in time)<br><code>?mode=user_deleted</code> */
        mode?: string;
        /** @description Filter on the name (case insensitive).<br><br>Example to get all nodes where the names start with 'testfolder' (this will return nodes which are named like 'testfolder1', 'TESTFolder 1', etc.)<br><code>?where_name=testfolder</code> */
        where_name?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        limit?: number;
        /** @description The 'fields' parameter can be used to filter the results even further, if necessary. Only ?fields=properties is supported for Recycle Bin items.<br><br>Show the 'properties' field (which contains node information such as id, type, name, user_deleted_id, purged_date, deleted_date, parent_id)<br><code>?fields=properties</code><br><br>Show the 'properties' fields but only the parent_id and id<br><code>?fields=properties{parent_id,id} */
        fields?: string;
        /** @description Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata). */
        metadata?: string | null;
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_BrowseRecyleBinResult2"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description <ul><li>Authentication Required</li></ul> */
      401: never;
      /** @description <ul><li>Could not set feature Sort Column, invalid value '(sort value)'</li><li>Could not set feature Mode, invalid value '(mode value)'</li></ul> */
      500: never;
    };
  };
  /**
   * Purge nodes from the Recycle Bin
   * @description Purge nodes from the Recycle Bin<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following example assumes that there are two nodes in the Recycle Bin with the IDs 3589 and 3590, respectively, that the user wants to purge. The ID 7321 does not belong to any node in the Recycle Bin.<br><br>Purge the nodes with the given IDs:<br><br><code>{"ids":[3589,3590,7321]}</code><br><br>The response will have a results structure (see the schema diagram below) that have two sub-structures 'success' and 'failure' which will list the IDs that were successfully purged, and the IDs that had failed to be purged, as well as error messages.<br><br>results.success.ids : A List of the IDs which were successfully purged (ex. [ 3589, 3590 ].<br><br>results.failures.ids : A List of the IDs which were not successfully purged. (ex. [ 7321 ])<br><br>results.failures.errors.7321.message : The error message (ex. Could not get a node for 7321)<br><br>NOTE: If the response code is 200, all of the ids were successfully purged and there is no need to check the results. If the response code is 400 and there are results, you will need to check the above sub-structures to see which nodes were purged, and which ones were not.
   */
  purgeRecycleBin: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_PurgeRestoreRecycleBinResult"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>The parameter 'ids' is not specified.</li></ul> */
      400: never;
      /** @description <ul><li>Authentication Required</li></ul> */
      401: never;
    };
  };
  /**
   * Restore nodes that are in the Recycle Bin back to their original location
   * @description Restore nodes that are in the Recycle Bin back to their original location<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following example assumes that there are two nodes in the Recycle Bin with the IDs 3589 and 3590, respectively, that the user wants to restore. The ID 7321 does not belong to any node in the Recycle Bin.<br><br>Restore the nodes with the given IDs:<br><br><code>{"ids":[3589,3590,7321]}</code><br><br>The response will have a results structure (see the schema diagram below) that have two sub-structures 'success' and 'failure' which will list the IDs that were successfully restored, and the IDs that had failed to be restored, as well as error messages.<br><br>results.success.ids : A List of the IDs which were successfully restored (ex. [ 3589, 3590 ].<br><br>results.failures.ids : A List of the IDs which were not successfully restored. (ex. [ 7321 ])<br><br>results.failures.errors.7321.message : The error message (ex. Could not get a node for 7321)<br><br>NOTE: If the response code is 200, all of the ids were successfully restored and there is no need to check the results. If the response code is 400 and there are results, you will need to check the above sub-structures to see which nodes were restored, and which ones were not.
   */
  restoreRecycleBin: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["volumes_PurgeRestoreRecycleBinResult"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li><li>The parameter 'ids' is not specified.</li></ul> */
      400: never;
      /** @description <ul><li>Authentication Required</li></ul> */
      401: never;
    };
  };
  /**
   * Get destination data for a WebReport
   * @description Returns the destination data from a WebReport node. (*) against a field name denotes that the field supports tag replacement.
   */
  getWebReportDestination: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID of a WebReport node */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["webreports_DestinationResponse"];
        };
      };
      /** @description <ul><li>Could not get node for {id}</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul> */
      500: never;
    };
  };
  /**
   * Get output for a WebReport
   * @description Returns the output from the execution of a WebReport node. This API only supports the 'browser' and 'desktop' WebReport destination types. Any content-type is supported for the response. The content-type of the response is user-defined according to the 'Export Mime Type' specified for the WebReport node destination. All dynamic parameters and those defined by the output of the 'api/v1/nodes/{id}/parameters' or 'api/v1/webreports/{nickname}/parameters' APIs are supported when passed in as part of the query string.
   */
  getWebReportOutput: {
    parameters: {
      query?: {
        /** @description Specifies the emitter used to format the WebReport output. If this parameter isn't defined the default will be 'json'. If 'webreport' is used then no additional processing will be performed on the output, if 'json' is used then json processing including escaping will be performed. If your WebReport returns a content-type which isn't json or if it returns json which has already been escaped, 'webreport' should be used. */
        format?: "webreport" | "json";
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID of a WebReport node */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Could not get node for {id}</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul> */
      500: never;
    };
  };
  /**
   * Run a WebReport that has a destination type other than 'browser' or 'desktop'
   * @description Runs a WebReport. This API supports all destination types other than 'browser' and 'desktop' WebReport destination types, for which the GET method should be used instead.
   */
  postWebReportOutput: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Node ID of a WebReport node */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["webreports_ParametersListing"];
        };
      };
      /** @description <ul><li>Could not get node for {id}</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Error getting parameters for WebReport */
      500: never;
    };
  };
  /**
   * Get output for a WebReport
   * @description Returns the output from the execution of a WebReport node. This API only supports the 'browser' and 'desktop' WebReport destination types. Any content-type is supported for the response. The content-type of the response is user-defined according to the 'Export Mime Type' specified for the WebReport node destination. All dynamic parameters and those defined by the output of the 'api/v1/nodes/{id}/parameters' or 'api/v1/webreports/{nickname}/parameters' APIs are supported when passed in as part of the query string.
   */
  getWebReportOutput2: {
    parameters: {
      query?: {
        /** @description Specifies the emitter used to format the WebReport output. If this parameter isn't defined the default will be 'json'. If 'webreport' is used then no additional processing will be performed on the output, if 'json' is used then json processing including escaping will be performed. If your WebReport returns a content-type which isn't json or if it returns json which has already been escaped, 'webreport' should be used. */
        format?: "webreport" | "json";
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Nickname of a WebReport node */
        nickname: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>Could not get node for {nickname}</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul> */
      500: never;
    };
  };
  /**
   * Run a WebReport that has a destination type other than 'browser' or 'desktop'
   * @description Runs a WebReport. This API supports all destination types other than 'browser' and 'desktop' WebReport destination types, for which the GET method should be used instead.
   */
  postWebReportOutput2: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Nickname of a WebReport node */
        nickname: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["webreports_DestinationResponse"];
        };
      };
      /** @description <ul><li>Could not get node for {nickname}</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul> */
      500: never;
    };
  };
  /**
   * Get parameters info
   * @description Returns the definition of all parameters defined for a WebReport node.
   */
  getParameters2: {
    parameters: {
      query?: {
        suppress_response_codes?: components["parameters"]["suppress_response_codes"];
      };
      path: {
        /** @description Nickname of a WebReport node */
        nickname: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["webreports_ParametersListing"];
        };
      };
      /** @description <ul><li>Could not get node for {nickname}</li><li>The REST API URL could not be found in the mappings registry</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Error getting parameters for WebReport */
      500: never;
    };
  };
  /**
   * Import administration settings
   * @description Imports administration settings from an XML file.
   */
  XmlIngestion: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * Format: binary
           * @description The XML file containing the admin settings to be imported.
           */
          file?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["xmlimport_response_200"];
        };
      };
      /** @description Import failed.<ul><li>Not an XML file.</li><li>Malformed XML.</li><li>Failed to parse request.</li><li>Error extracting properties from the uploaded file.</li></ul> */
      400: {
        content: {
          "application/json": components["schemas"]["xmlimport_response_400"];
        };
      };
      /** @description Import failed: System error.<ul><li>Invalid values in the XML.</li><li>Error saving values.</li></ul> */
      500: {
        content: {
          "application/json": components["schemas"]["xmlimport_response_500"];
        };
      };
    };
  };
  /**
   * Get all followups for a given node.
   * @description Get all followups for a given node.
   */
  getFollowUps: {
    parameters: {
      query?: {
        /** @description Actions */
        actions?: string | null;
      };
      path: {
        /** @description Data ID */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V2FollowUps"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry or Invalid datatype specified for argument 'id'. */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Get followup details for node and related followup.
   * @description This will give followups for a given node and followup id.
   */
  getFollowUpInfo: {
    parameters: {
      query?: {
        /** @description Actions */
        actions?: string | null;
      };
      path: {
        /** @description Data ID */
        id: number;
        /** @description FollowupID */
        followup_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V2FollowUpInfo"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry or Invalid datatype specified for argument 'id'. */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Changes the status of Reminder.
   * @description This will change status of reminder.
   */
  UpdateReminderStatus: {
    parameters: {
      path: {
        /** @description Data ID */
        id: number;
        /** @description FollowupID */
        followup_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description status to be updated */
          status?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V2PostReminder"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry or Could not set feature Status, value must be a integer */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance or Errors getting assignee information. */
      500: never;
    };
  };
  /**
   * Get info on followup client types.
   * @description This will give followup client types information.
   */
  getFollowupClientTypes: {
    parameters: {
      query?: {
        /** @description Reminder Client ID */
        client_id?: number;
        /** @description Reminder Client Type ID */
        id?: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V1FollowupClientTypes"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry, Invalid datatype specified for argument 'id', or Invalid datatype specified for argument 'client_id'. */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Alpaca form for viewing a reminder details on a node.
   * @description Gets the Alpaca form for viewing a reminder details on a node
   */
  getReminderInfo: {
    parameters: {
      query: {
        /** @description Followup ID */
        id: number;
      };
      path: {
        /** @description Data ID */
        nodeid: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V1ReminderView"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Alpaca form to create a reminder for a node.
   * @description Gets the Alpaca form to create a reminder for a node.
   */
  getReminderCreateForm: {
    parameters: {
      query: {
        /** @description Client ID */
        client_id: number;
        /** @description Reminder Client Type ID */
        id?: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V1ReminderCreateForm"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry, Invalid datatype specified for argument 'client_id', or Invalid datatype specified for argument 'id'. */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Create a Reminder.
   * @description This will create a reminder.
   */
  AddReminder: {
    parameters: {
      path: {
        /** @description Data ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description contains all the required properties in JSON format to create a new reminder */
          data: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V2PostReminder"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance or Errors getting assignee information. */
      500: never;
    };
  };
  /**
   * Update reminder details.
   * @description This will update reminder information.
   */
  UpdateReminder: {
    parameters: {
      path: {
        /** @description Data ID */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description contains all the required properties in JSON format to update a reminder */
          data: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["V2PostReminder"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
  /**
   * Restructures a list of items from source to destination
   * @description Moves nodes to a new destination effectively by making use of DA framework <br>This includes permissions updates and category processing as per configuration<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. </b><br><br>Restructure list of nodes from source to destination:<br><br><code>body : { "userstobenotified":"List of userIds to be notified for restructure", "AttrSourceType":"Category Inheritance","parent_id":"destination node for restructure","startdate":"Date and time for this restructure operation","subject":"Notification subject for this restructure operation","message":"Notification message for this restructure operation","nodes":"List of source data ids for the restructure operation" }</code><br>
   */
  Restructure: {
    requestBody: {
      content: {
        "text/plain": {
          /** @description List of users to be notified for this restructure example: [1000,1001] */
          userstobenotified?: number;
          /** @description The list of source nodes to be restructured along with categories <code> [{"dataid":15795,"roles":{"categories":{"8650":{"8650_2":"resttest12345678","8650_inheritance":true,"8650_1":{"upgradeable":false,"version_number":1}},"8651":{"8651_2":null,"8651_inheritance":true,"8651_1":{"upgradeable":false,"version_number":1}}}}}]</code> */
          nodes?: string;
          /** @description Notification message for this restructure */
          message?: string;
          /** @description Notification subject for this restructure */
          subject?: string;
          /** @description schedule time for restructure if specified else immediate */
          startdate?: string;
          /**
           * @description Category Inheritance where 0 is original , 1 is destination, 2 is merged
           * @enum {integer}
           */
          AttrSourceType?: 0 | 1 | 2;
          /** @description The destination node for restructure */
          parent_id?: number;
        };
      };
    };
    responses: {
      /** @description ok */
      200: never;
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li> <li>Not a valid object to perform operation on</li><li>Invalid destination location provided</li><li>User does not have restructure privilege </li><li>User does not have permission to restructure to destination </li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
    };
  };
  /**
   * Get signature request
   * @description Get signature request details
   */
  Get: {
    parameters: {
      query?: {
        /** @description Specify docusign or coresignature */
        where_provider_name?: string;
        /** @description Filters the results based on status. Valid values are 'created', 'sent', signed', 'voided' */
        where_status?: string;
        /** @description Page size */
        limit?: number;
        /** @description Page number */
        page?: number;
        /** @description Order by named column (Using prefixes such as sort=asc_created or sort=desc_created ). Format can be sort = provider_name, sort = status. If the prefix of asc or desc is not used then asc will be assumed. */
        sort?: string;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["signaturerequests_get"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li> <li>Invalid value specified for argument 'provider_name'</li><li>Invalid value specified for argument 'status'</li><li>Could not set feature Page, the value 0 is less than the minimum value (1)</li><li>Could not set feature limit, the value 0 is less than the minimum value (1)</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Could not retrieve the signature request details</li></ul> */
      500: never;
    };
  };
  /**
   * Create signature request
   * @description Create the signature request.<br><br> To create the signature request we need to pass doc_id , signer information and provider_id .<br><br>Examples <ul><li>we need to pass signer information in below format.</li><br><code>signer:{"full_name":"name","email_id":"test@opentext.com"} </code>  <br>  <br> <li> To create the signature request use below format</li> <br> <code>{"doc_id":1234,"signer":{"full_name":"name","email_id":"test@opentext.com"},"provider_id":"docusign"}</code>
   */
  Create: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Document Id (non-empty) .List of documents to be sent for signing */
          doc_id?: number;
          /** @description Signer information. (non-empty). Signer information should contain full_name and email_id */
          signer?: string;
          /** @description Non empty text that can be either docusign or coresignature */
          provider_id?: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["signaturerequests_create"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li> <li>Provider ID is not registered</li><li>Invalid value specified for argument 'signer'</li><li>Please provide at least one document to sign.</li><li>Invalid datatype specified for argument 'doc_id_list'.</li><li>Invalid datatype specified for argument 'signer'.</li><li>You do not have permissions to perform this action.</li><li>Adhoc Signing is not enabled for DocuSign/Core Signature.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>An error occurred while validating/refreshing the access token</li><li>An error occurred when sending the document to DocuSign/CoreSignature</li><li>An error occurred when storing signature request information</li></ul> */
      500: never;
    };
  };
  /**
   * Get signature request details by request id
   * @description Get signature request details by request id
   */
  GetById: {
    parameters: {
      query?: {
        /** @description Activities */
        include_activities?: boolean;
      };
      path: {
        /** @description Signature request id */
        request_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["signaturerequests_getbyId"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li> <li>Invalid Request ID</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>An error occurred when fetching the documents associated with signature request</li></ul> */
      500: never;
    };
  };
  /**
   * Send reminder notification to signers by request id
   * @description Send reminder notification to signers by request id
   */
  SendReminders: {
    parameters: {
      path: {
        /** @description Signature request id */
        request_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["signaturerequests_sendnotification"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li> <li>Invalid Request ID</li> <li>The signature request ID is invalid or you don't have access to it or the request is no longer in progress.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>An error occurred while validating/refreshing the access token</li> <li>An error occurred while sending reminder notification to signer</li></ul> */
      500: never;
    };
  };
  /**
   * Cancel the signature request by request id
   * @description Cancel the signature request by request id
   */
  Cancel: {
    parameters: {
      path: {
        /** @description Signature request id */
        request_id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["signaturerequests_cancel"];
        };
      };
      /** @description <ul><li>The REST API URL could not be found in the mappings registry</li> <li>Signature request cannot be cancelled, it is already stopped or completed.</li><li>The signature request ID is invalid or you don't have access to the request.</li></ul> */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description <ul><li>Provider ID is not registered</li><li>Error occurred while stopping the signature request</li></ul> */
      500: never;
    };
  };
  /**
   * Get syndication information of a given node
   * @description Get syndication information of a given node.
   */
  syndication: {
    parameters: {
      query: {
        /** @description The ID of the node */
        id: number;
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["syndication_response_200"];
        };
      };
      /** @description The REST API URL could not be found in the mappings registry, Invalid datatype specified for argument 'id'. */
      400: never;
      /** @description Authentication Required */
      401: never;
      /** @description Internal error. The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance. */
      500: never;
    };
  };
}
